{"version":3,"file":"leds.js","lineCount":90,"mappings":"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","sources":["tmp/devices/1.10/leds.js"," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:es6/util/arrayfromiterator] "," [synthetic:util/polyfill] "," [synthetic:es6/number/parseint] "," [synthetic:es6/math/trunc] "," [synthetic:es6/array/fill] "," [synthetic:es6/math/log2] "," [synthetic:es6/string/startswith] "," [synthetic:util/checkstringargs] "," [synthetic:es6/util/arrayfromiterable] "],"names":["$jscomp.objectCreate","$jscomp.setPrototypeOf","$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.iteratorPrototype","$jscomp.polyfill","MACHINE","constructor","Device","idMachine","idDevice","version","config","bindings","Device.Machines","addDevice","push","checkVersion","checkOverrides","addBindings","addBinding","binding","element","device","Device.BINDING.CLEAR","onclick","element.onclick","findBinding","value","Device.BINDING.PRINT","addEventListener","onKeyPress","event","window","keyCode","which","sText","setSelectionRange","length","stopPropagation","sType","afn","Device.HANDLER.COMMAND","Device.Handlers","preventDefault","i","blur","focus","sCommand","slice","lastIndexOf","fDirectBindings","Array","isArray","id","document","getElementById","println","addBindingOptions","options","fReset","sDefault","prop","option","createElement","text","appendChild","selectedIndex","addHandler","fn","parms","Device.getURLParms","indexOf","s","match","Number","parseInt","sVersion","devices","findDevice","machine","sprintf","sError","class","type","Device.Alerts.Version","Device.Alerts.list.indexOf","alert","Device.Alerts.list.push","name","undefined","findDeviceByClass","idClass","getBindingID","getBindingText","ROM.BINDING.CELLDESC","textContent","getBounded","n","min","max","getDefault","defaultValue","hasLocalStorage","Device.LocalStorage.Available","f","localStorage","setItem","Device.LocalStorage.Test","getItem","removeItem","err","message","isUserAgent","userAgent","navigator","print","Device.Category","Device.Category.indexOf","Device.CATEGORY.BUFFER","Device.PrintBuffer","substr","scrollTop","scrollHeight","console","log","printf","format","args","$jscomp.arrayFromIterator","$jscomp.makeIterator","setBindingText","setCategory","category","cPrev","fFlush","sBuffer","buffer","aParts","split","iArg","iPart","arg","flags","minimum","precision","conversion","ach","Math","trunc","abs","pow","Device.HexUpperCase","Device.HexLowerCase","getURLParms","sParms","Device.URLParms","location","search","pl","exec","decodeURIComponent","replace","trim","CLEAR","PRINT","BUFFER","COMMAND","list","Version","Available","Test","Input","Input.VERSION","time","Machine.CLASS.TIME","onHover","onReset","onPower","onInput","Input.BINDING.SURFACE","xInput","yInput","cxInput","cyInput","hGap","vGap","cxSurface","naturalWidth","cySurface","naturalHeight","xPower","yPower","cxPower","cyPower","map","nRows","nCols","fDrag","fHexagonal","cxButton","cyButton","cxGap","cyGap","xStart","yStart","captureMouse","captureTouch","input","timerInputRelease","addTimer","onInputRelease","setPosition","timerKeyRelease","onKeyRelease","keyState","setTimer","Input.BUTTON_DELAY","keysPressed","shift","captureKeys","col","row","$jscomp.inherits","Input.BINDING.POWER","Input.BINDING.RESET","addClick","addHover","addInput","onKeyDown","activeElement","ch","Input.KEYCODE","String","fromCharCode","charCode","rowMap","charCodeAt","onMouseDown","button","x","scrollX","y","scrollY","scrollTo","processEvent","Input.ACTION.PRESS","onMouseMove","Input.ACTION.MOVE","onMouseUp","Input.ACTION.RELEASE","onMouseOut","onTouchStart","onTouchMove","onTouchEnd","action","fButton","targetTouches","pageX","pageY","yOffset","xOffset","elementNext","isNaN","offsetLeft","offsetTop","offsetParent","offsetWidth","offsetHeight","fInput","fPower","cxCol","cyCol","colInput","rowInput","yCol","fRunning","iTimer","aTimers","timer","nCyclesLeft","PRESS","MOVE","RELEASE","POWER","RESET","SURFACE","LED","LED.VERSION","container","LED.BINDING.CONTAINER","Error","canvasView","getContext","innerHTML","LED.TYPE.ROUND","LED.TYPE.DIGIT","widthCell","LED.SIZES","heightCell","width","height","cols","rows","widthView","heightView","colorTransparent","getRGBAColor","colorOn","getRGBColor","colorOff","colorHighlight","colorBackground","fFixed","style","fPersistent","fHighlight","setAttribute","toString","backgroundColor","contextView","canvasGrid","widthGrid","heightGrid","contextGrid","nBufferCells","nBufferInc","bufferClone","fBufferModified","fTickled","iBufferRecent","led","addAnimator","ledAnimate","drawBuffer","clearBuffer","fDraw","initBuffer","clearGrid","fillStyle","fillRect","clearRect","fForced","drawGrid","state","color","LED.FLAGS.MODIFIED","xBias","clearGridCell","yBias","fTransparent","coords","LED.SHAPES","beginPath","arc","PI","globalCompositeOperation","fill","LED.FLAGS.PERIOD","drawString","segments","LED.SYMBOLS","drawGridSegment","LED.SEGMENT","seg","lineTo","moveTo","closePath","drawImage","getLEDCountsPacked","getLEDState","colorDefault","LED.COLORS","alpha","brightness","rgb","parseRGBValues","round","LED.STATE.OFF","base","setLEDColor","fModified","colorNew","setLEDCounts","counts","bits","c","setLEDState","LED.FLAGS.SET","ROUND","DIGIT","CONTAINER","OFF","SET","PERIOD","MODIFIED","SQUARE","ROM","ROM.VERSION","data","ROM.BINDING.ARRAY","rom","addrLines","log2","ceil","floor","ledArray","configLEDs","clearArray","ledInput","configInput","sCellDesc","onROMHover","chip","sDesc","addr","disassemble","opCode","ARRAY","CELLDESC","Time","Time.VERSION","nCyclesMinimum","nCyclesMaximum","nCyclesPerSecond","nYieldsPerSecond","Time.YIELDS_PER_SECOND","nYieldsPerUpdate","Time.YIELDS_PER_UPDATE","fRequestAnimationFrame","nBaseMultiplier","nCurrentMultiplier","nTargetMultiplier","mhzBase","mhzCurrent","mhzTarget","nYields","msYield","aAnimators","aClockers","aUpdaters","fYield","fThrottling","idRunTimeout","nStepping","onRunTimeout","run","bind","onAnimationFrame","animate","requestAnimationFrame","webkitRequestAnimationFrame","setTimeout","onYield","getCycles","updateStatus","resetSpeed","nCyclesRun","nCyclesBurst","nCyclesRemain","setSpeedThrottle","setSpeed","callBack","Time.BINDING.RUN","stop","start","Time.BINDING.STEP","step","nRepeat","Time.BINDING.THROTTLE","onThrottleStart","onThrottleStop","onThrottleChange","msAuto","calcCycles","nMultiplier","nCyclesPerYield","doBurst","nCycles","fStep","iClocker","endBurst","nCyclesThisRun","ms","getSpeed","mhz","toFixed","hz","snapStart","msOutsideThisRun","msStartThisRun","Date","now","msStartRun","msEndRun","msDelta","getCyclesPerBurst","updateTimers","snapStop","msRemainsThisRun","msElapsed","TIME","elementInput","Time.BINDING.SPEED","getSpeedTarget","resetTimers","clearTimeout","onStepTimeout","fTransition","getSpeedCurrent","RUN","SPEED","STEP","THROTTLE","Chip","Chip.VERSION","fToggle","fWrap","sRule","sPattern","countBuffer","getCounts","leds","Machine.CLASS.LED","loadPattern","onLEDInput","colorSelected","ON","fAdvance","colors","updateColorSelection","updateColorSwatches","updateBackgroundImage","Chip.BINDING.IMAGE_SELECTION","Machine.CLASS.INPUT","clocker","sCommandPrev","onCommand","Chip.prototype","?.prototype","Chip.BINDING.COLOR_PALETTE","Chip.BINDING.COLOR_SELECTION","onchange","element.onchange","updateColorPalette","Chip.BINDING.PATTERN_SELECTION","buildPatternOptions","Chip.BINDING.SAVE_TO_URL","savePattern","href","startsWith","Chip.BINDING.COLOR_SWATCH","patterns","lines","nCyclesTarget","nCyclesClocked","cAlive","countCells","fSuccess","stateNew","iColor","countNeighbors","nIncPerRow","nIncPerGrid","iCell","iNO","iNW","iNE","iWE","iEA","iSO","iSW","iSE","nNeighbors","nAlive","getCount","count","init","Chip.BINDING.COUNT_INIT","range","Chip.BINDING.COUNT_ON","Chip.BINDING.COUNT_OFF","Chip.COUNTS.length","Chip.COUNTS","iCol","iRow","sLine","end","rule","aTokens","fCounts","fColors","token","v","nAdvance","sResult","aCommands","Chip.COMMANDS.forEach","forEach","cmd","Chip_prototype$onPower","fOn","Chip_prototype$onReset","onRestore","loadLocalStorage","sValue","JSON","parse","stateChip","loadState","stateLEDs","onSave","saveState","saveLocalStorage","stringify","flushRun","fEndRow","fDelta","nPrev","rgbPrev","countsPrev","statePrev","rgbLast","countsLast","sImage","elementPalette","elementSelection","fPaletteChange","colorPalette","sColorOverride","toLowerCase","elementSwatch","Chip.BINDING.COLOR_SWATCH_SELECTED","idColor","idSwatch","display","Chip_prototype$updateStatus","COLOR_PALETTE","COLOR_SELECTION","COLOR_SWATCH","COLOR_SWATCH_SELECTED","COUNT_INIT","COUNT_ON","COUNT_OFF","IMAGE_SELECTION","PATTERN_SELECTION","SAVE_TO_URL","COUNT_CYCLE","Chip.COMMANDS","Machine","sConfig","Machine.VERSION","fAutoPower","onLoad","sClass","iClass","Machine.CLASSORDER.length","sStatus","Machine.CLASSORDER","Machine.CLASS.CHIP","Machine.CLASS.ROM","Machine.CLASS.MACHINE","Machine.COPYRIGHT","Machine.LICENSE","splice","sEvent","onUnload","CHIP","INPUT"],"sourcesContent":["\"use strict\";\n\n/**\n * @copyright http://pcjs.org/modules/devices/device.js (C) Jeff Parsons 2012-2017\n */\n\n/**\n * @define {boolean}\n */\nvar COMPILED = false;\n\n/**\n * @define {boolean}\n */\nvar DEBUG = false;  // (window.location.hostname == \"pcjs\" || window.location.hostname == \"jeffpar.local\");\n\n/**\n * @type {string}\n */\nvar MACHINE = \"Machine\";\n\n/** @typedef {{ class: (string|undefined), bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined) }} */\nvar Config;\n\n/**\n * @class {Device}\n * @unrestricted\n * @property {string} idMachine\n * @property {string} idDevice\n * @property {Config} config\n * @property {Object} bindings [added by addBindings()]\n */\nclass Device {\n    /**\n     * Device()\n     *\n     * Supported config properties:\n     *\n     *      \"bindings\": object containing name/value pairs, where name is the generic name\n     *      of a element, and value is the ID of the DOM element that should be mapped to it\n     *\n     * The properties in the \"bindings\" object are copied to our own bindings object in addBindings(),\n     * but only for DOM elements that actually exist, and it is the elements themselves (rather than\n     * their IDs) that we store.\n     *\n     * Also, URL parameters can be used to override config properties.  For example, the URL:\n     *\n     *      http://pcjs:8088/devices/ti57/machine/?cyclesPerSecond=100000\n     *\n     * will set the Time device's cyclesPerSecond config property to 100000.  In general, the values\n     * will be treated as strings, unless they contain all digits (number), or equal \"true\" or \"false\"\n     * (boolean).\n     *\n     * @this {Device}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {number} [version]\n     * @param {Config} [config]\n     */\n    constructor(idMachine, idDevice, version, config)\n    {\n        this.config = config || {};\n        this.idMachine = idMachine;\n        this.idDevice = idDevice;\n        this.version = version || 0;\n        this.bindings = {};\n        this.addDevice();\n        this.checkVersion(this.config);\n        this.checkOverrides(this.config);\n        this.addBindings(this.config['bindings']);\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Device}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let device = this;\n\n        switch (binding) {\n\n        case Device.BINDING.CLEAR:\n            element.onclick = function onClickClear() {\n                device.clear();\n            };\n            break;\n\n        case Device.BINDING.PRINT:\n            let elementTextArea = /** @type {HTMLTextAreaElement} */ (element);\n            /*\n             * This was added for Firefox (Safari will clear the <textarea> on a page reload, but Firefox does not).\n             */\n            elementTextArea.value = \"\";\n            /*\n             * An onKeyPress handler has been added to this element simply to stop event propagation, so that if the\n             * element has been explicitly given focus, any key presses won't be picked up by the Input device (which,\n             * as that device's constructor explains, is monitoring key presses for the entire document).\n             */\n            elementTextArea.addEventListener(\n                'keypress',\n                function onKeyPress(event) {\n                    event = event || window.event;\n                    let keyCode = event.which || event.keyCode;\n                    if (keyCode) {\n                        /*\n                         * Move the caret to the end of any text in the textarea.\n                         */\n                        let sText = elementTextArea.value;\n                        elementTextArea.setSelectionRange(sText.length, sText.length);\n\n                        /*\n                         * Don't let the Input device's document-based keypress handler see any key presses\n                         * that came to this element first.\n                         */\n                        event.stopPropagation();\n\n                        /*\n                         * On the ENTER key, look for any COMMAND handlers and invoke them until one of them\n                         * returns true.\n                         */\n                        if (keyCode == 13) {\n                            let afn = device.findHandlers(Device.HANDLER.COMMAND);\n                            if (afn) {\n                                /*\n                                 * At the time we call any command handlers, a linefeed will not yet have been\n                                 * appended to the text, so for consistency, we prevent the default behavior and\n                                 * add the linefeed ourselves.  Unfortunately, one side-effect is that we must\n                                 * go to some extra effort to ensure the cursor remains in view; hence the stupid\n                                 * blur() and focus() calls.\n                                 */\n                                event.preventDefault();\n                                sText = (elementTextArea.value += '\\n');\n                                elementTextArea.blur();\n                                elementTextArea.focus();\n\n                                let i = sText.lastIndexOf('\\n', sText.length - 2);\n                                let sCommand = sText.slice(i + 1, -1);\n                                for (let i = 0; i < afn.length; i++) {\n                                    if (afn[i](sCommand)) break;\n                                }\n                            }\n                        }\n                    }\n                }\n            );\n            break;\n        }\n    }\n\n    /**\n     * addBindings(bindings)\n     *\n     * Builds the set of ACTUAL bindings (this.bindings) from the set of DESIRED bindings (this.config['bindings']),\n     * using either a \"bindings\" object map OR an array of \"direct bindings\".\n     *\n     * @this {Device}\n     * @param {Object} bindings\n     */\n    addBindings(bindings)\n    {\n        let fDirectBindings = Array.isArray(bindings);\n        for (let binding in bindings) {\n            let id = bindings[binding];\n            if (fDirectBindings) binding = id;\n            let element = document.getElementById(id);\n            if (element) {\n                this.bindings[binding] = element;\n                this.addBinding(binding, element);\n            } else {\n                if (!fDirectBindings) this.println(\"unable to find device ID: \" + id);\n            }\n        }\n    }\n\n    /**\n     * addBindingOptions(element, options, fReset, sDefault)\n     *\n     * @this {Device}\n     * @param {Element|HTMLSelectElement} element\n     * @param {Object} options (eg, key/value pairs for a series of \"option\" elements)\n     * @param {boolean} [fReset]\n     * @param {string} [sDefault]\n     */\n    addBindingOptions(element, options, fReset, sDefault)\n    {\n        if (fReset) {\n            element.options.length = 0;\n        }\n        if (options) {\n            for (let prop in options) {\n                let option = document.createElement(\"option\");\n                option.text = prop;\n                option.value = (typeof options[prop] == \"string\"? options[prop] : prop);\n                element.appendChild(option);\n                if (option.value == sDefault) element.selectedIndex = element.options.length - 1;\n            }\n        }\n    }\n\n    /**\n     * addDevice()\n     *\n     * Adds this Device to the global set of Devices, so that findDevice(), findBinding(), etc, will work.\n     *\n     * @this {Device}\n     */\n    addDevice()\n    {\n        if (!Device.Machines[this.idMachine]) Device.Machines[this.idMachine] = [];\n        Device.Machines[this.idMachine].push(this);\n    }\n\n    /**\n     * addHandler(sType, fn)\n     *\n     * @this {Device}\n     * @param {string} sType\n     * @param {function(string)} fn\n     */\n    addHandler(sType, fn)\n    {\n        if (!Device.Handlers[this.idMachine]) Device.Handlers[this.idMachine] = {};\n        if (!Device.Handlers[this.idMachine][sType]) Device.Handlers[this.idMachine][sType] = [];\n        Device.Handlers[this.idMachine][sType].push(fn);\n    }\n\n    /**\n     * alert(s, type)\n     *\n     * @this {Device}\n     * @param {string} s\n     * @param {string} [type]\n     */\n    alert(s, type)\n    {\n        if (type && Device.Alerts.list.indexOf(type) < 0) {\n            alert(s);\n            Device.Alerts.list.push(type);\n        }\n        this.println(s);\n    }\n\n    /**\n     * assert(f, s)\n     *\n     * Verifies conditions that must be true (for DEBUG builds only).\n     *\n     * The Closure Compiler should automatically remove all references to assert() in non-DEBUG builds.\n     * TODO: Add a task to the build process that \"asserts\" there are no instances of \"assertion failure\" in RELEASE builds.\n     *\n     * @this {Device}\n     * @param {*} f is the expression asserted to be true\n     * @param {string} [s] is description of the assertion on failure\n     */\n    assert(f, s)\n    {\n        if (DEBUG) {\n            if (!f) {\n                throw new Error(s || \"assertion failure\");\n            }\n        }\n    }\n\n    /**\n     * checkOverrides(config)\n     *\n     * @this {Device}\n     * @param {Config} config\n     */\n    checkOverrides(config)\n    {\n        /*\n         * If this device's config contains an \"overrides\" array, then any of the properties listed in\n         * that array may be overridden with a URL parameter.  We don't impose any checks on the overriding\n         * value, so it is the responsibility of the component with overridable properties to validate them.\n         */\n        if (config['overrides']) {\n            let parms = Device.getURLParms();\n            for (let prop in parms) {\n                if (config['overrides'].indexOf(prop) >= 0) {\n                    let value;\n                    let s = parms[prop];\n                    /*\n                     * You might think we could simply call parseInt() and check isNaN(), but parseInt() has\n                     * some annoying quirks, like stopping at the first non-numeric character.  If the ENTIRE\n                     * string isn't a number, then we don't want to treat ANY part of it as a number.\n                     */\n                    if (s.match(/^[+-]?[0-9.]+$/)) {\n                        value = Number.parseInt(s, 10);\n                    } else if (s == \"true\") {\n                        value = true;\n                    } else if (s == \"false\") {\n                        value = false;\n                    } else {\n                        value = s;\n                        s = '\"' + s + '\"';\n                    }\n                    config[prop] = value;\n                    this.println(\"overriding \" + this.idDevice + \" property '\" + prop + \"' with \" + s);\n                }\n            }\n        }\n    }\n\n    /**\n     * checkVersion(config)\n     *\n     * Verify that device's version matches the machine's version, and also that the config version stored in\n     * the JSON (if any) matches the device's version.\n     *\n     * This is normally performed by the constructor, but the Machine device cannot be fully initialized in the\n     * constructor, so it calls this separately.\n     *\n     * @this {Device}\n     * @param {Config} config\n     */\n    checkVersion(config)\n    {\n        if (this.version) {\n            let sVersion = \"\", version;\n            let machine = this.findDevice(this.idMachine);\n            if (machine.version != this.version) {\n                sVersion = \"Machine\";\n                version = machine.version;\n            }\n            else if (config.version && config.version != this.version) {\n                sVersion = \"Config\";\n                version = config.version;\n            }\n            if (sVersion) {\n                let sError = this.sprintf(\"%s Device version (%3.2f) does not match %s version (%3.2f)\", config.class, this.version, sVersion, version);\n                this.alert(\"Error: \" + sError + '\\n\\n' + \"Clearing your browser's cache may resolve the issue.\", Device.Alerts.Version);\n            }\n        }\n    }\n\n    /**\n     * clear()\n     *\n     * @this {Device}\n     */\n    clear()\n    {\n        let element = this.findBinding(Device.BINDING.PRINT, true);\n        if (element) element.value = \"\";\n    }\n\n    /**\n     * findBinding(name, fAll)\n     *\n     * This will search the current device's bindings, and optionally all the device bindings within the\n     * machine.  If the binding is found in another device, that binding is recorded in this device as well.\n     *\n     * @this {Device}\n     * @param {string} name\n     * @param {boolean} [fAll]\n     * @returns {Element|null|undefined}\n     */\n    findBinding(name, fAll = false)\n    {\n        let element = this.bindings[name];\n        if (element === undefined && fAll) {\n            let devices = Device.Machines[this.idMachine];\n            for (let i in devices) {\n                element = devices[i].bindings[name];\n                if (element) break;\n            }\n            if (!element) element = null;\n            this.bindings[name] = element;\n        }\n        return element;\n    }\n\n    /**\n     * findDevice(idDevice)\n     *\n     * @this {Device}\n     * @param {string} idDevice\n     * @returns {Device|undefined}\n     */\n    findDevice(idDevice)\n    {\n        let device;\n        let devices = Device.Machines[this.idMachine];\n        if (devices) {\n            for (let i in devices) {\n                if (devices[i].idDevice == idDevice) {\n                    device = devices[i];\n                    break;\n                }\n            }\n        }\n        return device;\n    }\n\n    /**\n     * findDeviceByClass(idClass)\n     *\n     * @this {Device}\n     * @param {string} idClass\n     * @returns {Device|undefined}\n     */\n    findDeviceByClass(idClass)\n    {\n        let device;\n        let devices = Device.Machines[this.idMachine];\n        if (devices) {\n            for (let i in devices) {\n                if (devices[i].config['class'] == idClass) {\n                    device = devices[i];\n                    break;\n                }\n            }\n        }\n        return device;\n    }\n\n    /**\n     * findHandlers(sType)\n     *\n     * @this {Device}\n     * @param {string} sType\n     * @returns {Array.<function(string)>|undefined}\n     */\n    findHandlers(sType)\n    {\n        return Device.Handlers[this.idMachine] && Device.Handlers[this.idMachine][sType];\n    }\n\n    /**\n     * getBindingID(name)\n     * \n     * Since this.bindings contains the actual elements, not their original IDs, we must delve back into\n     * the original this.config['bindings'] to determine the original ID.\n     * \n     * @this {Device}\n     * @param {string} name \n     * @returns {string|undefined}\n     */\n    getBindingID(name)\n    {\n        return this.config['bindings'] && this.config['bindings'][name];\n    }\n    \n    /**\n     * getBindingText(name)\n     *\n     * @this {Device}\n     * @param {string} name\n     * @return {string|undefined}\n     */\n    getBindingText(name)\n    {\n        let sText;\n        let element = this.bindings[name];\n        if (element) sText = element.textContent;\n        return sText;\n    }\n\n    /**\n     * getBounded(n, min, max)\n     *\n     * Restricts n to the bounds defined by min and max.  A side-effect is ensuring that the return\n     * value is ALWAYS a number, even n is not.\n     *\n     * @this {Device}\n     * @param {number} n\n     * @param {number} min\n     * @param {number} max\n     * @returns {number} (updated n)\n     */\n    getBounded(n, min, max)\n    {\n\n        n = +n || 0;\n        if (n < min) n = min;\n        if (n > max) n = max;\n        return n;\n    }\n\n    /**\n     * getDefault(value, defaultValue)\n     *\n     * @this {Device}\n     * @param {*} value\n     * @param {*} defaultValue\n     * @returns {*}\n     */\n    getDefault(value, defaultValue)\n    {\n        return (value !== undefined)? value : defaultValue;\n    }\n\n    /**\n     * hasLocalStorage\n     *\n     * If localStorage support exists, is enabled, and works, return true.\n     *\n     * @this {Device}\n     * @returns {boolean}\n     */\n    hasLocalStorage()\n    {\n        if (Device.LocalStorage.Available === undefined) {\n            let f = false;\n            if (window) {\n                try {\n                    window.localStorage.setItem(Device.LocalStorage.Test, Device.LocalStorage.Test);\n                    f = (window.localStorage.getItem(Device.LocalStorage.Test) == Device.LocalStorage.Test);\n                    window.localStorage.removeItem(Device.LocalStorage.Test);\n                } catch(err) {\n                    this.println(err.message);\n                    f = false;\n                }\n            }\n            Device.LocalStorage.Available = f;\n        }\n        return !!Device.LocalStorage.Available;\n    }\n\n    /**\n     * hex(n)\n     *\n     * This is a helper function intended for use in a debugging console, allowing you to display\n     * numbers as hex by evaluating the expression \"this.hex(n)\".  Technically, this should be a static\n     * method, since there's nothing instance-specific about it, but \"this.hex()\" is easier to type than\n     * \"Device.hex()\".\n     *\n     * @this {Device}\n     * @param {number} n\n     */\n    hex(n)\n    {\n        return this.sprintf(\"%x\", n);\n    }\n\n    /**\n     * isCategory(category)\n     *\n     * Use this function to enable/disable any code (eg, print() calls) based on 1) whether specific\n     * categories are required, and 2) whether the specified category is one of them.\n     *\n     * @this {Device}\n     * @param {string} category\n     */\n    isCategoryOn(category)\n    {\n        return (Device.Category && Device.Category.indexOf(category) >= 0);\n    }\n\n    /**\n     * isUserAgent(s)\n     *\n     * Check the browser's user-agent string for the given substring; \"iOS\" and \"MSIE\" are special values you can\n     * use that will match any iOS or MSIE browser, respectively (even IE11, in the case of \"MSIE\").\n     *\n     * 2013-11-06: In a questionable move, MSFT changed the user-agent reported by IE11 on Windows 8.1, eliminating\n     * the \"MSIE\" string (which MSDN calls a \"version token\"; see http://msdn.microsoft.com/library/ms537503.aspx);\n     * they say \"public websites should rely on feature detection, rather than browser detection, in order to design\n     * their sites for browsers that don't support the features used by the website.\" So, in IE11, we get a user-agent\n     * that tries to fool apps into thinking the browser is more like WebKit or Gecko:\n     *\n     *      Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\n     *\n     * @this {Device}\n     * @param {string} s is a substring to search for in the user-agent; as noted above, \"iOS\" and \"MSIE\" are special values\n     * @returns {boolean} is true if the string was found, false if not\n     */\n    isUserAgent(s)\n    {\n        if (window) {\n            let userAgent = window.navigator.userAgent;\n            return s == \"iOS\" && !!userAgent.match(/(iPod|iPhone|iPad)/) && !!userAgent.match(/AppleWebKit/) || s == \"MSIE\" && !!userAgent.match(/(MSIE|Trident)/) || (userAgent.indexOf(s) >= 0);\n        }\n        return false;\n    }\n\n    /**\n     * loadLocalStorage()\n     *\n     * @this {Device}\n     * @returns {Array|null}\n     */\n    loadLocalStorage()\n    {\n        let state = null;\n        if (this.hasLocalStorage()) {\n            let sValue;\n            if (window) {\n                try {\n                    sValue = window.localStorage.getItem(this.idMachine);\n                    if (sValue) state = /** @type {Array} */ (JSON.parse(sValue));\n                } catch (err) {\n                    this.println(err.message);\n                }\n            }\n        }\n        return state;\n    }\n\n    /**\n     * print(s)\n     *\n     * @this {Device}\n     * @param {string} s\n     */\n    print(s)\n    {\n        if (this.isCategoryOn(Device.CATEGORY.BUFFER)) {\n            Device.PrintBuffer += s;\n            return;\n        }\n        let element = this.findBinding(Device.BINDING.PRINT, true);\n        if (element) {\n            element.value += s;\n            /*\n             * Prevent the <textarea> from getting too large; otherwise, printing becomes slower and slower.\n             */\n            if (!DEBUG && element.value.length > 8192) {\n                element.value = element.value.substr(element.value.length - 4096);\n            }\n            element.scrollTop = element.scrollHeight;\n        }\n        if (DEBUG || !element) {\n            let i = s.lastIndexOf('\\n');\n            if (i >= 0) {\n                console.log(Device.PrintBuffer + s.substr(0, i));\n                Device.PrintBuffer = \"\";\n                s = s.substr(i + 1);\n            }\n            Device.PrintBuffer += s;\n        }\n    }\n\n    /**\n     * println(s)\n     *\n     * @this {Device}\n     * @param {string} s\n     */\n    println(s)\n    {\n        this.print(s + '\\n');\n    }\n\n    /**\n     * printf(format, ...args)\n     *\n     * @this {Device}\n     * @param {string} format\n     * @param {...} args\n     */\n    printf(format, ...args)\n    {\n        this.print(this.sprintf(format, ...args));\n    }\n\n    /**\n     * removeDevice(idDevice)\n     *\n     * @this {Device}\n     * @param {string} idDevice\n     * @returns {boolean} (true if successfully removed, false if not)\n     */\n    removeDevice(idDevice)\n    {\n        let device;\n        let devices = Device.Machines[this.idMachine];\n        if (devices) {\n            for (let i in devices) {\n                if (devices[i].idDevice == idDevice) {\n                    devices.splice(i, 1);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * saveLocalStorage(state)\n     *\n     * @this {Device}\n     * @param {Array} state\n     * @returns {boolean} true if successful, false if error\n     */\n    saveLocalStorage(state)\n    {\n        if (this.hasLocalStorage()) {\n            let sValue = JSON.stringify(state);\n            try {\n                window.localStorage.setItem(this.idMachine, sValue);\n                return true;\n            } catch(err) {\n                this.println(err.message);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * setBindingText(name, text)\n     *\n     * @this {Device}\n     * @param {string} name\n     * @param {string} text\n     */\n    setBindingText(name, text)\n    {\n        let element = this.bindings[name];\n        if (element) element.textContent = text;\n    }\n\n    /**\n     * setCategory(category)\n     *\n     * Use this function to set/clear categories.  Generally, these are thought of as print categories,\n     * allowing code to use isCategoryOn() to decide whether to print a certain category of messages, but\n     * it can be used to control any functionality related to a given category, not just printing.\n     *\n     * You usually want to use one of the predefined category strings in Device.CATEGORIES, but in reality,\n     * the category string can be anything you want.\n     *\n     * If you want to enable multiple categories, specify them all in a single string (eg, \"time|buffer\",\n     * or Device.CATEGORY.TIME + Device.CATEGORY.BUFFER).\n     *\n     * Device.CATEGORY.BUFFER is special, causing all print calls to be buffered; the print buffer will be\n     * dumped as soon as setCategory() clears Device.CATEGORY.BUFFER.\n     *\n     * @this {Device}\n     * @param {string} [category] (if undefined, clear previous category)\n     * @returns {string}\n     */\n    setCategory(category = \"\")\n    {\n        let cPrev = Device.Category;\n        let fFlush = (!category && this.isCategoryOn(Device.CATEGORY.BUFFER));\n        Device.Category = category;\n        if (fFlush) {\n            let sBuffer = Device.PrintBuffer;\n            Device.PrintBuffer = \"\";\n            this.print(sBuffer);\n        }\n        return cPrev;\n    }\n\n    /**\n     * sprintf(format, ...args)\n     *\n     * Copied from the CCjs project (https://github.com/jeffpar/ccjs/blob/master/lib/stdio.js) and extended.\n     *\n     * Far from complete, let alone sprintf-compatible, but it's adequate for the handful of sprintf-style format\n     * specifiers that I use.\n     *\n     * @this {Device}\n     * @param {string} format\n     * @param {...} args\n     * @returns {string}\n     */\n    sprintf(format, ...args)\n    {\n        let buffer = \"\";\n        let aParts = format.split(/%([-+ 0#]?)([0-9]*)(\\.?)([0-9]*)([hlL]?)([A-Za-z%])/);\n\n        let iArg = 0, iPart;\n        for (iPart = 0; iPart < aParts.length - 7; iPart += 7) {\n\n            buffer += aParts[iPart];\n\n            let arg = args[iArg++];\n            let flags = aParts[iPart+1];\n            let minimum = +aParts[iPart+2] || 0;\n            let precision = +aParts[iPart+4] || 0;\n            let conversion = aParts[iPart+6];\n            let ach = null, s;\n\n            switch(conversion) {\n            case 'd':\n                /*\n                 * We could use \"arg |= 0\", but there may be some value to supporting integers > 32 bits.\n                 */\n                arg = Math.trunc(arg);\n                /* falls through */\n\n            case 'f':\n                s = Math.trunc(arg) + \"\";\n                if (precision) {\n                    minimum -= (precision + 1);\n                }\n                if (s.length < minimum) {\n                    if (flags == '0') {\n                        if (arg < 0) minimum--;\n                        s = (\"0000000000\" + Math.abs(arg)).slice(-minimum);\n                        if (arg < 0) s = '-' + s;\n                    } else {\n                        s = (\"          \" + s).slice(-minimum);\n                    }\n                }\n                if (precision) {\n                    arg = Math.trunc((arg - Math.trunc(arg)) * Math.pow(10, precision));\n                    s += '.' + (\"0000000000\" + Math.abs(arg)).slice(-precision);\n                }\n                buffer += s;\n                break;\n\n            case 's':\n                while (arg.length < minimum) {\n                    if (flags == '-') {\n                        arg += ' ';\n                    } else {\n                        arg = ' ' + arg;\n                    }\n                }\n                buffer += arg;\n                break;\n\n            case 'X':\n                ach = Device.HexUpperCase;\n                /* falls through */\n\n            case 'x':\n                if (!ach) ach = Device.HexLowerCase;\n                s = \"\";\n                do {\n                    s = ach[arg & 0xf] + s;\n                    arg >>>= 4;\n                } while (--minimum > 0 || arg);\n                buffer += s;\n                break;\n\n            default:\n                /*\n                 * The supported ANSI C set of conversions: \"dioxXucsfeEgGpn%\"\n                 */\n                buffer += \"(unrecognized printf conversion %\" + conversion + \")\";\n                break;\n            }\n        }\n\n        buffer += aParts[iPart];\n        return buffer;\n    }\n\n    /**\n     * getURLParms(sParms)\n     *\n     * @param {string} [sParms] containing the parameter portion of a URL (ie, after the '?')\n     * @returns {Object} containing properties for each parameter found\n     */\n    static getURLParms(sParms)\n    {\n        let parms = Device.URLParms;\n        if (!parms) {\n            parms = {};\n            if (window) {\n                if (!sParms) {\n                    /*\n                     * Note that window.location.href returns the entire URL, whereas window.location.search\n                     * returns only the parameters, if any (starting with the '?', which we skip over with a substr() call).\n                     */\n                    sParms = window.location.search.substr(1);\n                }\n                let match;\n                let pl = /\\+/g; // RegExp for replacing addition symbol with a space\n                let search = /([^&=]+)=?([^&]*)/g;\n                let decode = function decodeParameter(s) {\n                    return decodeURIComponent(s.replace(pl, \" \")).trim();\n                };\n\n                while ((match = search.exec(sParms))) {\n                    parms[decode(match[1])] = decode(match[2]);\n                }\n            }\n            Device.URLParms = parms;\n        }\n        return parms;\n    }\n}\n\nDevice.BINDING = {\n    CLEAR:      \"clear\",\n    PRINT:      \"print\"\n};\n\n/*\n * List of standard categories.\n *\n * Device.CATEGORY.BUFFER is special, causing all print calls to be buffered; the print buffer will be\n * dumped as soon as setCategory() clears Device.CATEGORY.BUFFER.\n */\nDevice.CATEGORY = {\n    TIME:       \"time\",\n    BUFFER:     \"buffer\"\n};\n\nDevice.HANDLER = {\n    COMMAND:    \"command\"\n};\n\nDevice.Alerts = {\n    list:       [],\n    Version:    \"version\"\n};\n\nDevice.LocalStorage = {\n    Available:  undefined,\n    Test:       \"PCjs.localStorage\"\n};\n\n/**\n * Handlers is a global object whose properties are machine IDs, each of which contains zero or more\n * handler IDs, each of which contains an arrays of functions.\n *\n * @type {Object}\n */\nDevice.Handlers = {};\n\n/**\n * Machines is a global object whose properties are machine IDs and whose values are arrays of Devices.\n *\n * @type {Object}\n */\nDevice.Machines = {};\n\n/**\n * Category is a global string that contains zero or more Device.CATEGORY strings; see setCategory().\n *\n * @type {string}\n */\nDevice.Category = \"\";\n\n/**\n * PrintBuffer is a global string that buffers partial lines for our print services when using console.log().\n *\n * @type {string}\n */\nDevice.PrintBuffer = \"\";\n\n/*\n * Handy global constants\n */\nDevice.HexLowerCase = \"0123456789abcdef\";\nDevice.HexUpperCase = \"0123456789ABCDEF\";\n\n/**\n * @copyright http://pcjs.org/modules/devices/input.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), location: Array.<number>, map: (Array.<Array.<number>>|undefined), drag: (boolean|undefined), hexagonal: (boolean|undefined) }} */\nvar InputConfig;\n\n/**\n * @class {Input}\n * @unrestricted\n * @property {InputConfig} config\n * @property {Array.<number>} location\n * @property {Array.<Array.<number>>} map\n * @property {boolean} fDrag\n * @property {boolean} fHexagonal\n * @property {{\n *  surface: HTMLImageElement|undefined\n * }} bindings\n */\nclass Input extends Device {\n    /**\n     * Input(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"input\": {\n     *        \"class\": \"Input\",\n     *        \"location\": [139, 325, 368, 478, 0.34, 0.5, 640, 853],\n     *        \"map\": [\n     *          [\"2nd\",  \"inv\",  \"lnx\",  \"\\\\b\",  \"clr\"],\n     *          [\"lrn\",  \"xchg\", \"sq\",   \"sqrt\", \"rcp\"],\n     *          [\"sst\",  \"sto\",  \"rcl\",  \"sum\",  \"exp\"],\n     *          [\"bst\",  \"ee\",   \"(\",    \")\",    \"/\"],\n     *          [\"gto\",  \"7\",    \"8\",    \"9\",    \"*\"],\n     *          [\"sbr\",  \"4\",    \"5\",    \"6\",    \"-\"],\n     *          [\"rst\",  \"1\",    \"2\",    \"3\",    \"+\"],\n     *          [\"r/s\",  \"0\",    \".\",    \"+/-\",  \"=|\\\\r\"]\n     *        ],\n     *        \"drag\": false,\n     *        \"bindings\": {\n     *          \"surface\": \"imageTI57\",\n     *          \"power\": \"powerTI57\",\n     *          \"reset\": \"resetTI57\"\n     *        }\n     *      }\n     *\n     * A word about the \"power\" button: the page will likely use absolute positioning to overlay the HTML button\n     * onto the image of the physical button, and the temptation might be to use the style \"display:none\" to hide\n     * it, but \"opacity:0\" should be used instead, because otherwise our efforts to use it as focusable element\n     * may fail.\n     *\n     * @this {Input}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {InputConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, Input.VERSION, config);\n\n        this.time = /** @type {Time} */ (this.findDeviceByClass(Machine.CLASS.TIME));\n\n        this.onInput = null;\n        this.onPower = null;\n        this.onReset = null;\n        this.onHover = null;\n\n        let element = this.bindings[Input.BINDING.SURFACE];\n        if (element) {\n            /*\n             * The location array, eg:\n             *\n             *      \"location\": [139, 325, 368, 478, 0.34, 0.5, 640, 853, 180, 418, 75, 36],\n             *\n             * contains the top left corner (xInput, yInput) and dimensions (cxInput, cyInput)\n             * of the input rectangle where the buttons described in the map are located, relative\n             * to the surface image.  It also describes the average amount of horizontal and vertical\n             * space between buttons, as fractions of the average button width and height (hGap, vGap).\n             *\n             * With all that, we can now calculate the center lines for each column and row.  This\n             * obviously assumes that all the buttons are evenly laid out in a perfect grid.  For\n             * devices that don't have such a nice layout, a different location array format will\n             * have to be defined.\n             *\n             * NOTE: While element.naturalWidth and element.naturalHeight should, for all modern\n             * browsers, contain the surface image's dimensions as well, those values still might not\n             * be available if our constructor is called before the page's onload event has fired,\n             * so we allow them to be stored in the next two elements of the location array, too.\n             *\n             * Finally, the position and size of the device's power button may be stored in the array\n             * as well, in case some browsers refuse to generate onClickPower() events (eg, if they\n             * think the button is inaccessible/not visible).\n             */\n            let location = this.config['location'];\n            this.xInput = location[0];\n            this.yInput = location[1];\n            this.cxInput = location[2];\n            this.cyInput = location[3];\n            this.hGap = location[4] || 1.0;\n            this.vGap = location[5] || 1.0;\n            this.cxSurface = location[6] || element.naturalWidth || this.cxInput;\n            this.cySurface = location[7] || element.naturalHeight || this.cyInput;\n            this.xPower = location[8] || 0;\n            this.yPower = location[9] || 0;\n            this.cxPower = location[10] || 0;\n            this.cyPower = location[11] || 0;\n            this.map = this.config['map'];\n            if (this.map) {\n                this.nRows = this.map.length;\n                this.nCols = this.map[0].length;\n            } else {\n                this.nCols = this.hGap;\n                this.nRows = this.vGap;\n                this.hGap = this.vGap = 0;\n            }\n            /*\n             * If 'drag' is true, then the onInput() handler will be called whenever the current col and/or row\n             * changes, even if the mouse hasn't been released since the previous onInput() call.\n             *\n             * The default is false, because in general, allowing drag is a bad idea for calculator buttons.  But\n             * I've made this an option for other input surfaces, like LED arrays, where you might want to turn a\n             * series of LEDs on or off.\n             */\n            this.fDrag = !!this.config['drag'];\n            this.fHexagonal = !!this.config['hexagonal'];\n\n            /*\n             * To calculate the average button width (cxButton), we know that the overall width\n             * must equal the sum of all the button widths + the sum of all the button gaps:\n             *\n             *      cxInput = nCols * cxButton + nCols * (cxButton * hGap)\n             *\n             * The number of gaps would normally be (nCols - 1), but we require that cxInput include\n             * only 1/2 the gap at the edges, too.  Solving for cxButton:\n             *\n             *      cxButton = cxInput / (nCols + nCols * hGap)\n             */\n            this.cxButton = (this.cxInput / (this.nCols + this.nCols * this.hGap))|0;\n            this.cyButton = (this.cyInput / (this.nRows + this.nRows * this.vGap))|0;\n            this.cxGap = (this.cxButton * this.hGap)|0;\n            this.cyGap = (this.cyButton * this.vGap)|0;\n\n            /*\n             * xStart and yStart record the last 'touchstart' or 'mousedown' position on the surface\n             * image; they will be reset to -1 when movement has ended (eg, 'touchend' or 'mouseup').\n             */\n            this.xStart = this.yStart = -1;\n\n            this.captureMouse(element);\n            this.captureTouch(element);\n\n            if (this.time) {\n                /*\n                 * We use a timer for the touch/mouse release events, to ensure that the machine had\n                 * enough time to notice the input before releasing it.\n                 */\n                let input = this;\n                this.timerInputRelease = this.time.addTimer(\"timerInputRelease\", function onInputRelease() {\n                    if (input.xStart < 0 && input.yStart < 0) { // auto-release ONLY if it's REALLY released\n                        input.setPosition(-1, -1);\n                    }\n                });\n                if (this.map) {\n                    /*\n                     * This auto-releases the last key reported after an appropriate delay, to ensure that\n                     * the machine had enough time to notice the corresponding button was pressed.\n                     */\n                    this.timerKeyRelease = this.time.addTimer(\"timerKeyRelease\", function onKeyRelease() {\n                        input.onKeyTimer();\n                    });\n                    /*\n                     * I used to maintain a single-key buffer (this.keyPressed) and would immediately release\n                     * that key as soon as another key was pressed, but it appears that the ROM wants a minimum\n                     * delay between release and the next press -- probably for de-bouncing purposes.  So we\n                     * maintain a key state: 0 means no key has gone down or up recently, 1 means a key just went\n                     * down, and 2 means a key just went up.  keysPressed maintains a queue of keys (up to 16)\n                     * received while key state is non-zero.\n                     */\n                    this.keyState = 0;\n                    this.keysPressed = [];\n                    /*\n                     * I'm attaching my 'keypress' handlers to the document object, since image elements are\n                     * not focusable.  I'm disinclined to do what I've done with other machines (ie, create an\n                     * invisible <textarea> overlay), because in this case, I don't really want a soft keyboard\n                     * popping up and obscuring part of the display.\n                     *\n                     * A side-effect, however, is that if the user attempts to explicitly give the image\n                     * focus, we don't have anything for focus to attach to.  We address that in onMouseDown(),\n                     * by redirecting focus to the \"power\" button, if any, not because we want that or any other\n                     * button to have focus, but simply to remove focus from any other input element on the page.\n                     */\n                    this.captureKeys(document);\n                }\n            }\n\n            /*\n             * Finally, the active input state.  If there is no active input, col and row are -1.  After\n             * this point, these variables will be updated by setPosition().\n             */\n            this.col = this.row = -1;\n        }\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Input}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let input = this;\n\n        switch(binding) {\n\n        case Input.BINDING.POWER:\n            element.onclick = function onClickPower() {\n                if (input.onPower) input.onPower();\n            };\n            break;\n\n        case Input.BINDING.RESET:\n            element.onclick = function onClickReset() {\n                if (input.onReset) input.onReset();\n            };\n            break;\n        }\n        super.addBinding(binding, element);\n    }\n\n    /**\n     * addClick(onPower, onReset)\n     *\n     * Called by the Chip device to set up power and reset notifications.\n     *\n     * @this {Input}\n     * @param {function()} [onPower] (called when the \"power\" button, if any, is clicked)\n     * @param {function()} [onReset] (called when the \"reset\" button, if any, is clicked)\n     */\n    addClick(onPower, onReset)\n    {\n        this.onPower = onPower;\n        this.onReset = onReset;\n    }\n\n    /**\n     * addHover(onHover)\n     *\n     * @this {Input}\n     * @param {function(number, number)} onHover\n     */\n    addHover(onHover)\n    {\n        this.onHover = onHover;\n    }\n\n    /**\n     * addInput(onInput)\n     *\n     * Called by the Chip device to set up input notifications.\n     *\n     * @this {Input}\n     * @param {function(number,number)} onInput\n     */\n    addInput(onInput)\n    {\n        this.onInput = onInput;\n    }\n\n    /**\n     * captureKeys(element)\n     *\n     * @this {Input}\n     * @param {Document|HTMLElement} element\n     */\n    captureKeys(element)\n    {\n        let input = this;\n        element.addEventListener(\n            'keydown',\n            function onKeyDown(event) {\n                event = event || window.event;\n                let activeElement = document.activeElement;\n                if (activeElement == input.bindings[Input.BINDING.POWER]) {\n                    let keyCode = event.which || event.keyCode;\n                    let ch = Input.KEYCODE[keyCode];\n                    if (ch && input.onKeyPress(ch)) {\n                        event.preventDefault();\n                    }\n                }\n            }\n        );\n        element.addEventListener(\n            'keypress',\n            function onKeyPress(event) {\n                event = event || window.event;\n                let charCode = event.which || event.charCode;\n                let ch = String.fromCharCode(charCode);\n                if (ch && input.onKeyPress(ch)) {\n                    event.preventDefault();\n                }\n            }\n        );\n    }\n\n    /**\n     * onKeyPress(ch)\n     *\n     * @this {Input}\n     * @param {string} ch\n     * @returns {boolean} (true if processed, false if not)\n     */\n    onKeyPress(ch)\n    {\n        for (let row = 0; row < this.map.length; row++) {\n            let rowMap = this.map[row];\n            for (let col = 0; col < rowMap.length; col++) {\n                let aParts = rowMap[col].split('|');\n                if (aParts.indexOf(ch) >= 0) {\n                    if (this.keyState) {\n                        if (this.keysPressed.length < 16) {\n                            this.keysPressed.push(ch);\n                        }\n                    } else {\n                        this.keyState = 1;\n                        this.setPosition(col, row);\n                        this.time.setTimer(this.timerKeyRelease, Input.BUTTON_DELAY);\n                    }\n                    return true;\n                }\n            }\n        }\n        this.printf(\"unrecognized key '%s' (0x%02x)\\n\", ch, ch.charCodeAt(0));\n        return false;\n    }\n\n    /**\n     * onKeyTimer()\n     *\n     * @this {Input}\n     */\n    onKeyTimer()\n    {\n\n        if (this.keyState == 1) {\n            this.keyState++;\n            this.setPosition(-1, -1);\n            this.time.setTimer(this.timerKeyRelease, Input.BUTTON_DELAY);\n        } else {\n            this.keyState = 0;\n            if (this.keysPressed.length) {\n                this.onKeyPress(this.keysPressed.shift());\n            }\n        }\n    }\n\n    /**\n     * captureMouse(element)\n     *\n     * @this {Input}\n     * @param {HTMLImageElement} element\n     */\n    captureMouse(element)\n    {\n        let input = this;\n\n        element.addEventListener(\n            'mousedown',\n            function onMouseDown(event) {\n                /*\n                 * If there are any text input elements on the page that might currently have focus,\n                 * this is a good time to divert focus to a focusable element of our own (eg, a \"power\"\n                 * button).  Otherwise, key presses could be confusingly processed in two places.\n                 *\n                 * Unfortunately, setting focus on an element can cause the browser to scroll the element\n                 * into view, so to avoid that, we use the following scrollTo() work-around.\n                 */\n                let button = input.bindings[Input.BINDING.POWER];\n                if (button) {\n                    let x = window.scrollX, y = window.scrollY;\n                    button.focus();\n                    window.scrollTo(x, y);\n                }\n                if (!event.button) {\n                    input.processEvent(element, Input.ACTION.PRESS, event);\n                }\n            }\n        );\n\n        element.addEventListener(\n            'mousemove',\n            function onMouseMove(event) {\n                input.processEvent(element, Input.ACTION.MOVE, event);\n            }\n        );\n\n        element.addEventListener(\n            'mouseup',\n            function onMouseUp(event) {\n                if (!event.button) {\n                    input.processEvent(element, Input.ACTION.RELEASE, event);\n                }\n            }\n        );\n\n        element.addEventListener(\n            'mouseout',\n            function onMouseOut(event) {\n                if (input.xStart < 0) {\n                    input.processEvent(element, Input.ACTION.MOVE, event);\n                } else {\n                    input.processEvent(element, Input.ACTION.RELEASE, event);\n                }\n            }\n        );\n    }\n\n    /**\n     * captureTouch(element)\n     *\n     * @this {Input}\n     * @param {HTMLImageElement} element\n     */\n    captureTouch(element)\n    {\n        let input = this;\n\n        /*\n         * NOTE: The mouse event handlers below deal only with events where the left button is involved\n         * (ie, left button is pressed, down, or released).\n         */\n        element.addEventListener(\n            'touchstart',\n            function onTouchStart(event) {\n                input.processEvent(element, Input.ACTION.PRESS, event);\n            }\n        );\n\n        element.addEventListener(\n            'touchmove',\n            function onTouchMove(event) {\n                input.processEvent(element, Input.ACTION.MOVE, event);\n            }\n        );\n\n        element.addEventListener(\n            'touchend',\n            function onTouchEnd(event) {\n                input.processEvent(element, Input.ACTION.RELEASE, event);\n            }\n        );\n    }\n\n    /**\n     * processEvent(element, action, event)\n     *\n     * @this {Input}\n     * @param {HTMLImageElement} element\n     * @param {number} action\n     * @param {Event|MouseEvent|TouchEvent} [event] (eg, the object from a 'touch' or 'mouse' event)\n     */\n    processEvent(element, action, event)\n    {\n        let col = -1, row = -1;\n        let x, y, xInput, yInput, fButton, fInput, fPower;\n\n        if (action < Input.ACTION.RELEASE) {\n            /**\n             * @name Event\n             * @property {Array} targetTouches\n             */\n            event = event || window.event;\n\n            if (!event.targetTouches || !event.targetTouches.length) {\n                x = event.pageX;\n                y = event.pageY;\n            } else {\n                x = event.targetTouches[0].pageX;\n                y = event.targetTouches[0].pageY;\n            }\n\n            /*\n             * Touch coordinates (that is, the pageX and pageY properties) are relative to the page, so to make\n             * them relative to the element, we must subtract the element's left and top positions.  This Apple web page:\n             *\n             *      https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/AddingMouseandTouchControlstoCanvas/AddingMouseandTouchControlstoCanvas.html\n             *\n             * makes it sound simple, but it turns out we have to walk the element's entire \"parentage\" of DOM elements\n             * to get the exact offsets.\n             */\n            let xOffset = 0;\n            let yOffset = 0;\n            let elementNext = element;\n            do {\n                if (!isNaN(elementNext.offsetLeft)) {\n                    xOffset += elementNext.offsetLeft;\n                    yOffset += elementNext.offsetTop;\n                }\n            } while ((elementNext = elementNext.offsetParent));\n\n            /*\n             * Due to the responsive nature of our pages, the displayed size of the surface image may be smaller than\n             * the original size, and the coordinates we receive from events are based on the currently displayed size.\n             */\n            x = ((x - xOffset) * (this.cxSurface / element.offsetWidth))|0;\n            y = ((y - yOffset) * (this.cySurface / element.offsetHeight))|0;\n\n            xInput = x - this.xInput;\n            yInput = y - this.yInput;\n\n            /*\n             * fInput is set if the event occurred somewhere within the input region (ie, the calculator keypad),\n             * either on a button or between buttons, whereas fButton is set if the event occurred squarely (rectangularly?)\n             * on a button.  fPower deals separately with the power button; it is set if the event occurred on the\n             * power button.\n             */\n            fInput = fButton = false;\n            fPower = (x >= this.xPower && x < this.xPower + this.cxPower && y >= this.yPower && y < this.yPower + this.cyPower);\n\n            /*\n             * I use the top of the input region, less some gap, to calculate a dividing line, above which\n             * default actions should be allowed, and below which they should not.  Ditto for any event inside\n             * the power button.\n             */\n            if (xInput >= 0 && xInput < this.cxInput && yInput + this.cyGap >= 0 || fPower) {\n                /*\n                 * If we allow touch events to be processed, they will generate mouse events as well, causing\n                 * confusion and delays.  We can sidestep that problem by preventing default actions on any event\n                 * that occurs within the input region.  One downside is that you can no longer scroll the image\n                 * using touch, but that may be just as well, because you probably don't want a sloppy touch moving\n                 * your device around (or worse, a rapid double-tap zooming the device).  Besides, if you really\n                 * want to move or zoom the device, the solution is simple: touch *outside* the input region.\n                 */\n                event.preventDefault();\n\n                if (xInput >= 0 && xInput < this.cxInput && yInput >= 0 && yInput < this.cyInput) {\n                    fInput = true;\n                    /*\n                     * The width and height of each column and row could be determined by computing cxGap + cxButton\n                     * and cyGap + cyButton, respectively, but those gap and button sizes are merely estimates, and should\n                     * only be used to help with the final button coordinate checks farther down.\n                     */\n                    let cxCol = (this.cxInput / this.nCols) | 0;\n                    let cyCol = (this.cyInput / this.nRows) | 0;\n                    let colInput = (xInput / cxCol) | 0;\n                    let rowInput = (yInput / cyCol) | 0;\n\n                    /*\n                     * If the grid is hexagonal (aka \"Lite-Brite\" mode), then the cells of even-numbered rows are\n                     * offset horizontally by 1/2 cell.  In addition, the last cell in those rows is unused, so if\n                     * after compensating by 1/2 cell, the target column is the last cell, we set xInput to -1,\n                     * effectively ignoring input on that cell.\n                     */\n                    if (this.fHexagonal && !(rowInput & 0x1)) {\n                        xInput -= (cxCol >> 1);\n                        colInput = (xInput / cxCol) | 0;\n                        if (colInput == this.nCols - 1) xInput = -1;\n                    }\n\n                    /*\n                     * (xCol,yCol) will be the top left corner of the button closest to the point of input.  However, that's\n                     * based on our gap estimate.  If things seem \"too tight\", shrink the gap estimates, which will automatically\n                     * increase the button size estimates.\n                     */\n                    let xCol = colInput * cxCol + (this.cxGap >> 1);\n                    let yCol = rowInput * cyCol + (this.cyGap >> 1);\n\n                    xInput -= xCol;\n                    yInput -= yCol;\n                    if (xInput >= 0 && xInput < this.cxButton && yInput >= 0 && yInput < this.cyButton) {\n                        col = colInput;\n                        row = rowInput;\n                        fButton = true;\n                    }\n                }\n            }\n        }\n\n        if (action == Input.ACTION.PRESS) {\n            /*\n             * Record the position of the event, transitioning xStart and yStart to non-negative values.\n             */\n            this.xStart = x;\n            this.yStart = y;\n            if (fInput) {\n                /*\n                 * The event occurred in the input region, so we call setPosition() regardless of whether\n                 * it hit or missed a button.\n                 */\n                this.setPosition(col, row);\n                /*\n                 * On the other hand, if it DID hit a button, then we arm the auto-release timer, to ensure\n                 * a minimum amount of time (ie, BUTTON_DELAY).\n                 */\n                if (fButton) {\n                    this.time.setTimer(this.timerInputRelease, Input.BUTTON_DELAY, true);\n                }\n            } else if (fPower && this.onPower) {\n                this.onPower();\n            }\n        }\n        else if (action == Input.ACTION.MOVE) {\n            if (this.xStart >= 0 && this.yStart >= 0 && this.fDrag) {\n                this.setPosition(col, row);\n            }\n            else if (this.onHover) {\n                this.onHover(col, row);\n            }\n        }\n        else if (action == Input.ACTION.RELEASE) {\n            /*\n             * Don't immediately signal the release if the release timer is active (let the timer take care of it).\n             */\n            if (!this.time.isTimerSet(this.timerInputRelease)) {\n                this.setPosition(-1, -1);\n            }\n            this.xStart = this.yStart = -1;\n        }\n        else {\n            this.println(\"unrecognized action: \" + action);\n        }\n    }\n\n    /**\n     * setPosition(col, row)\n     *\n     * @this {Input}\n     * @param {number} col\n     * @param {number} row\n     */\n    setPosition(col, row)\n    {\n        if (col != this.col || row != this.row) {\n            this.col = col;\n            this.row = row;\n            if (this.onInput) this.onInput(col, row);\n        }\n    }\n}\n\nInput.ACTION = {\n    PRESS:      1,              // eg, an action triggered by a 'mousedown' or 'touchstart' event\n    MOVE:       2,              // eg, an action triggered by a 'mousemove' or 'touchmove' event\n    RELEASE:    3               // eg, an action triggered by a 'mouseup' (or 'mouseout') or 'touchend' event\n};\n\nInput.BINDING = {\n    POWER:      \"power\",\n    RESET:      \"reset\",\n    SURFACE:    \"surface\"\n};\n\nInput.KEYCODE = {               // keyCode from keydown/keyup events\n    0x08:       \"\\b\"            // backspace\n};\n\nInput.BUTTON_DELAY = 50;        // minimum number of milliseconds to ensure between button presses and releases\n\nInput.VERSION   = 1.10;\n\n/**\n * @copyright http://pcjs.org/modules/devices/led.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), type: number, width: (number|undefined), height: (number|undefined), cols: (number|undefined), rows: (number|undefined), color: (string|undefined), backgroundColor: (string|undefined), fixed: (boolean|undefined), hexagonal: (boolean|undefined), highlight: (boolean|undefined), persistent: (boolean|undefined) }} */\nvar LEDConfig;\n\n/**\n * The ultimate goal is to provide support for a variety of LED types, such as:\n *\n * 1) LED Light (single light)\n * 2) LED Digit (7-segment digit)\n *\n * The initial goal is to manage a 12-element array of 7-segment LED digits for the TI-57.\n *\n * We create a \"view\" canvas element inside the specified \"container\" element, along with a \"grid\" canvas\n * where all the real drawing occurs; drawView() then renders the \"grid\" canvas onto the \"view\" canvas.\n *\n * Internally, our LED digits have a width and height of 96 and 128.  Those are \"grid\" dimensions which\n * cannot be changed, because our table of drawing coordinates in LED.SEGMENT are hard-coded for those\n * dimensions.  The cell width and height that are specified as part of the LEDConfig are \"view\" dimensions,\n * which usually match the grid dimensions, but you're welcome to scale them up or down; the browser's\n * drawImage() function takes care of that.\n *\n * There is a low-level function, drawGridSegment(), for drawing specific LED segments of specific digits;\n * generally, you start with clearGrid(), draw all the segments for a given update, and then call drawView()\n * to make them visible.\n *\n * However, our Chip devices operate at a higher level.  They use setLEDState() to modify the state,\n * character, etc, that each of the LED cells should display, which updates our internal LED buffer.  Then\n * at whatever display refresh rate is set (typically 60Hz), drawBuffer() is called to see if the buffer\n * contents have been modified since the last refresh, and if so, it converts the contents of the buffer to\n * a string and calls drawString().\n *\n * This buffering strategy, combined with the buffer \"tickled\" flag (see below), not only makes life\n * simple for the Chip device, but also simulates how the display goes blank for short periods of time while\n * the Chip is busy performing calculations.\n *\n * @class {LED}\n * @unrestricted\n * @property {LEDConfig} config\n * @property {number} type (one of the LED.TYPE values)\n * @property {number} width (default is 96 for LED.TYPE.DIGIT, 32 otherwise; see LED.SIZES)\n * @property {number} height (default is 128 for LED.TYPE.DIGIT, 32 otherwise; see LED.SIZES)\n * @property {number} cols (default is 1)\n * @property {number} rows (default is 1)\n * @property {string} color (default is none; ie, transparent foreground)\n * @property {string} colorBackground (default is none; ie, transparent background)\n * @property {number} widthView (computed)\n * @property {number} heightView (computed)\n * @property {number} widthGrid (computed)\n * @property {number} heightGrid (computed)\n * @property {HTMLCanvasElement} canvasView\n * @property {CanvasRenderingContext2D} contextView\n * @property {HTMLCanvasElement} canvasGrid\n * @property {CanvasRenderingContext2D} contextGrid\n * @property {{\n *  container: HTMLElement|undefined\n * }} bindings\n * @property {Array.<string|number>} buffer\n * @property {Array.<string|number>|null} bufferClone\n * @property {boolean} fFixed (default is false, meaning the view may fill the container to its maximum size)\n * @property {boolean} fHexagonal (default is false)\n * @property {boolean} fHighlight (default is true)\n * @property {boolean} fPersistent (default is false for LED.TYPE.DIGIT, meaning the view will be blanked if not refreshed)\n * @property {boolean} fBufferModified\n * @property {boolean} fTickled\n */\nclass LED extends Device {\n    /**\n     * LED(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"display\": {\n     *        \"class\": \"LED\",\n     *        \"type\": 3,\n     *        \"cols\": 12,\n     *        \"rows\": 1,\n     *        \"color\": \"red\",\n     *        \"bindings\": {\n     *          \"container\": \"displayTI57\"\n     *        }\n     *      }\n     *\n     * @this {LED}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {LEDConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, LED.VERSION, config);\n\n        let container = this.bindings[LED.BINDING.CONTAINER];\n        if (!container) {\n            let sError = \"LED binding for '\" + LED.BINDING.CONTAINER + \"' missing: '\" + this.config.bindings[LED.BINDING.CONTAINER] + \"'\";\n            throw new Error(sError);\n        }\n\n        let canvasView = /** @type {HTMLCanvasElement} */ (document.createElement(\"canvas\"));\n        if (!canvasView || !canvasView.getContext) {\n            let sError = \"LED device requires HTML5 canvas support\";\n            container.innerHTML = sError;\n            throw new Error(sError);\n        }\n\n        this.container = container;\n        this.canvasView = canvasView;\n\n        this.type = this.getBounded(this.config['type'] || LED.TYPE.ROUND, LED.TYPE.ROUND, LED.TYPE.DIGIT);\n        this.widthCell = LED.SIZES[this.type][0];\n        this.heightCell = LED.SIZES[this.type][1];\n        this.width = this.config['width'] || this.widthCell;\n        this.height = this.config['height'] || this.heightCell;\n        this.cols = this.config['cols'] || 1;\n        this.rows = this.config['rows'] || 1;\n        this.widthView = this.width * this.cols;\n        this.heightView = this.height * this.rows;\n\n        this.colorTransparent = this.getRGBAColor(\"black\", 0);\n        this.colorOn = this.getRGBColor(this.config['color']) || this.colorTransparent;\n        this.colorOff = this.getRGBAColor(this.colorOn, 1.0, 0.25);\n        this.colorHighlight = this.getRGBAColor(this.colorOn, 1.0, 2.0);\n        this.colorBackground = this.getRGBColor(this.config['backgroundColor']);\n\n        /*\n         * We generally want our view canvas to be \"responsive\", not \"fixed\" (ie, to automatically resize\n         * with changes to the overall window size), so we apply the following style attributes (formerly\n         * applied with the \"pcjs-canvas\" style in /modules/shared/templates/components.css):\n         *\n         *      width: 100%;\n         *      height: auto;\n         *\n         * But, if you really don't want that feature, then set the LED config's \"fixed\" property to true.\n         */\n        this.fFixed = this.config['fixed'] || false;\n        if (!this.fFixed) {\n            canvasView.style.width = \"100%\";\n            canvasView.style.height = \"auto\";\n        }\n\n        /*\n         * Persistent LEDS are the default, except for LED.TYPE.DIGIT, which is used with calculator displays\n         * whose underlying hardware must constantly \"refresh\" the LEDs to prevent them from going dark.\n         */\n        this.fPersistent = this.config['persistent'];\n        if (this.fPersistent == undefined) this.fPersistent = (this.type < LED.TYPE.DIGIT);\n\n        /*\n         * Hexagonal (aka \"Lite-Brite\" mode) and highlighting options\n         */\n        this.fHexagonal = this.config['hexagonal'] || false;\n        this.fHighlight = this.config['highlight'];\n        if (this.fHighlight === undefined) this.fHighlight = true;\n\n        canvasView.setAttribute(\"width\", this.widthView.toString());\n        canvasView.setAttribute(\"height\", this.heightView.toString());\n        canvasView.style.backgroundColor = this.colorTransparent;\n        container.appendChild(canvasView);\n        this.contextView = /** @type {CanvasRenderingContext2D} */ (canvasView.getContext(\"2d\"));\n\n        /*\n         * canvasGrid is where all LED segments are composited; then they're drawn onto canvasView.\n         */\n        this.canvasGrid = /** @type {HTMLCanvasElement} */ (document.createElement(\"canvas\"));\n        if (this.canvasGrid) {\n            this.canvasGrid.width = this.widthGrid = this.widthCell * this.cols;\n            this.canvasGrid.height = this.heightGrid = this.heightCell * this.rows;\n            this.contextGrid = this.canvasGrid.getContext(\"2d\");\n        }\n\n        /*\n         * Time to allocate our internal LED buffer.  Other devices access the buffer through interfaces\n         * like setLEDState() and getLEDState().  The LED buffer contains four per elements per LED cell:\n         *\n         *      [0]:    state (eg, ON or OFF or a digit)\n         *      [1]:    color\n         *      [2]:    count(s) (eg, 0 to 8  4-bit counts)\n         *      [3]:    flags (eg, PERIOD, MODIFIED, etc)\n         *\n         * The LED buffer also contains an extra (scratch) row at the end.  This extra row, along with the\n         * dynamically allocated \"clone\" buffer, is used by the LED Controller for direct buffer manipulation;\n         * see the low-level getBuffer(), getBufferClone(), and swapBuffers() interfaces.\n         */\n        this.nBufferInc = 4;\n        this.nBufferCells = ((this.rows + 1) * this.cols) * this.nBufferInc;\n        this.buffer = new Array(this.nBufferCells);\n        this.bufferClone = null;\n\n        /*\n         * fBufferModified is straightforward: set to true by any setLEDState() call that actually\n         * changed something in the LED buffer, set to false after every drawBuffer() call, periodic\n         * or otherwise.\n         *\n         * fTickled is a flag which, under normal (idle) circumstances, will constantly be set to\n         * true by periodic display operations that call setLEDState(); we clear it after every\n         * periodic drawBuffer(), so if the machine fails to execute a setBuffer() in a timely manner,\n         * we will see that fTickled hasn't been \"tickled\", and automatically blank the display.\n         */\n        this.fBufferModified = this.fTickled = false;\n\n        /*\n         * This records the location of the most recent LED buffer location updated via setLEDState(),\n         * in case we want to highlight it.\n         */\n        this.iBufferRecent = -1;\n\n        let led = this;\n        this.time = /** @type {Time} */ (this.findDeviceByClass(Machine.CLASS.TIME));\n        if (this.time) {\n            this.time.addAnimator(function ledAnimate() {\n                led.drawBuffer();\n            });\n        }\n    }\n\n    /**\n     * clearBuffer(fDraw)\n     *\n     * @this {LED}\n     * @param {boolean} [fDraw]\n     */\n    clearBuffer(fDraw)\n    {\n        this.initBuffer(this.buffer);\n        this.fBufferModified = this.fTickled = true;\n        if (fDraw) this.drawBuffer(true);\n    }\n\n    /**\n     * clearGrid()\n     *\n     * @this {LED}\n     */\n    clearGrid()\n    {\n        if (this.colorBackground) {\n            this.contextGrid.fillStyle = this.colorBackground;\n            this.contextGrid.fillRect(0, 0, this.widthGrid, this.heightGrid);\n        } else {\n            this.contextGrid.clearRect(0, 0, this.widthGrid, this.heightGrid);\n        }\n    }\n\n    /**\n     * clearGridCell(col, row, xOffset)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {number} xOffset\n     */\n    clearGridCell(col, row, xOffset)\n    {\n        let xBias = col * this.widthCell + xOffset;\n        let yBias = row * this.heightCell;\n        if (this.colorBackground) {\n            this.contextGrid.fillStyle = this.colorBackground;\n            this.contextGrid.fillRect(xBias, yBias, this.widthCell, this.heightCell);\n        } else {\n            this.contextGrid.clearRect(xBias, yBias, this.widthCell, this.heightCell);\n        }\n    }\n\n    /**\n     * drawBuffer(fForced)\n     *\n     * This is our periodic (60Hz) redraw function; however, it can also be called synchronously\n     * (eg, see clearBuffer()).  The other important periodic side-effect of this function is clearing\n     * fTickled, so that if no other setLEDState() calls occur between now and the next drawBuffer(),\n     * an automatic clearBuffer() will be triggered.  This simulates the normal blanking of the display\n     * whenever the machine performs lengthy calculations, because for an LED display to remain lit,\n     * the machine must perform a display operation (\"refresh\") at least 30-60 times per second.\n     *\n     * @this {LED}\n     * @param {boolean} [fForced]\n     */\n    drawBuffer(fForced = false)\n    {\n        if (this.fBufferModified || fForced) {\n            if (this.type < LED.TYPE.DIGIT) {\n                this.drawGrid(fForced);\n            } else {\n                let s = \"\";\n                for (let i = 0; i < this.buffer.length; i += this.nBufferInc) {\n                    s += this.buffer[i] || ' ';\n                    if (this.buffer[i+3] & LED.FLAGS.PERIOD) s += '.';\n                }\n                this.drawString(s);\n            }\n            this.fBufferModified = false;\n            this.iBufferRecent = -1;\n        }\n        else if (!this.fPersistent && !this.fTickled) {\n            this.clearBuffer(true);\n        }\n        this.fTickled = false;\n    }\n\n    /**\n     * drawGrid(fForced)\n     *\n     * Used by drawBuffer() for LED.TYPE.ROUND and LED.TYPE.SQUARE.\n     *\n     * @this {LED}\n     * @param {boolean} fForced\n     */\n    drawGrid(fForced)\n    {\n        if (!this.fPersistent || fForced) {\n            this.clearGrid();\n        }\n        let i = 0;\n        for (let row = 0; row < this.rows; row++) {\n            for (let col = 0; col < this.cols; col++) {\n                let state = this.buffer[i];\n                let color = this.buffer[i+1] || this.colorTransparent;\n                let fModified = !!(this.buffer[i+3] & LED.FLAGS.MODIFIED);\n                let fHighlight = (this.fHighlight && i == this.iBufferRecent);\n                if (fModified || fHighlight || fForced) {\n                    this.drawGridCell(state, color, col, row, fHighlight);\n                    this.buffer[i+3] &= ~LED.FLAGS.MODIFIED;\n                    if (fHighlight) this.buffer[i+3] |= LED.FLAGS.MODIFIED;\n                }\n                i += this.nBufferInc;\n            }\n        }\n        this.drawView();\n    }\n\n    /**\n     * drawGridCell(state, color, col, row, fHighlight)\n     *\n     * Used by drawGrid() for LED.TYPE.ROUND and LED.TYPE.SQUARE.\n     *\n     * @this {LED}\n     * @param {string} state (eg, LED.STATE.ON or LED.STATE.OFF)\n     * @param {string} [color]\n     * @param {number} [col] (default is zero)\n     * @param {number} [row] (default is zero)\n     * @param {boolean} [fHighlight] (true if the cell should be highlighted; default is false)\n     */\n    drawGridCell(state, color, col = 0, row = 0, fHighlight = false)\n    {\n        let xOffset = 0;\n        if (this.fHexagonal) {\n            if (!(row & 0x1)) {\n                xOffset = (this.widthCell >> 1);\n                if (col == this.cols - 1) return;\n            }\n        }\n\n        /*\n         * If this is NOT a persistent LED display, then drawGrid() will have done a preliminary clearGrid(),\n         * eliminating the need to clear individual cells.  Whereas if this IS a persistent LED display, then\n         * we need to clear cells on an as-drawn basis.  If we don't, there could be residual \"bleed over\"\n         * around the edges of the shape we drew here previously.\n         */\n        if (this.fPersistent) {\n            this.clearGridCell(col, row, xOffset);\n        }\n\n        let colorOn, colorOff;\n        if (!color || color == this.colorOn) {\n            colorOn = fHighlight? this.colorHighlight : this.colorOn;\n            colorOff = this.colorOff;\n        } else {\n            colorOn = fHighlight? this.getRGBAColor(color, 1.0, 2.0) : color;\n            colorOff = this.getRGBAColor(color, 1.0, 0.25);\n        }\n\n        let fTransparent = false;\n        color = (state? colorOn : colorOff);\n        if (colorOn == this.colorTransparent) {\n            color = this.colorBackground;\n            fTransparent = true;\n        }\n\n        this.contextGrid.fillStyle = color;\n\n        let xBias = col * this.widthCell + xOffset;\n        let yBias = row * this.heightCell;\n        let coords = LED.SHAPES[this.type];\n        if (coords.length == 3) {\n            this.contextGrid.beginPath();\n            this.contextGrid.arc(coords[0] + xBias, coords[1] + yBias, coords[2], 0, Math.PI * 2);\n            if (fTransparent) {\n                /*\n                 * The following code works as well:\n                 *\n                 *      this.contextGrid.save();\n                 *      this.contextGrid.clip();\n                 *      this.contextGrid.clearRect(xBias, yBias, this.widthCell, this.heightCell);\n                 *      this.contextGrid.restore();\n                 *\n                 * but I assume it's not as efficient.\n                 */\n                this.contextGrid.globalCompositeOperation = \"destination-out\";\n                this.contextGrid.fill();\n                this.contextGrid.globalCompositeOperation = \"source-over\";\n            } else {\n                this.contextGrid.fill();\n            }\n        } else {\n            this.contextGrid.fillRect(coords[0] + xBias, coords[1] + yBias, coords[2], coords[3]);\n        }\n    }\n\n    /**\n     * drawGridSegment(seg, col, row)\n     *\n     * Used by drawSymbol() for LED.TYPE.DIGIT.\n     *\n     * @this {LED}\n     * @param {string} seg (eg, \"A\")\n     * @param {number} [col] (default is zero)\n     * @param {number} [row] (default is zero)\n     */\n    drawGridSegment(seg, col = 0, row = 0)\n    {\n        let coords = LED.SEGMENT[seg];\n        if (coords) {\n            let xBias = col * this.widthCell;\n            let yBias = row * this.heightCell;\n            this.contextGrid.fillStyle = this.colorOn;\n            this.contextGrid.beginPath();\n            if (coords.length == 3) {\n                this.contextGrid.arc(coords[0] + xBias, coords[1] + yBias, coords[2], 0, Math.PI * 2);\n            } else {\n                for (let i = 0; i < coords.length; i += 2) {\n                    if (!i) {\n                        this.contextGrid.moveTo(coords[i] + xBias, coords[i + 1] + yBias);\n                    } else {\n                        this.contextGrid.lineTo(coords[i] + xBias, coords[i + 1] + yBias);\n                    }\n                }\n            }\n            this.contextGrid.closePath();\n            this.contextGrid.fill();\n        }\n    }\n\n    /**\n     * drawString(s)\n     *\n     * Used by drawBuffer() for LED.TYPE.DIGIT.\n     *\n     * @this {LED}\n     * @param {string} s\n     */\n    drawString(s)\n    {\n        this.clearGrid();\n        for (let i = 0, col = 0, row = 0; i < s.length; i++) {\n            let ch = s[i];\n            if (ch == '.') {\n                if (col) col--;\n            }\n            this.drawSymbol(ch, col, row);\n            if (++col == this.cols) {\n                col = 0;\n                if (++row == this.rows) {\n                    break;\n                }\n            }\n        }\n        this.drawView();\n    }\n\n    /**\n     * drawSymbol(symbol, col, row)\n     *\n     * Used by drawString() for LED.TYPE.DIGIT.\n     *\n     * If the symbol does not exist in LED.SYMBOLS, then nothing is drawn.\n     *\n     * @this {LED}\n     * @param {string} symbol\n     * @param {number} [col] (default is zero)\n     * @param {number} [row] (default is zero)\n     */\n    drawSymbol(symbol, col = 0, row = 0)\n    {\n        let segments = LED.SYMBOLS[symbol];\n        if (segments) {\n            for (let i = 0; i < segments.length; i++) {\n                this.drawGridSegment(segments[i], col, row)\n            }\n        }\n    }\n\n    /**\n     * drawView()\n     *\n     * @this {LED}\n     */\n    drawView()\n    {\n        /*\n         * Setting the 'globalCompositeOperation' property of a 2D context is something you rarely need to do,\n         * because the default draw behavior (\"source-over\") is fine for most cases.  One case where it is NOT\n         * fine is when we're using a transparent background color, because it doesn't copy over any transparent\n         * pixels, effectively making it impossible to \"turn off\" any previously drawn LED segments.  To force\n         * that behavior, we must select the \"copy\" behavior.\n         *\n         * Refer to: https://www.w3.org/TR/2dcontext/#dom-context-2d-globalcompositeoperation\n         */\n        this.contextView.globalCompositeOperation = (this.colorBackground && !this.fPersistent)? \"source-over\" : \"copy\";\n        this.contextView.drawImage(this.canvasGrid, 0, 0, this.widthGrid, this.heightGrid, 0, 0, this.widthView, this.heightView);\n    }\n\n    /**\n     * getBuffer()\n     *\n     * @this {LED}\n     * @returns {Array}\n     */\n    getBuffer()\n    {\n        return this.buffer;\n    }\n\n    /**\n     * getBufferClone()\n     *\n     * @this {LED}\n     * @returns {Array}\n     */\n    getBufferClone()\n    {\n        if (!this.bufferClone) {\n            this.bufferClone = new Array(this.nBufferCells);\n            this.initBuffer(this.bufferClone);\n        }\n        return this.bufferClone;\n    }\n\n    /**\n     * getLEDColor(col, row)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @returns {string}\n     */\n    getLEDColor(col, row)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        return this.buffer[i+1] || this.colorTransparent;\n    }\n\n    /**\n     * getLEDColorValues(col, row, rgb)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {Array.<number>} rgb\n     * @returns {boolean}\n     */\n    getLEDColorValues(col, row, rgb)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        return this.parseRGBValues(this.buffer[i+1] || this.colorTransparent, rgb);\n    }\n\n    /**\n     * getLEDCounts(col, row, counts)\n     *\n     * This function returns success (true) ONLY for cells that are not transparent.\n     *\n     * For a typical \"Lite-Brite\" grid, transparent cells are considered \"empty\", so we want to\n     * ignore them.\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {Array.<number>} counts\n     * @returns {boolean}\n     */\n    getLEDCounts(col, row, counts)\n    {\n        let fSuccess = false;\n        let i = (row * this.cols + col) * this.nBufferInc;\n        if (i <= this.buffer.length - this.nBufferInc && this.buffer[i+1]) {\n            fSuccess = true;\n            let bits = this.buffer[i+2];\n            for (let c = counts.length - 1; c >= 0; c--) {\n                counts[c] = bits & 0xf;\n                bits >>>= 4;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * getLEDCountsPacked(col, row)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @returns {number}\n     */\n    getLEDCountsPacked(col, row)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        return (i <= this.buffer.length - this.nBufferInc)? this.buffer[i+2] : 0;\n    }\n\n    /**\n     * getLEDState(col, row)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @returns {number|undefined}\n     */\n    getLEDState(col, row)\n    {\n        let state;\n        let i = (row * this.cols + col) * this.nBufferInc;\n\n        if (i >= 0 && i <= this.buffer.length - this.nBufferInc) {\n            state = this.buffer[i];\n        }\n        return state;\n    }\n\n    /**\n     * getDefaultColor()\n     *\n     * @this {LED}\n     * @returns {string}\n     */\n    getDefaultColor()\n    {\n        return this.colorOn;\n    }\n\n    /**\n     * getRGBColor(color, colorDefault)\n     *\n     * Returns a color string in the \"hex\" format that fillStyle recognizes (eg, \"#rrggbb\").\n     *\n     * The default is optional, allowing an undefined color to remain undefined if we want to use\n     * that to signal transparency (as in the case of colorBackground).\n     *\n     * @this {LED}\n     * @param {string|undefined} color\n     * @param {string} [colorDefault]\n     * @returns {string|undefined}\n     */\n    getRGBColor(color, colorDefault)\n    {\n        color = color || colorDefault;\n        return color && LED.COLORS[color] || color;\n    }\n\n    /**\n     * getRGBColorString(rgb)\n     *\n     * Returns a color string fillStyle recognizes (ie, \"#rrggbb\", or \"rgba(r,g,b,a)\" if an alpha value\n     * less than 1 is set).\n     *\n     * @this {LED}\n     * @param {Array.<number>} rgb\n     * @returns {string}\n     */\n    getRGBColorString(rgb)\n    {\n        let s;\n        if (rgb.length < 4 || rgb[3] == 1) {\n            s = this.sprintf(\"#%02x%02x%02x\", rgb[0], rgb[1], rgb[2]);\n        } else {\n            s = this.sprintf(\"rgba(%d,%d,%d,%d)\", rgb[0], rgb[1], rgb[2], rgb[3]);\n        }\n        return s;\n    }\n\n    /**\n     * getRGBAColor(color, alpha, brightness)\n     *\n     * Returns a color string in the \"rgba\" format that fillStyle recognizes (eg, \"rgba(255, 255, 255, 0)\").\n     *\n     * I used to use \"alpha\" to adjust the brightness, but it's safer to use the \"brightness\" parameter,\n     * which simply scales all the RGB values.  That's because if any shapes are redrawn using a fillStyle\n     * with alpha < 1.0, the target alpha values will be added instead of replaced, resulting in progressively\n     * brighter shapes; probably not what you want.\n     *\n     * @this {LED}\n     * @param {string} color\n     * @param {number} [alpha]\n     * @param {number} [brightness]\n     * @returns {string}\n     */\n    getRGBAColor(color, alpha = 1.0, brightness = 1.0)\n    {\n        if (color) {\n            let rgb = [];\n            color = LED.COLORS[color] || color;\n            if (this.parseRGBValues(color, rgb)) {\n                color = \"rgba(\";\n                let i;\n                for (i = 0; i < 3; i++) {\n                    let n = Math.round(rgb[i] * brightness);\n                    n = (n < 0? 0 : (n > 255? 255 : n));\n                    color += n + \",\";\n                }\n                color += (i < rgb.length? rgb[i] : alpha) + \")\";\n            }\n        }\n        return color;\n    }\n\n    /**\n     * initBuffer(buffer)\n     *\n     * @this {LED}\n     * @param buffer\n     */\n    initBuffer(buffer)\n    {\n        for (let i = 0; i < buffer.length; i += this.nBufferInc) {\n            if (this.type < LED.TYPE.DIGIT) {\n                buffer[i] = LED.STATE.OFF;\n            } else {\n                buffer[i] = ' ';\n            }\n            buffer[i+1] = (this.colorOn == this.colorTransparent? null : this.colorOn);\n            buffer[i+2] = 0;\n            buffer[i+3] = LED.FLAGS.MODIFIED;\n        }\n    }\n\n    /**\n     * loadState(state)\n     *\n     * If any saved values don't match (possibly overridden), abandon the given state and return false.\n     *\n     * @this {LED}\n     * @param {Array} state\n     * @returns {boolean}\n     */\n    loadState(state)\n    {\n        let colorOn = state.shift();\n        let colorBackground = state.shift();\n        let buffer = state.shift();\n        if (colorOn == this.colorOn && colorBackground == this.colorBackground && buffer && buffer.length == this.buffer.length) {\n            this.buffer = buffer;\n            /*\n             * Loop over all the buffer colors to fix a legacy problem (ie, before we started storing null for colorTransparent)\n             */\n            for (let i = 0; i <= this.buffer.length - this.nBufferInc; i += this.nBufferInc) {\n                if (this.buffer[i+1] == this.colorTransparent) this.buffer[i+1] = null;\n            }\n            this.drawBuffer(true);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * parseRGBValues(color, rgb)\n     *\n     * @this {LED}\n     * @param {string} color\n     * @param {Array.<number>} rgb\n     * @returns {boolean}\n     */\n    parseRGBValues(color, rgb)\n    {\n        let base = 16;\n        let match = color.match(/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i);\n        if (!match) {\n            base = 10;\n            match = color.match(/^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,?\\s*(\\d+|)\\)$/i);\n        }\n        if (match) {\n            let i;\n            for (i = 1; i < match.length; i++) {\n                rgb[i-1] = Number.parseInt(match[i], base);\n            }\n            rgb.length = i-1;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * saveState(state)\n     *\n     * @this {LED}\n     * @param {Array} state\n     */\n    saveState(state)\n    {\n        if (this.buffer) {\n            state.push(this.colorOn);\n            state.push(this.colorBackground);\n            state.push(this.buffer);\n        }\n    }\n\n    /**\n     * setContainerStyle(sAttr, sValue)\n     * \n     * @this {LED}\n     * @param {string} sAttr \n     * @param {string} sValue \n     */\n    setContainerStyle(sAttr, sValue)\n    {\n        if (this.container) this.container.style[sAttr] = sValue;\n    }\n    \n    /**\n     * setLEDColor(col, row, color)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {string} [color]\n     * @returns {boolean|null} (true if this call modified the LED color, false if not, null if error)\n     */\n    setLEDColor(col, row, color)\n    {\n        let fModified = null;\n        if (row >= 0 && row < this.rows && col >= 0 && col < this.cols) {\n            fModified = false;\n            let colorNew = color || this.colorOn;\n            if (colorNew == this.colorTransparent) colorNew = null;\n            let i = (row * this.cols + col) * this.nBufferInc;\n            if (this.buffer[i+1] !== colorNew) {\n                this.buffer[i+1] = colorNew;\n                if (!colorNew) this.buffer[i] = LED.STATE.OFF;  // transparent LEDs are automatically turned off\n                this.buffer[i+3] |= LED.FLAGS.MODIFIED;\n                this.fBufferModified = fModified = true;\n            }\n            this.iBufferRecent = i;\n            this.fTickled = true;\n        }\n        return fModified;\n    }\n\n    /**\n     * setLEDCounts(col, row, counts)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {Array.<number>} counts\n     * @returns {boolean|null} (true if this call modified the LED color, false if not, null if error)\n     */\n    setLEDCounts(col, row, counts)\n    {\n        let fModified = null;\n        if (row >= 0 && row < this.rows && col >= 0 && col < this.cols) {\n            fModified = false;\n            let i = (row * this.cols + col) * this.nBufferInc;\n            let bits = 0;\n            if (this.buffer[i+1]) {                             // only non-transparent LEDs are allowed to set counters\n                for (let c = 0; c < counts.length; c++) {\n                    bits = (bits << 4) | (counts[c] & 0xf);\n                }\n            }\n            if (this.buffer[i+2] !== bits) {\n                this.buffer[i+2] = bits;\n                this.buffer[i+3] |= LED.FLAGS.MODIFIED;\n                this.fBufferModified = fModified = true;\n            }\n            this.iBufferRecent = i;\n            this.fTickled = true;\n        }\n        return fModified;\n    }\n\n    /**\n     * setLEDCountsPacked(col, row, counts)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {number} counts\n     * @returns {boolean|null} (true if this call modified the LED state, false if not, null if error)\n     */\n    setLEDCountsPacked(col, row, counts)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        if (i <= this.buffer.length - this.nBufferInc) {\n            if (this.buffer[i+2] != counts) {\n                this.buffer[i+2] = counts;\n                return true;\n            }\n            return false;\n        }\n        return null;\n    }\n\n    /**\n     * setLEDState(col, row, state, flags)\n     *\n     * For LED.TYPE.ROUND or LED.TYPE.SQUARE, the state parameter should be LED.STATE.OFF or LED.STATE.ON.\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {string|number} state (new state for the specified cell)\n     * @param {number} [flags] (may only be zero or more of the bits in LED.FLAGS.SET)\n     * @returns {boolean|null} (true if this call modified the LED state, false if not, null if error)\n     */\n    setLEDState(col, row, state, flags = 0)\n    {\n        let fModified = null;\n\n        if (row >= 0 && row < this.rows && col >= 0 && col < this.cols) {\n            fModified = false;\n            let i = (row * this.cols + col) * this.nBufferInc;\n            if (this.buffer[i] !== state || (this.buffer[i+3] & LED.FLAGS.SET) !== flags) {\n                this.buffer[i] = state;\n                this.buffer[i+3] = (this.buffer[i+3] & ~LED.FLAGS.SET) | flags | LED.FLAGS.MODIFIED;\n                this.fBufferModified = fModified = true;\n            }\n            this.iBufferRecent = i;\n            this.fTickled = true;\n        }\n        return fModified;\n    }\n\n    /**\n     * swapBuffers()\n     *\n     * @this {LED}\n     */\n    swapBuffers()\n    {\n        let buffer = this.buffer;\n        this.buffer = this.bufferClone;\n        this.bufferClone = buffer;\n        this.fBufferModified = true;\n    }\n}\n\nLED.TYPE = {\n    ROUND:      1,      // a single (round) LED\n    SQUARE:     2,      // a single (square) LED\n    DIGIT:      3       // a 7-segment (digit) LED, with a period as an 8th segment\n};\n\nLED.BINDING = {\n    CONTAINER:  \"container\"\n};\n\nLED.COLORS = {\n    \"aliceblue\":            \"#f0f8ff\",\n    \"antiquewhite\":         \"#faebd7\",\n    \"aqua\":                 \"#00ffff\",\n    \"aquamarine\":           \"#7fffd4\",\n    \"azure\":                \"#f0ffff\",\n    \"beige\":                \"#f5f5dc\",\n    \"bisque\":               \"#ffe4c4\",\n    \"black\":                \"#000000\",\n    \"blanchedalmond\":       \"#ffebcd\",\n    \"blue\":                 \"#0000ff\",\n    \"blueviolet\":           \"#8a2be2\",\n    \"brown\":                \"#a52a2a\",\n    \"burlywood\":            \"#deb887\",\n    \"cadetblue\":            \"#5f9ea0\",\n    \"chartreuse\":           \"#7fff00\",\n    \"chocolate\":            \"#d2691e\",\n    \"coral\":                \"#ff7f50\",\n    \"cornflowerblue\":       \"#6495ed\",\n    \"cornsilk\":             \"#fff8dc\",\n    \"crimson\":              \"#dc143c\",\n    \"cyan\":                 \"#00ffff\",\n    \"darkblue\":             \"#00008b\",\n    \"darkcyan\":             \"#008b8b\",\n    \"darkgoldenrod\":        \"#b8860b\",\n    \"darkgray\":             \"#a9a9a9\",\n    \"darkgreen\":            \"#006400\",\n    \"darkkhaki\":            \"#bdb76b\",\n    \"darkmagenta\":          \"#8b008b\",\n    \"darkolivegreen\":       \"#556b2f\",\n    \"darkorange\":           \"#ff8c00\",\n    \"darkorchid\":           \"#9932cc\",\n    \"darkred\":              \"#8b0000\",\n    \"darksalmon\":           \"#e9967a\",\n    \"darkseagreen\":         \"#8fbc8f\",\n    \"darkslateblue\":        \"#483d8b\",\n    \"darkslategray\":        \"#2f4f4f\",\n    \"darkturquoise\":        \"#00ced1\",\n    \"darkviolet\":           \"#9400d3\",\n    \"deeppink\":             \"#ff1493\",\n    \"deepskyblue\":          \"#00bfff\",\n    \"dimgray\":              \"#696969\",\n    \"dodgerblue\":           \"#1e90ff\",\n    \"firebrick\":            \"#b22222\",\n    \"floralwhite\":          \"#fffaf0\",\n    \"forestgreen\":          \"#228b22\",\n    \"fuchsia\":              \"#ff00ff\",\n    \"gainsboro\":            \"#dcdcdc\",\n    \"ghostwhite\":           \"#f8f8ff\",\n    \"gold\":                 \"#ffd700\",\n    \"goldenrod\":            \"#daa520\",\n    \"gray\":                 \"#808080\",\n    \"green\":                \"#008000\",\n    \"greenyellow\":          \"#adff2f\",\n    \"honeydew\":             \"#f0fff0\",\n    \"hotpink\":              \"#ff69b4\",\n    \"indianred \":           \"#cd5c5c\",\n    \"indigo\":               \"#4b0082\",\n    \"ivory\":                \"#fffff0\",\n    \"khaki\":                \"#f0e68c\",\n    \"lavender\":             \"#e6e6fa\",\n    \"lavenderblush\":        \"#fff0f5\",\n    \"lawngreen\":            \"#7cfc00\",\n    \"lemonchiffon\":         \"#fffacd\",\n    \"lightblue\":            \"#add8e6\",\n    \"lightcoral\":           \"#f08080\",\n    \"lightcyan\":            \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgrey\":            \"#d3d3d3\",\n    \"lightgreen\":           \"#90ee90\",\n    \"lightpink\":            \"#ffb6c1\",\n    \"lightsalmon\":          \"#ffa07a\",\n    \"lightseagreen\":        \"#20b2aa\",\n    \"lightskyblue\":         \"#87cefa\",\n    \"lightslategray\":       \"#778899\",\n    \"lightsteelblue\":       \"#b0c4de\",\n    \"lightyellow\":          \"#ffffe0\",\n    \"lime\":                 \"#00ff00\",\n    \"limegreen\":            \"#32cd32\",\n    \"linen\":                \"#faf0e6\",\n    \"magenta\":              \"#ff00ff\",\n    \"maroon\":               \"#800000\",\n    \"mediumaquamarine\":     \"#66cdaa\",\n    \"mediumblue\":           \"#0000cd\",\n    \"mediumorchid\":         \"#ba55d3\",\n    \"mediumpurple\":         \"#9370d8\",\n    \"mediumseagreen\":       \"#3cb371\",\n    \"mediumslateblue\":      \"#7b68ee\",\n    \"mediumspringgreen\":    \"#00fa9a\",\n    \"mediumturquoise\":      \"#48d1cc\",\n    \"mediumvioletred\":      \"#c71585\",\n    \"midnightblue\":         \"#191970\",\n    \"mintcream\":            \"#f5fffa\",\n    \"mistyrose\":            \"#ffe4e1\",\n    \"moccasin\":             \"#ffe4b5\",\n    \"navajowhite\":          \"#ffdead\",\n    \"navy\":                 \"#000080\",\n    \"oldlace\":              \"#fdf5e6\",\n    \"olive\":                \"#808000\",\n    \"olivedrab\":            \"#6b8e23\",\n    \"orange\":               \"#ffa500\",\n    \"orangered\":            \"#ff4500\",\n    \"orchid\":               \"#da70d6\",\n    \"palegoldenrod\":        \"#eee8aa\",\n    \"palegreen\":            \"#98fb98\",\n    \"paleturquoise\":        \"#afeeee\",\n    \"palevioletred\":        \"#d87093\",\n    \"papayawhip\":           \"#ffefd5\",\n    \"peachpuff\":            \"#ffdab9\",\n    \"peru\":                 \"#cd853f\",\n    \"pink\":                 \"#ffc0cb\",\n    \"plum\":                 \"#dda0dd\",\n    \"powderblue\":           \"#b0e0e6\",\n    \"purple\":               \"#800080\",\n    \"rebeccapurple\":        \"#663399\",\n    \"red\":                  \"#ff0000\",\n    \"rosybrown\":            \"#bc8f8f\",\n    \"royalblue\":            \"#4169e1\",\n    \"saddlebrown\":          \"#8b4513\",\n    \"salmon\":               \"#fa8072\",\n    \"sandybrown\":           \"#f4a460\",\n    \"seagreen\":             \"#2e8b57\",\n    \"seashell\":             \"#fff5ee\",\n    \"sienna\":               \"#a0522d\",\n    \"silver\":               \"#c0c0c0\",\n    \"skyblue\":              \"#87ceeb\",\n    \"slateblue\":            \"#6a5acd\",\n    \"slategray\":            \"#708090\",\n    \"snow\":                 \"#fffafa\",\n    \"springgreen\":          \"#00ff7f\",\n    \"steelblue\":            \"#4682b4\",\n    \"tan\":                  \"#d2b48c\",\n    \"teal\":                 \"#008080\",\n    \"thistle\":              \"#d8bfd8\",\n    \"tomato\":               \"#ff6347\",\n    \"turquoise\":            \"#40e0d0\",\n    \"violet\":               \"#ee82ee\",\n    \"wheat\":                \"#f5deb3\",\n    \"white\":                \"#ffffff\",\n    \"whitesmoke\":           \"#f5f5f5\",\n    \"yellow\":               \"#ffff00\",\n    \"yellowgreen\":          \"#9acd32\"\n};\n\nLED.STATE = {\n    OFF:        0,\n    ON:         1\n};\n\nLED.FLAGS = {\n    NONE:       0x00,\n    SET:        0x81,\n    PERIOD:     0x01,\n    MODIFIED:   0x80,\n};\n\nLED.SHAPES = {\n    [LED.TYPE.ROUND]:   [16, 16, 14],\n    [LED.TYPE.SQUARE]:  [2, 2, 28, 28]\n};\n\nLED.SIZES = [\n    [],\n    [32,  32],          // LED.TYPE.ROUND\n    [32,  32],          // LED.TYPE.SQUARE\n    [96, 128]           // LED.TYPE.DIGIT\n];\n\n/*\n * The segments are arranged roughly as follows in a 96x128 grid:\n *\n *      AAAA\n *     F    B\n *     F    B\n *      GGGG\n *     E    C\n *     E    C\n *      DDDD P\n *\n * The following arrays specify pairs of moveTo()/lineTo() coordinates, used by drawGridSegment().  They all\n * assume the hard-coded width and height in LED.SIZES[LED.TYPE.DIGIT] specified above.  If there is a triplet\n * instead of one or more pairs (eg, the 'P' or period segment), then the coordinates are treated as arc()\n * parameters.\n */\nLED.SEGMENT = {\n    'A':        [30,   8,  79,   8,  67,  19,  37,  19],\n    'B':        [83,  10,  77,  52,  67,  46,  70,  22],\n    'C':        [77,  59,  71, 100,  61,  89,  64,  64],\n    'D':        [28,  91,  58,  91,  69, 104,  15, 104],\n    'E':        [18,  59,  28,  64,  25,  88,  12, 100],\n    'F':        [24,  10,  34,  21,  31,  47,  18,  52],\n    'G':        [24,  56,  34,  50,  60,  50,  71,  56,  61,  61,  33,  61],\n    'P':        [80, 102,  8]\n};\n\n/*\n * Symbols are formed with the following segments.\n */\nLED.SYMBOLS = {\n    ' ':        [],\n    '0':        ['A','B','C','D','E','F'],\n    '1':        ['B','C'],\n    '2':        ['A','B','D','E','G'],\n    '3':        ['A','B','C','D','G'],\n    '4':        ['B','C','F','G'],\n    '5':        ['A','C','D','F','G'],\n    '6':        ['A','C','D','E','F','G'],\n    '7':        ['A','B','C'],\n    '8':        ['A','B','C','D','E','F','G'],\n    '9':        ['A','B','C','D','F','G'],\n    '-':        ['G'],\n    'E':        ['A','D','E','F','G'],\n    '.':        ['P']\n};\n\nLED.VERSION     = 1.10;\n\n/**\n * @copyright http://pcjs.org/modules/devices/rom.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), wordSize: number, valueSize: number, valueTotal: number, littleEndian: boolean, file: string, reference: string, chipID: string, revision: (number|undefined), colorROM: (string|undefined), backgroundColorROM: (string|undefined), values: Array.<number> }} */\nvar ROMConfig;\n\n/**\n * @class {ROM}\n * @unrestricted\n * @property {ROMConfig} config\n * @property {Array.<number>} data\n * @property {number} addrMask\n */\nclass ROM extends Device {\n    /**\n     * ROM(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"rom\": {\n     *        \"class\": \"ROM\",\n     *        \"wordSize\": 13,\n     *        \"valueSize\": 16,\n     *        \"valueTotal\": 2048,\n     *        \"littleEndian\": true,\n     *        \"file\": \"ti57le.bin\",\n     *        \"reference\": \"\",\n     *        \"chipID\": \"TMC1501NC DI 7741\",\n     *        \"revision\": \"0\",\n     *        \"bindings\": {\n     *          \"array\": \"romArrayTI57\",\n     *          \"cellDesc\": \"romCellTI57\"\n     *        },\n     *        \"overrides\": [\"colorROM\",\"backgroundColorROM\"],\n     *        \"values\": [\n     *          ...\n     *        ]\n     *      }\n     *\n     * @this {ROM}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {ROMConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, ROM.VERSION, config);\n\n        this.data = config['values'];\n\n        /*\n         * This addrMask calculation assumes that the data array length is a power-of-two (which we assert).\n         */\n        this.addrMask = this.data.length - 1;\n\n\n        /*\n         * If an \"array\" binding has been supplied, then create an LED array sufficiently large to represent the\n         * entire ROM.  If the power-of-two is odd, then we will favor a slightly wider array over a taller one,\n         * by virtue of using Math.ceil() for cols and Math.floor() for rows.\n         */\n        if (this.bindings[ROM.BINDING.ARRAY]) {\n            let rom = this;\n            let addrLines = Math.log2(this.data.length) / 2;\n            this.cols = Math.pow(2, Math.ceil(addrLines));\n            this.rows = Math.pow(2, Math.floor(addrLines));\n            let configLEDs = {\n                \"class\":            \"LED\",\n                \"bindings\":         {\"container\": this.getBindingID(ROM.BINDING.ARRAY)},\n                \"type\":             LED.TYPE.ROUND,\n                \"cols\":             this.cols,\n                \"rows\":             this.rows,\n                \"color\":            config['colorROM'] || \"green\",\n                \"backgroundColor\":  config['backgroundColorROM'] || \"black\",\n                \"persistent\":       true\n            };\n            this.ledArray = new LED(idMachine, idDevice + \"LEDs\", configLEDs);\n            this.clearArray();\n            let configInput = {\n                \"class\":        \"Input\",\n                \"location\":     [0, 0, this.ledArray.widthView, this.ledArray.heightView, this.cols, this.rows],\n                \"bindings\":     {\"surface\": this.getBindingID(ROM.BINDING.ARRAY)}\n            };\n            this.ledInput = new Input(idMachine, idDevice + \"Input\", configInput);\n            this.sCellDesc = this.getBindingText(ROM.BINDING.CELLDESC);\n            this.ledInput.addHover(function onROMHover(col, row) {\n                if (rom.chip) {\n                    let sDesc = rom.sCellDesc;\n                    if (col >= 0 && row >= 0) {\n                        let addr = row * rom.cols + col;\n\n                        let opCode = rom.data[addr];\n                        sDesc = rom.chip.disassemble(opCode, addr);\n                    }\n                    rom.setBindingText(ROM.BINDING.CELLDESC, sDesc);\n                }\n            });\n        }\n    }\n\n    /**\n     * clearArray()\n     *\n     * clearBuffer(true) performs a combination of clearBuffer() and drawBuffer().\n     *\n     * @this {ROM}\n     */\n    clearArray()\n    {\n        if (this.ledArray) this.ledArray.clearBuffer(true);\n    }\n\n    /**\n     * drawArray()\n     *\n     * This performs a simple drawBuffer(); intended for synchronous updates (eg, step operations);\n     * otherwise, you should allow the LED object's async animation handler take care of drawing updates.\n     *\n     * @this {ROM}\n     */\n    drawArray()\n    {\n        if (this.ledArray) this.ledArray.drawBuffer();\n    }\n\n    /**\n     * getData(addr, fInternal)\n     *\n     * Set fInternal to true if an internal caller (eg, the disassembler) is accessing the ROM, to avoid touching\n     * the ledArray.\n     *\n     * @this {ROM}\n     * @param {number} addr\n     * @param {boolean} [fInternal]\n     * @returns {number|undefined}\n     */\n    getData(addr, fInternal)\n    {\n        if (this.ledArray && !fInternal) {\n            this.ledArray.setLEDState(addr % this.cols, (addr / this.cols)|0, LED.STATE.ON, LED.FLAGS.MODIFIED);\n        }\n        return this.data[addr];\n    }\n\n    /**\n     * loadState(state)\n     *\n     * If any saved values don't match (presumably overridden), abandon the given state and return false.\n     * \n     * @this {ROM}\n     * @param {Array} state\n     * @returns {boolean}\n     */\n    loadState(state)\n    {\n        let buffer = state.shift();\n        if (buffer && this.ledArray) {\n\n            if (this.ledArray.buffer.length == buffer.length) {\n                this.ledArray.buffer = buffer;\n                this.ledArray.drawBuffer(true);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * saveState(state)\n     *\n     * @this {ROM}\n     * @param {Array} state\n     */\n    saveState(state)\n    {\n        if (this.ledArray) {\n            state.push(this.ledArray.buffer);\n        }\n    }\n\n    /**\n     * setChip()\n     *\n     * @this {ROM}\n     * @param {Chip} chip\n     */\n    setChip(chip)\n    {\n        this.chip = chip;\n    }\n}\n\nROM.BINDING = {\n    ARRAY:      \"array\",\n    CELLDESC:   \"cellDesc\"\n};\n\nROM.VERSION     = 1.10;\n\n/**\n * @copyright http://pcjs.org/modules/devices/time.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ id: string, callBack: function(), msAuto: number, nCyclesLeft: number }} */\nvar Timer;\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), cyclesMinimum: (number|undefined), cyclesMaximum: (number|undefined), cyclesPerSecond: (number|undefined), yieldsPerSecond: (number|undefined), yieldsPerUpdate: (number|undefined), requestAnimationFrame: (boolean|undefined) }} */\nvar TimeConfig;\n\n/**\n * @class {Time}\n * @unrestricted\n * @property {TimeConfig} config\n * @property {number} nCyclesMinimum\n * @property {number} nCyclesMaximum\n * @property {number} nCyclesPerSecond\n * @property {number} nYieldsPerSecond\n * @property {number} nYieldsPerUpdate\n */\nclass Time extends Device {\n    /**\n     * Time(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"clock\": {\n     *        \"class\": \"Time\",\n     *        \"cyclesPerSecond\": 650000,\n     *        \"bindings\": {\n     *          \"run\": \"runTI57\",\n     *          \"speed\": \"speedTI57\",\n     *          \"step\": \"stepTI57\"\n     *        },\n     *        \"overrides\": [\"cyclesPerSecond\",\"yieldsPerSecond\",\"yieldsPerUpdate\"]\n     *      }\n     *\n     * @this {Time}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {TimeConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, Time.VERSION, config);\n\n        /*\n         * NOTE: The default speed of 650,000Hz (0.65Mhz) was a crude approximation based on real world TI-57\n         * device timings.  I had originally assumed the speed as 1,600,000Hz (1.6Mhz), based on timing information\n         * in TI's patents, but in hindsight, that speed seems rather high for a mid-1970's device, and reality\n         * suggests it was much lower.  The TMS-1500 does burn through a lot of cycles (minimum of 128) per instruction,\n         * but either that cycle burn was much higher, or the underlying clock speed was much lower.  I assume the latter.\n         */\n        this.nCyclesMinimum = this.config['cyclesMinimum'] || 100000;\n        this.nCyclesMaximum = this.config['cyclesMaximum'] || 3000000;\n        this.nCyclesPerSecond = this.getBounded(this.config['cyclesPerSecond'] || 650000, this.nCyclesMinimum, this.nCyclesMaximum);\n        this.nYieldsPerSecond = this.getBounded(this.config['yieldsPerSecond'] || Time.YIELDS_PER_SECOND, 30, 120);\n        this.nYieldsPerUpdate = this.getBounded(this.config['yieldsPerUpdate'] || Time.YIELDS_PER_UPDATE, 1, this.nYieldsPerSecond);\n\n        this.fRequestAnimationFrame = this.config['requestAnimationFrame'];\n        if (this.fRequestAnimationFrame === undefined) this.fRequestAnimationFrame = true;\n\n        this.nBaseMultiplier = this.nCurrentMultiplier = this.nTargetMultiplier = 1;\n        this.mhzBase = (this.nCyclesPerSecond / 10000) / 100;\n        this.mhzCurrent = this.mhzTarget = this.mhzBase * this.nTargetMultiplier;\n        this.nYields = 0;\n        this.msYield = Math.round(1000 / this.nYieldsPerSecond);\n        this.aAnimators = [];\n        this.aClockers = [];\n        this.aTimers = [];\n        this.aUpdaters = [];\n        this.fRunning = this.fYield = this.fThrottling = false;\n        this.nStepping = 0;\n        this.idRunTimeout = this.idStepTimeout = 0;\n        this.onRunTimeout = this.run.bind(this);\n        this.onAnimationFrame = this.animate.bind(this);\n        this.requestAnimationFrame = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.setTimeout).bind(window);\n\n        let time = this;\n        this.timerYield = this.addTimer(\"timerYield\", function onYield() {\n            time.onYield();\n        }, this.msYield);\n\n        this.resetSpeed();\n    }\n\n    /**\n     * addAnimator(callBack)\n     *\n     * Animators are functions that used to be called with YIELDS_PER_SECOND frequency, when animate()\n     * was called on every onYield() call, but now we rely on requestAnimationFrame(), so the frequency\n     * is browser-dependent (but presumably at least 60Hz).\n     *\n     * @this {Time}\n     * @param {function()} callBack\n     */\n    addAnimator(callBack)\n    {\n        this.aAnimators.push(callBack);\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Time}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let time = this;\n\n        switch(binding) {\n\n        case Time.BINDING.RUN:\n            element.onclick = function onClickRun() {\n                time.onRun();\n            };\n            break;\n\n        case Time.BINDING.STEP:\n            element.onclick = function onClickStep() {\n                time.onStep();\n            };\n            break;\n\n        case Time.BINDING.THROTTLE:\n            let elementInput = /** @type {HTMLInputElement} */ (element);\n            elementInput.addEventListener(\"mousedown\", function onThrottleStart() {\n                time.fThrottling = true;\n            });\n            elementInput.addEventListener(\"mouseup\", function onThrottleStop() {\n                time.setSpeedThrottle();\n                time.fThrottling = false;\n            });\n            elementInput.addEventListener(\"mousemove\", function onThrottleChange() {\n                if (time.fThrottling) {\n                    time.setSpeedThrottle();\n                }\n            });\n            elementInput.addEventListener(\"change\", function onThrottleChange() {\n                time.fThrottling = true;\n                time.setSpeedThrottle();\n                time.fThrottling = false;\n            });\n            break;\n        }\n        super.addBinding(binding, element);\n    }\n\n    /**\n     * addClocker(callBack)\n     *\n     * Adds a clocker function that's called from doBurst() to process a specified number of cycles.\n     *\n     * @this {Time}\n     * @param {function(number)} callBack\n     */\n    addClocker(callBack)\n    {\n        this.aClockers.push(callBack);\n    }\n\n    /**\n     * addTimer(id, callBack, msAuto)\n     *\n     * Devices that want to have timers that fire after some number of milliseconds call addTimer() to create\n     * the timer, and then setTimer() when they want to arm it.  Alternatively, they can specify an automatic\n     * timeout value (in milliseconds) to have the timer fire automatically at regular intervals.  There is\n     * currently no removeTimer() because these are generally used for the entire lifetime of a device.\n     *\n     * A timer is initially dormant; dormant timers have a cycle count of -1 (although any negative number will\n     * suffice) and active timers have a non-negative cycle count.\n     *\n     * @this {Time}\n     * @param {string} id\n     * @param {function()} callBack\n     * @param {number} [msAuto] (if set, enables automatic setTimer calls)\n     * @returns {number} timer index (1-based)\n     */\n    addTimer(id, callBack, msAuto = -1)\n    {\n        let nCyclesLeft = -1;\n        let iTimer = this.aTimers.length + 1;\n        this.aTimers.push({id, callBack, msAuto, nCyclesLeft});\n        if (msAuto >= 0) this.setTimer(iTimer, msAuto);\n        return iTimer;\n    }\n\n    /**\n     * addUpdater(callBack)\n     *\n     * Adds a status update function that's called from updateStatus(), either as the result\n     * of periodic status updates from onYield(), single-step updates from step(), or transitional\n     * updates from start() and stop().\n     *\n     * @this {Time}\n     * @param {function(boolean)} callBack\n     */\n    addUpdater(callBack)\n    {\n        this.aUpdaters.push(callBack);\n    }\n\n    /**\n     * animate()\n     *\n     * This is the callback function we supply to requestAnimationFrame().  The callback has a single\n     * (DOMHighResTimeStamp) argument, which indicates the current time (returned from performance.now())\n     * for when requestAnimationFrame() starts to fire callbacks.\n     *\n     * See: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame\n     *\n     * @this {Time}\n     * @param {number} [t]\n     */\n    animate(t)\n    {\n        for (let i = 0; i < this.aAnimators.length; i++) {\n            this.aAnimators[i]();\n        }\n        if (this.fRunning && this.fRequestAnimationFrame) this.requestAnimationFrame(this.onAnimationFrame);\n    }\n\n    /**\n     * calcCycles()\n     *\n     * Calculate the maximum number of cycles we should attempt to process before the next yield.\n     *\n     * @this {Time}\n     */\n    calcCycles()\n    {\n        let nMultiplier = this.mhzCurrent / this.mhzBase;\n        if (!nMultiplier || nMultiplier > this.nTargetMultiplier) {\n            nMultiplier = this.nTargetMultiplier;\n        }\n        /*\n         * nCyclesPerYield is now allowed to be a fractional number, so that for machines configured\n         * to run at an extremely slow speed (eg, less than 60Hz), a fractional value here will signal\n         * to snapStop() that it should increase msYield to a proportionally higher value.\n         */\n        this.nCyclesPerYield = (this.nCyclesPerSecond / this.nYieldsPerSecond * nMultiplier);\n        this.nCurrentMultiplier = nMultiplier;\n    }\n\n    /**\n     * calcSpeed(nCycles, msElapsed)\n     *\n     * @this {Time}\n     * @param {number} nCycles\n     * @param {number} msElapsed\n     */\n    calcSpeed(nCycles, msElapsed)\n    {\n        if (msElapsed) {\n            this.mhzCurrent = (nCycles / (msElapsed * 10)) / 100;\n        }\n    }\n\n    /**\n     * doBurst(nCycles, fStep)\n     *\n     * @this {Time}\n     * @param {number} nCycles\n     * @param {boolean} [fStep]\n     * @returns {number} (number of cycles actually executed)\n     */\n    doBurst(nCycles, fStep)\n    {\n        this.nCyclesBurst = this.nCyclesRemain = nCycles;\n        if (!this.aClockers.length) {\n            this.nCyclesRemain = 0;\n            return this.nCyclesBurst;\n        }\n        let iClocker = 0;\n        while (this.nCyclesRemain > 0) {\n            if (iClocker < this.aClockers.length) {\n                nCycles = this.aClockers[iClocker++](fStep? 0 : nCycles) || 1;\n            } else {\n                iClocker = nCycles = 0;\n            }\n            this.nCyclesRemain -= nCycles;\n        }\n        return this.nCyclesBurst - this.nCyclesRemain;\n    }\n\n    /**\n     * doOutside(fn)\n     *\n     * Use this function to perform any work outside of normal time (eg, DOM updates),\n     * to prevent that work from disrupting our speed calculations.\n     *\n     * @this {Time}\n     * @param {function()} fn (should return true only if the function actually performed any work)\n     * @returns {boolean}\n     */\n    doOutside(fn)\n    {\n        let msStart = Date.now();\n        if (fn()) {\n            let msStop = Date.now();\n            this.msOutsideThisRun += msStop - msStart;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * endBurst(nCycles)\n     *\n     * @this {Time}\n     * @param {number} [nCycles]\n     * @returns {number} (number of cycles executed in burst)\n     */\n    endBurst(nCycles = this.nCyclesBurst - this.nCyclesRemain)\n    {\n        this.nCyclesBurst = this.nCyclesRemain = 0;\n        this.nCyclesThisRun += nCycles;\n        this.nCyclesRun += nCycles;\n        if (!this.fRunning) this.nCyclesRun = 0;\n        return nCycles;\n    }\n\n    /**\n     * getCycles(ms)\n     *\n     * If no time period is specified, this returns the current number of cycles per second.\n     *\n     * @this {Time}\n     * @param {number} ms (default is 1000)\n     * @returns {number} number of corresponding cycles\n     */\n    getCycles(ms = 1000)\n    {\n        return Math.ceil((this.nCyclesPerSecond * this.nCurrentMultiplier) / 1000 * ms);\n    }\n\n    /**\n     * getCyclesPerBurst()\n     *\n     * This tells us how many cycles to execute as a burst.\n     *\n     * @this {Time}\n     * @returns {number} (the maximum number of cycles we should execute in the next burst)\n     */\n    getCyclesPerBurst()\n    {\n        let nCycles = this.getCycles(this.msYield);\n        for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n            let timer = this.aTimers[iTimer-1];\n\n            if (timer.nCyclesLeft < 0) continue;\n            if (nCycles > timer.nCyclesLeft) {\n                nCycles = timer.nCyclesLeft;\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * getSpeed(mhz)\n     *\n     * @this {Time}\n     * @param {number} mhz\n     * @returns {string} the given speed, as a formatted string\n     */\n    getSpeed(mhz)\n    {\n        let s;\n        if (mhz >= 1) {\n            s = mhz.toFixed(2) + \"Mhz\";\n        } else {\n            let hz = Math.round(mhz * 1000000);\n            if (hz <= 999) {\n                s = hz + \"Hz\";\n            } else {\n                s = Math.ceil(hz / 1000) + \"Khz\";\n            }\n        }\n        return s;\n    }\n\n    /**\n     * getSpeedCurrent()\n     *\n     * @this {Time}\n     * @returns {string} the current speed, as a formatted string\n     */\n    getSpeedCurrent()\n    {\n        return (this.fRunning && this.mhzCurrent)? this.getSpeed(this.mhzCurrent) : \"Stopped\";\n    }\n\n    /**\n     * getSpeedTarget()\n     *\n     * @this {Time}\n     * @returns {string} the target speed, as a formatted string\n     */\n    getSpeedTarget()\n    {\n        return this.getSpeed(this.mhzTarget);\n    }\n\n    /**\n     * isRunning()\n     *\n     * @this {Time}\n     * @returns {boolean}\n     */\n    isRunning()\n    {\n        return this.fRunning;\n    }\n\n    /**\n     * isTimerSet(iTimer)\n     *\n     * NOTE: Even if the timer is armed, we return false if the clock is currently stopped;\n     * in that sense, perhaps this function should be named isTimerArmedAndWillItFireOnTime().\n     *\n     * @this {Time}\n     * @param {number} iTimer\n     * @returns {boolean}\n     */\n    isTimerSet(iTimer)\n    {\n        if (this.fRunning) {\n            if (iTimer > 0 && iTimer <= this.aTimers.length) {\n                let timer = this.aTimers[iTimer - 1];\n                return (timer.nCyclesLeft >= 0);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * onRun()\n     *\n     * This handles the \"run\" button, if any, attached to the Time device.\n     *\n     * Note that this serves a different purpose than the \"power\" button that's managed by the Input device,\n     * because toggling power also requires resetting the program counter prior to start() OR clearing the display\n     * after stop().  See the Chip's onPower() function for details.\n     *\n     * @this {Time}\n     */\n    onRun()\n    {\n        if (this.fRunning) {\n            this.stop();\n        } else {\n            this.start();\n        }\n    }\n\n    /**\n     * onStep(nRepeat)\n     *\n     * This handles the \"step\" button, if any, attached to the Time device.\n     *\n     * @this {Time}\n     * @param {number} [nRepeat]\n     */\n    onStep(nRepeat)\n    {\n        if (!this.fRunning) {\n            if (this.nStepping) {\n                this.stop();\n            } else {\n                this.step(nRepeat);\n            }\n        } else {\n            this.println(\"already running\");\n        }\n    }\n\n    /**\n     * onYield()\n     *\n     * @this {Time}\n     */\n    onYield()\n    {\n        this.fYield = true;\n        let nYields = this.nYields;\n        let nCyclesPerSecond = this.getCycles();\n        if (nCyclesPerSecond >= this.nYieldsPerSecond) {\n            this.nYields++;\n        } else {\n            /*\n             * Let's imagine that nCyclesPerSecond has dropped to 4, whereas the usual nYieldsPerSecond is 60;\n             * that's means we're yielding at 1/15th the usual rate, so to compensate, we want to bump nYields\n             * by 15 instead of 1.\n             */\n            this.nYields += Math.ceil(this.nYieldsPerSecond / nCyclesPerSecond);\n        }\n        if (this.nYields >= this.nYieldsPerUpdate && nYields < this.nYieldsPerUpdate) {\n            this.updateStatus();\n        }\n        if (this.nYields >= this.nYieldsPerSecond) {\n            this.nYields = 0;\n        }\n    }\n\n    /**\n     * resetSpeed()\n     *\n     * Resets speed and cycle information as part of any reset() or restore(); this typically occurs during powerUp().\n     * It's important that this be called BEFORE the actual restore() call, because restore() may want to call setSpeed(),\n     * which in turn assumes that all the cycle counts have been initialized to sensible values.\n     *\n     * @this {Time}\n     */\n    resetSpeed()\n    {\n        this.nCyclesRun = this.nCyclesBurst = this.nCyclesRemain = 0;\n        if (!this.setSpeedThrottle()) this.setSpeed(this.nBaseMultiplier);\n    }\n\n    /**\n     * resetTimers()\n     *\n     * When the target speed multiplier is altered, it's a good idea to run through all the timers that\n     * have a fixed millisecond period and re-arm them, because the timers are using cycle counts that were based\n     * on a previous multiplier.\n     *\n     * @this {Time}\n     */\n    resetTimers()\n    {\n        for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n            let timer = this.aTimers[iTimer-1];\n            if (timer.msAuto >= 0) this.setTimer(iTimer, timer.msAuto, true);\n        }\n    }\n\n    /**\n     * run()\n     *\n     * @this {Time}\n     */\n    run()\n    {\n        this.idRunTimeout = 0;\n        if (!this.fRunning) return;\n        this.snapStart();\n        try {\n            this.fYield = false;\n            do {\n                /*\n                 * Execute the burst and then update all timers.\n                 */\n                this.updateTimers(this.endBurst(this.doBurst(this.getCyclesPerBurst())));\n\n            } while (this.fRunning && !this.fYield);\n        }\n        catch(err) {\n            this.println(err.message);\n            this.stop();\n            return;\n        }\n        if (this.fRunning) {\n\n            this.idRunTimeout = setTimeout(this.onRunTimeout, this.snapStop());\n            if (!this.fRequestAnimationFrame) this.animate();\n        }\n    }\n\n    /**\n     * setSpeedThrottle()\n     *\n     * This handles speed adjustments requested by the throttling slider.\n     *\n     * @this {Time}\n     * @returns {boolean}\n     */\n    setSpeedThrottle()\n    {\n        /*\n         * We're not going to assume any direct relationship between the slider's min/max/value\n         * and our own nCyclesMinimum/nCyclesMaximum/nCyclesPerSecond.  We're just going to calculate\n         * a new target nCyclesPerSecond that is proportional, and then convert that to a speed multiplier.\n         */\n        let elementInput = this.bindings[Time.BINDING.THROTTLE];\n        if (elementInput) {\n            let ratio = (elementInput.value - elementInput.min) / (elementInput.max - elementInput.min);\n            let nCycles = Math.floor((this.nCyclesMaximum - this.nCyclesMinimum) * ratio + this.nCyclesMinimum);\n            let nMultiplier = nCycles / this.nCyclesPerSecond;\n\n            this.setSpeed(nMultiplier);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * setSpeed(nMultiplier)\n     *\n     * @this {Time}\n     * @param {number} [nMultiplier] is the new proposed multiplier (reverts to default if target was too high)\n     * @returns {boolean} true if successful, false if not\n     *\n     * @desc Whenever the speed is changed, the running cycle count and corresponding start time must be reset,\n     * so that the next effective speed calculation obtains sensible results.  In fact, when run() initially calls\n     * setSpeed() with no parameters, that's all this function does (it doesn't change the current speed setting).\n     */\n    setSpeed(nMultiplier)\n    {\n        let fSuccess = true;\n        if (nMultiplier !== undefined) {\n            /*\n             * If we haven't reached 90% (0.9) of the current target speed, revert to the default multiplier.\n             */\n            if (!this.fThrottling && this.mhzCurrent > 0 && this.mhzCurrent < this.mhzTarget * 0.9) {\n                nMultiplier = this.nBaseMultiplier;\n                fSuccess = false;\n            }\n            this.nTargetMultiplier = nMultiplier;\n            let mhzTarget = this.mhzBase * this.nTargetMultiplier;\n            if (this.mhzTarget != mhzTarget) {\n                this.mhzTarget = mhzTarget;\n                this.setBindingText(Time.BINDING.SPEED, this.getSpeedTarget());\n            }\n            /*\n             * After every yield, calcSpeed() will update mhzCurrent, but we also need to be optimistic\n             * and set it to the mhzTarget now, so that the next calcCycles() call will make a reasonable\n             * initial estimate.\n             */\n            this.mhzCurrent = this.mhzTarget;\n        }\n        this.nCyclesRun = 0;\n        this.msStartRun = this.msEndRun = 0;\n        this.calcCycles();      // calculate a new value for the current cycle multiplier\n        this.resetTimers();     // and then update all the fixed-period timers using the new cycle multiplier\n        return fSuccess;\n    }\n\n    /**\n     * setTimer(iTimer, ms, fReset)\n     *\n     * Using the timer index from a previous addTimer() call, this sets that timer to fire after the\n     * specified number of milliseconds.\n     *\n     * @this {Time}\n     * @param {number} iTimer\n     * @param {number} ms (converted into a cycle countdown internally)\n     * @param {boolean} [fReset] (true if the timer should be reset even if already armed)\n     * @returns {number} (number of cycles used to arm timer, or -1 if error)\n     */\n    setTimer(iTimer, ms, fReset)\n    {\n        let nCycles = -1;\n        if (iTimer > 0 && iTimer <= this.aTimers.length) {\n            let timer = this.aTimers[iTimer-1];\n            if (fReset || timer.nCyclesLeft < 0) {\n                nCycles = this.getCycles(ms);\n                /*\n                 * If we're currently executing a burst of cycles, the number of cycles it has executed in\n                 * that burst so far must NOT be charged against the cycle timeout we're about to set.  The simplest\n                 * way to resolve that is to immediately call endBurst() and bias the cycle timeout by the number\n                 * of cycles that the burst executed.\n                 */\n                if (this.fRunning) {\n                    nCycles += this.endBurst();\n                }\n                timer.nCyclesLeft = nCycles;\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * snapStart()\n     *\n     * @this {Time}\n     */\n    snapStart()\n    {\n        this.calcCycles();\n\n        this.nCyclesThisRun = 0;\n        this.msOutsideThisRun = 0;\n        this.msStartThisRun = Date.now();\n        if (!this.msStartRun) this.msStartRun = this.msStartThisRun;\n\n        /*\n         * Try to detect situations where the browser may have throttled us, such as when the user switches\n         * to a different tab; in those situations, Chrome and Safari may restrict setTimeout() callbacks\n         * to roughly one per second.\n         *\n         * Another scenario: the user resizes the browser window.  setTimeout() callbacks are not throttled,\n         * but there can still be enough of a lag between the callbacks that speed will be noticeably\n         * erratic if we don't compensate for it here.\n         *\n         * We can detect throttling/lagging by verifying that msEndRun (which was set at the end of the\n         * previous run and includes any requested sleep time) is comparable to the current msStartThisRun;\n         * if the delta is significant, we compensate by bumping msStartRun forward by that delta.\n         *\n         * This shouldn't be triggered when the Debugger stops time, because setSpeed() -- which is called\n         * whenever the time starts again -- zeroes msEndRun.\n         */\n        let msDelta = 0;\n        if (this.msEndRun) {\n            msDelta = this.msStartThisRun - this.msEndRun;\n            if (msDelta > this.msYield) {\n                this.msStartRun += msDelta;\n                /*\n                 * Bumping msStartRun forward should NEVER cause it to exceed msStartThisRun; however, just\n                 * in case, I make absolutely sure it cannot happen, since doing so could result in negative\n                 * speed calculations.\n                 */\n\n                if (this.msStartRun > this.msStartThisRun) {\n                    this.msStartRun = this.msStartThisRun;\n                }\n            }\n        }\n    }\n\n    /**\n     * snapStop()\n     *\n     * @this {Time}\n     * @returns {number}\n     */\n    snapStop()\n    {\n        this.msEndRun = Date.now();\n\n        if (this.msOutsideThisRun) {\n            this.msStartRun += this.msOutsideThisRun;\n            this.msStartThisRun += this.msOutsideThisRun;\n        }\n\n        let msYield = this.msYield;\n        if (this.nCyclesThisRun) {\n            /*\n             * Normally, we assume we executed a full quota of work over msYield.  If nCyclesThisRun is correct,\n             * then the ratio of nCyclesThisRun/nCyclesPerYield should represent the percentage of work we performed,\n             * and so applying that percentage to msYield should give us a better estimate of work vs. time.\n             */\n            msYield = Math.round(msYield * this.nCyclesThisRun / this.nCyclesPerYield);\n        }\n\n        let msElapsedThisRun = this.msEndRun - this.msStartThisRun;\n        let msRemainsThisRun = msYield - msElapsedThisRun;\n\n        let nCycles = this.nCyclesRun;\n        let msElapsed = this.msEndRun - this.msStartRun;\n\n        if (DEBUG && msRemainsThisRun < 0 && this.nTargetMultiplier > 1) {\n            this.println(\"warning: updates @\" + msElapsedThisRun + \"ms (prefer \" + Math.round(msYield) + \"ms)\");\n        }\n\n        this.calcSpeed(nCycles, msElapsed);\n\n        if (msRemainsThisRun < 0) {\n            /*\n             * Try \"throwing out\" the effects of large anomalies, by moving the overall run start time up;\n             * ordinarily, this should only happen when the someone is using an external Debugger or some other\n             * tool or feature that is interfering with our overall execution.\n             */\n            if (msRemainsThisRun < -1000) {\n                this.msStartRun -= msRemainsThisRun;\n            }\n            /*\n             * If the last burst took MORE time than we allotted (ie, it's taking more than 1 second to simulate\n             * nCyclesPerSecond), all we can do is yield for as little time as possible (ie, 0ms) and hope that the\n             * simulation is at least usable.\n             */\n            msRemainsThisRun = 0;\n        }\n        else if (this.mhzCurrent < this.mhzTarget) {\n            msRemainsThisRun = 0;\n        }\n\n        this.msEndRun += msRemainsThisRun;\n\n        if (this.isCategoryOn(Device.CATEGORY.TIME)) {\n            this.printf(\"after running %d cycles, resting for %dms\\n\", this.nCyclesThisRun, msRemainsThisRun);\n        }\n\n        return msRemainsThisRun;\n    }\n\n    /**\n     * start()\n     *\n     * @this {Time}\n     * @returns {boolean}\n     */\n    start()\n    {\n        if (this.fRunning || this.nStepping) {\n            return false;\n        }\n\n        if (this.idRunTimeout) {\n            clearTimeout(this.idRunTimeout);\n            this.idRunTimeout = 0;\n        }\n\n        this.fRunning = true;\n        this.msStartRun = this.msEndRun = 0;\n        this.updateStatus(true);\n\n        /*\n         * Kickstart both the clockers and requestAnimationFrame; it's a little premature to start\n         * animation here, because the first run() should take place before the first animate(), but\n         * since clock speed is now decoupled from animation speed, this isn't something we should\n         * worry about.\n         */\n\n        this.idRunTimeout = setTimeout(this.onRunTimeout, 0);\n        if (this.fRequestAnimationFrame) this.requestAnimationFrame(this.onAnimationFrame);\n        return true;\n    }\n\n    /**\n     * step(nRepeat)\n     *\n     * @this {Time}\n     * @param {number} [nRepeat]\n     * @returns {boolean} true if successful, false if already running\n     */\n    step(nRepeat = 1)\n    {\n        if (!this.fRunning) {\n            if (nRepeat && !this.nStepping) {\n                this.nStepping = nRepeat;\n            }\n            if (this.nStepping) {\n                /*\n                 * Execute a minimum-cycle burst and then update all timers.\n                 */\n                this.nStepping--;\n                this.updateTimers(this.endBurst(this.doBurst(1, true)));\n                this.updateStatus();\n                if (this.nStepping) {\n                    let time = this;\n                    this.idStepTimeout = setTimeout(function onStepTimeout() {\n                        time.step(0);\n                    }, 0);\n                    return true;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * stop()\n     *\n     * @this {Time}\n     * @returns {boolean} true if successful, false if already stopped\n     */\n    stop()\n    {\n        if (this.nStepping) {\n            this.nStepping = 0;\n            this.updateStatus(true);\n            return true;\n        }\n        if (this.fRunning) {\n            this.fRunning = false;\n            this.endBurst();\n            this.updateStatus(true);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * updateStatus(fTransition)\n     *\n     * Used for periodic status updates from onYield(), single-step updates from step(), and transitional\n     * updates from start() and stop().\n     *\n     * @this {Time}\n     * @param {boolean} [fTransition]\n     */\n    updateStatus(fTransition)\n    {\n        if (fTransition) {\n            if (this.fRunning) {\n                this.println(\"starting (target speed: \" + this.getSpeedTarget() + \")\");\n            } else {\n                this.println(\"stopping\");\n            }\n        }\n\n        this.setBindingText(Time.BINDING.RUN, this.fRunning? \"Halt\" : \"Run\");\n        this.setBindingText(Time.BINDING.STEP, this.nStepping? \"Stop\" : \"Step\");\n        if (!this.fThrottling) {\n            this.setBindingText(Time.BINDING.SPEED, this.getSpeedCurrent());\n        }\n\n        for (let i = 0; i < this.aUpdaters.length; i++) {\n            this.aUpdaters[i](fTransition);\n        }\n    }\n\n    /**\n     * updateTimers(nCycles)\n     *\n     * Used by run() to reduce all active timer countdown values by the number of cycles just executed;\n     * this is the function that actually \"fires\" any timer(s) whose countdown has reached (or dropped below)\n     * zero, invoking their callback function.\n     *\n     * @this {Time}\n     * @param {number} nCycles (number of cycles actually executed)\n     */\n    updateTimers(nCycles)\n    {\n        for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n            let timer = this.aTimers[iTimer-1];\n\n            if (timer.nCyclesLeft < 0) continue;\n            timer.nCyclesLeft -= nCycles;\n            if (timer.nCyclesLeft <= 0) {\n                timer.nCyclesLeft = -1; // zero is technically an \"active\" value, so ensure the timer is dormant now\n                timer.callBack();       // safe to invoke the callback function now\n                if (timer.msAuto >= 0) {\n                    this.setTimer(iTimer, timer.msAuto);\n                }\n            }\n        }\n    }\n}\n\nTime.BINDING = {\n    RUN:        \"run\",\n    SPEED:      \"speed\",\n    STEP:       \"step\",\n    THROTTLE:   \"throttle\"\n};\n\n/*\n * We yield more often now (120 times per second instead of 60), to help ensure that requestAnimationFrame()\n * callbacks can be called as timely as possible.  And we still only want to perform DOM-related status updates\n * no more than twice per second, so the required number of yields before each update has been increased as well.\n */\nTime.YIELDS_PER_SECOND = 120;\nTime.YIELDS_PER_UPDATE = 60;\n\nTime.VERSION    = 1.10;\n\n/**\n * @copyright http://pcjs.org/modules/devices/ledctrl.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), toggle: (boolean|undefined), wrap: (boolean|undefined), rule: (string|undefined), pattern: (string|undefined), patterns: (Object|undefined), colors: (Object|undefined) }} */\nvar LCConfig;\n\n/**\n * LED Controller Chip\n *\n * @class {Chip}\n * @unrestricted\n * @property {boolean} fToggle\n * @property {boolean} fWrap\n * @property {string} sRule\n * @property {string} sPattern\n * @property {LED} leds\n * @property {Object} colorPalette\n * @property {string} colorDefault (obtained from the leds)\n * @property {string} colorSelected (set by updateColorSelection())\n * @property {Array.<string>} colors\n */\nclass Chip extends Device {\n    /**\n     * Chip(idMachine, idDevice, config)\n     *\n     * @this {Chip}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {LCConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, Chip.VERSION, config);\n\n        /*\n         * The 'toggle' property is set to true for grids like the \"Game of Life\", where you normally\n         * just want to toggle a cell on or off; it's false for the \"Lite-Brite\" grid where we're dealing\n         * with LEDs of multiple colors.  I admit it's a kludgy distinction between grids with different\n         * UI requirements, but it's good enough to get the ball rolling.  We'll revisit the UI later.\n         */\n        this.fToggle = this.getDefault(this.config['toggle'], true);\n\n        /*\n         * These are grid \"behavior\" properties.  If 'wrap' is true, then any off-grid neighbor cell locations\n         * are mapped to the opposite edge; otherwise, they are mapped to the LEDs \"scratch\" row.\n         */\n        this.fWrap = this.getDefault(this.config['wrap'], false);\n        this.sRule = this.getDefault(this.config['rule'], \"B3/S23\");    // default rule (births require 3 neighbors, survivors require 2 or 3)\n        this.sPattern = this.getDefault(this.config['pattern'], \"\");\n\n        /*\n         * Since all bindings should have been completed by super(), we can make a preliminary call\n         * to getCounts() to determine how many counts are stored per LED, to preallocate a count buffer.\n         */\n        this.countBuffer = new Array(this.getCounts().length);\n\n        /*\n         * Get access to the LED device, so we can update its display.\n         */\n        let leds = /** @type {LED} */ (this.findDeviceByClass(Machine.CLASS.LED));\n        if (leds) {\n            this.leds = leds;\n\n            /*\n             * If loadPattern() didn't load anything into the LED array, then call\n             * clearBuffer(true), which performs a combination of clearBuffer() and drawBuffer().\n             */\n            if (!this.loadPattern()) leds.clearBuffer(true);\n\n            let configInput = {\n                \"class\":        \"Input\",\n                \"location\":     [0, 0, leds.widthView, leds.heightView, leds.cols, leds.rows],\n                \"drag\":         true,\n                \"hexagonal\":    leds.fHexagonal,\n                \"bindings\":     {\"surface\": leds.getBindingID(LED.BINDING.CONTAINER)}\n            };\n\n            let chip = this;\n            this.ledInput = new Input(idMachine, idDevice + \"Input\", configInput);\n            this.ledInput.addInput(function onLEDInput(col, row) {\n                chip.onInput(col, row);\n            });\n\n            this.colors = [];\n            this.colorDefault = leds.getDefaultColor();\n            this.updateColorSelection(this.colorDefault);\n            this.updateColorSwatches();\n            this.updateBackgroundImage(this.config[Chip.BINDING.IMAGE_SELECTION]);\n\n            /*\n             * Get access to the Input device, so we can add our click functions.\n             */\n            this.input = /** @type {Input} */ (this.findDeviceByClass(Machine.CLASS.INPUT));\n            this.input.addClick(this.onPower.bind(this), this.onReset.bind(this));\n\n            /*\n             * Get access to the Time device, so we can give it our clocker() function.\n             */\n            this.time = /** @type {Time} */ (this.findDeviceByClass(Machine.CLASS.TIME));\n            if (this.time) {\n                this.time.addClocker(this.clocker.bind(this));\n                this.time.addUpdater(this.updateStatus.bind(this));\n            }\n\n            /*\n             * The following set of properties are all debugger-related; see onCommand().\n             */\n            this.sCommandPrev = \"\";\n            this.addHandler(Device.HANDLER.COMMAND, this.onCommand.bind(this));\n        }\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Chip}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let chip = this;\n\n        switch(binding) {\n        case Chip.BINDING.COLOR_PALETTE:\n        case Chip.BINDING.COLOR_SELECTION:\n            element.onchange = function onSelectChange() {\n                chip.updateColorPalette(binding);\n            };\n            this.updateColorPalette();\n            break;\n\n        case Chip.BINDING.IMAGE_SELECTION:\n            element.onchange = function onImageChange() {\n                chip.updateBackgroundImage();\n            };\n            break;\n\n        case Chip.BINDING.PATTERN_SELECTION:\n            this.addBindingOptions(element, this.buildPatternOptions(this.config[Chip.BINDING.PATTERN_SELECTION]), false, this.config['pattern']);\n            element.onchange = function onPatternChange() {\n                chip.updatePattern();\n            };\n            break;\n\n        case Chip.BINDING.SAVE_TO_URL:\n            element.onclick = function onClickSave() {\n                let sPattern = chip.savePattern();\n                chip.println(sPattern);\n                let href = window.location.href;\n                if (href.indexOf('pattern=') >= 0) {\n                    href = href.replace(/(pattern=)[^&]*/, \"$1\" + sPattern.replace(/\\$/g, \"$$$$\"));\n                } else {\n                    href += ((href.indexOf('?') < 0)? '?' : '&') + \"pattern=\" + sPattern;\n                }\n                window.location = href;\n            };\n            break;\n\n        default:\n            if (binding.startsWith(Chip.BINDING.COLOR_SWATCH)) {\n                element.onclick = function onClickColorSwatch() {\n                    chip.updateColorSwatches(binding);\n                };\n                break;\n            }\n            /*\n             * This code allows you to bind a specific control (ie, a button) to a specific pattern;\n             * however, it's preferable to use the PATTERN_SELECTION binding above, and use a single list.\n             */\n            let patterns = this.config[Chip.BINDING.PATTERN_SELECTION];\n            if (patterns && patterns[binding]) {\n                element.onclick = function onClickPattern() {\n                    chip.loadPattern(binding);\n                };\n            }\n        }\n        super.addBinding(binding, element);\n    }\n\n    /**\n     * buildPatternOptions(patterns)\n     *\n     * @this {Chip}\n     * @param {Object} patterns\n     * @returns {Object}\n     */\n    buildPatternOptions(patterns)\n    {\n        let options = {};\n        for (let id in patterns) {\n            let name = id;\n            let lines = patterns[id];\n            for (let i = 0; i < lines.length; i++) {\n                if (lines[i].indexOf(\"#N\") == 0) {\n                    name = lines[i].substr(2).trim();\n                    break;\n                }\n            }\n            options[name] = id;\n        }\n        return options;\n    }\n\n    /**\n     * clocker(nCyclesTarget)\n     *\n     * @this {Chip}\n     * @param {number} nCyclesTarget (0 to single-step)\n     * @returns {number} (number of cycles actually \"clocked\")\n     */\n    clocker(nCyclesTarget = 0)\n    {\n        let nCyclesClocked = 0;\n        if (nCyclesTarget >= 0) {\n            let nAlive;\n            do {\n                switch(this.sRule) {\n                case \"C8\":\n                    nAlive = this.countCells();\n                    break;\n                default:\n                    nAlive = this.countNeighbors();\n                    break;\n                }\n                if (!nCyclesTarget) this.println(\"living cells: \" + nAlive);\n                nCyclesClocked += 1;\n            } while (nCyclesClocked < nCyclesTarget);\n        }\n        return nCyclesClocked;\n    }\n\n    /**\n     * countCells()\n     *\n     * @this {Chip}\n     * @returns {number}\n     */\n    countCells()\n    {\n        let cAlive = 0;\n        let leds = this.leds;\n        let nCols = leds.cols, nRows = leds.rows;\n        let counts = this.countBuffer;\n        for (let row = 0; row < nRows; row++) {\n            for (let col = 0; col < nCols; col++) {\n                if (!leds.getLEDCounts(col, row, counts)) continue;\n                cAlive++;\n                /*\n                 * Here's the layout of each cell's counts (which mirrors the Chip.COUNTS layout):\n                 *\n                 *      [0] is the \"working\" count\n                 *      [1] is the ON count\n                 *      [2] is the OFF count\n                 *      [3] is the color-cycle count\n                 *\n                 * Whenever the working count is zero, we examine the cell's state and advance it to\n                 * the next state: if it was ON, it goes to OFF (and the OFF count is loaded into\n                 * the working count); if it was OFF, then color-cycle count (if any) is applied, and\n                 * the state goes to ON (and the ON count is loaded).\n                 */\n                if (counts[0]) {\n                    counts[0]--;\n                }\n                else {\n                    let state = leds.getLEDState(col, row), stateNew = state || 0;\n                    switch(state) {\n                    case LED.STATE.ON:\n                        stateNew = LED.STATE.OFF;\n                        counts[0] = counts[2];\n                        if (counts[0]) {\n                            counts[0]--;\n                            break;\n                        }\n                        /* falls through */\n                    case LED.STATE.OFF:\n                        if (counts[3]) {\n                            let color = leds.getLEDColor(col, row);\n                            let iColor = this.colors.indexOf(color);\n                            if (iColor >= 0) {\n                                iColor = (iColor + counts[3]);\n                                while (iColor >= this.colors.length) iColor -= this.colors.length;\n                                leds.setLEDColor(col, row, this.colors[iColor]);\n                            }\n                        }\n                        stateNew = LED.STATE.ON;\n                        counts[0] = counts[1];\n                        if (counts[0]) {\n                            counts[0]--;\n                        }\n                        break;\n                    }\n                    if (stateNew !== state) leds.setLEDState(col, row, stateNew);\n                }\n                leds.setLEDCounts(col, row, counts);\n            }\n        }\n        return cAlive;\n    }\n\n    /**\n     * countNeighbors()\n     *\n     * This contains a straight-forward implementation of the Conway \"Game of Life\" rules (\"B3/S23\"),\n     * iterating row-by-row and column-by-column.  It takes advantage of the one-dimensional LED\n     * buffer layout to move through the entire grid with a \"master\" cell index (iCell) and corresponding\n     * indexes for all 8 \"neighboring\" cells (iNO, iNE, iEA, iSE, iSO, iSW, iWE, and iNW), incrementing\n     * them all in unison.\n     *\n     * The row and col variables are used only to detect when we are at the \"edges\" of the grid, and whether\n     * (depending on the wrap setting) any north, east, south, or west indexes that are now \"off the grid\"\n     * should be adjusted to the other side of the grid (or set to the dead \"scratch\" row at the end of the\n     * grid if wrap is disabled).  Similarly, when we leave an \"edge\", those same indexes must be restored\n     * to their normal positions, relative to the \"master\" index (iCell).\n     *\n     * The inline tests for whether iCell is at an edge are unavoidable, unless we break the logic up into\n     * 5 discrete steps: one for the rectangle just inside the edges, and then four for each of the north,\n     * east, south, and west edge strips.  But unless we really need that (presumably tiny) speed boost,\n     * I'm inclined to keep the logic simple.\n     *\n     * The logic is still a bit cluttered by the all the edge detection checks (and the wrap checks within\n     * each edge case), and perhaps I should have written two versions of this function (with and without wrap),\n     * but again, that would produce more repetition of the rest of the game logic, so I'm still inclined to\n     * leave it as-is.\n     *\n     * @this {Chip}\n     * @returns {number}\n     */\n    countNeighbors()\n    {\n        let cAlive = 0;\n        let buffer = this.leds.getBuffer();\n        let bufferClone = this.leds.getBufferClone();\n        let nCols = this.leds.cols;\n        let nRows = this.leds.rows;\n        /*\n         * The number of LED buffer elements per cell is an LED implementation detail that should not be\n         * assumed, so we obtain it from the LED object, and use it to calculate the per-cell increment,\n         * per-row increment, and per-grid increment; the latter gives us the offset of the LED buffer's\n         * scratch row, which we rely upon when wrap is turned off.\n         */\n        let nInc = this.leds.nBufferInc;\n        let nIncPerRow = nCols * nInc;\n        let nIncPerGrid = nRows * nIncPerRow;\n\n        let iCell = 0;\n        let iCellDummy = nIncPerGrid;\n        let iNO = iCell - nIncPerRow;\n        let iNW = iNO - nInc;\n        let iNE = iNO + nInc;\n        let iWE = iCell - nInc;\n        let iEA = iCell + nInc;\n        let iSO = iCell + nIncPerRow;\n        let iSW = iSO - nInc;\n        let iSE = iSO + nInc;\n\n        for (let row = 0; row < nRows; row++) {\n            if (!row) {                         // at top (north) edge; restore will be done after the col loop ends\n                if (!this.fWrap) {\n                    iNO = iNW = iNE = iCellDummy;\n                } else {\n                    iNO += nIncPerGrid; iNW += nIncPerGrid; iNE += nIncPerGrid;\n                }\n            } else if (row == nRows - 1) {      // at bottom (south) edge\n                if (!this.fWrap) {\n                    iSO = iSW = iSE = iCellDummy;\n                } else {\n                    iSO -= nIncPerGrid; iSW -= nIncPerGrid; iSE -= nIncPerGrid;\n                }\n            }\n            for (let col = 0; col < nCols; col++) {\n                if (!col) {                     // at left (west) edge\n                    if (!this.fWrap) {\n                        iWE = iNW = iSW = iCellDummy;\n                    } else {\n                        iWE += nIncPerRow; iNW += nIncPerRow; iSW += nIncPerRow;\n                    }\n                } else if (col == 1) {          // just finished left edge, restore west indexes\n                    if (!this.fWrap) {\n                        iWE = iCell - nInc; iNW = iNO - nInc; iSW = iSO - nInc;\n                    } else {\n                        iWE -= nIncPerRow; iNW -= nIncPerRow; iSW -= nIncPerRow;\n                    }\n                } else if (col == nCols - 1) {  // at right (east) edge; restore will be done after the col loop ends\n                    if (!this.fWrap) {\n                        iEA = iNE = iSE = iCellDummy;\n                    } else {\n                        iEA -= nIncPerRow; iNE -= nIncPerRow; iSE -= nIncPerRow;\n                    }\n                }\n                let state = buffer[iCell];\n                let nNeighbors = buffer[iNW]+buffer[iNO]+buffer[iNE]+buffer[iEA]+buffer[iSE]+buffer[iSO]+buffer[iSW]+buffer[iWE];\n\n                if (nNeighbors == 3) {\n                    state = LED.STATE.ON;\n                } else if (nNeighbors != 2) {\n                    state = LED.STATE.OFF;\n                }\n                bufferClone[iCell] = state;\n                bufferClone[iCell+1] = buffer[iCell+1];\n                bufferClone[iCell+2] = buffer[iCell+2];\n                bufferClone[iCell+3] = buffer[iCell+3] | ((buffer[iCell] !== state)? LED.FLAGS.MODIFIED : 0);\n                iCell += nInc; iNW += nInc; iNO += nInc; iNE += nInc; iEA += nInc; iSE += nInc; iSO += nInc; iSW += nInc; iWE += nInc;\n                if (state == LED.STATE.ON) cAlive++;\n            }\n            if (!this.fWrap) {\n                if (!row) {\n                    iNO = iCell - nIncPerRow; iNW = iNO - nInc; iNE = iNO + nInc;\n                }\n                iEA = iCell + nInc; iNE = iNO + nInc; iSE = iSO + nInc;\n            } else {\n                if (!row) {\n                    iNO -= nIncPerGrid; iNW -= nIncPerGrid; iNE -= nIncPerGrid;\n                }\n                iEA += nIncPerRow; iNE += nIncPerRow; iSE += nIncPerRow;\n            }\n        }\n\n        this.leds.swapBuffers();\n        return cAlive;\n    }\n\n    /**\n     * getCount(binding)\n     * \n     * @this {Chip}\n     * @param {string} binding \n     * @returns {number}\n     */\n    getCount(binding)\n    {\n        let count = 0;\n        let element = this.bindings[binding];\n        if (element && element.options) {\n            let option = element.options[element.selectedIndex];\n            count = option && +option.value || 0;\n        }\n        return count;\n    }\n    \n    /**\n     * getCounts()\n     *\n     * @this {Chip}\n     * @param {boolean} [fAdvance]\n     * @returns {Array.<number>}\n     */\n    getCounts(fAdvance)\n    {\n        let init = 0;\n        if (fAdvance) {\n            let element = this.bindings[Chip.BINDING.COUNT_INIT];\n            if (element && element.options) {\n                let option = element.options[element.selectedIndex];\n                if (option) {\n                    init = +option.value || 0;\n                    /*\n                     * A more regular pattern results if we stick to a range of counts equal to the\n                     * sum of the ON and OFF counts.  Let's get that sum now.  However, this assumes\n                     * that the user is starting with an initial count of ZERO.  Also, we're only going\n                     * to do this if the sum of ON and OFF counts is EVEN; if it's odd, then we'll let\n                     * the user do their thing.\n                     */\n                    element.selectedIndex++;\n                    let range = this.getCount(Chip.BINDING.COUNT_ON) + this.getCount(Chip.BINDING.COUNT_OFF);\n                    let fReset = (!(range & 1) && init == range - 1);\n                    if (fReset || element.selectedIndex < 0 || element.selectedIndex >= element.options.length) {\n                        element.selectedIndex = 0;\n                    }\n                }\n            }\n        }\n        let counts = [init];\n        for (let i = 1; i < Chip.COUNTS.length; i++) {\n            counts.push(this.getCount(Chip.COUNTS[i]));\n        }\n        return counts;\n    }\n\n    /**\n     * loadPattern(id)\n     *\n     * If no id is specified, we load the initialization pattern, if any, set via the LCConfig\n     * \"pattern\" property (which, in turn, can be set as URL override, if desired).\n     *\n     * NOTE: Our initialization pattern is a extended single-string version of the RLE pattern\n     * file format: \"col/row/width/height/tokens\".  The default rule is assumed.\n     *\n     * @this {Chip}\n     * @param {string} [id]\n     * @returns {boolean}\n     */\n    loadPattern(id)\n    {\n        let leds = this.leds;\n        let iCol = -1, iRow = -1, width, height, rule, sPattern = \"\";\n\n        if (!id) {\n            /*\n             * If no id is provided, then we fallback to sPattern, which can be either an\n             * id (if it doesn't start with a digit) or one of our own extended pattern strings.\n             */\n            if (!this.sPattern.match(/^[0-9]/)) id = /** @type {string} */ (this.sPattern);\n        }\n\n        if (!id) {\n            if (!this.sPattern) {\n                return false;\n            }\n            let i = 0;\n            let aParts = this.sPattern.split('/');\n            if (aParts.length == 5) {           // extended pattern string\n                iCol = +aParts[i++];\n                iRow = +aParts[i++];\n            }\n            if (aParts.length == 3 || aParts.length == 5) {\n                width = +aParts[i++];           // conventional pattern string\n                height = +aParts[i++];\n                sPattern = aParts[i];\n            }\n            else {\n                this.println(\"unrecognized pattern: \" + this.sPattern);\n                return false;\n            }\n            rule = this.sRule;  // TODO: If we ever support multiple rules, then allow rule overrides, too\n        }\n        else {\n            let patterns = this.config[Chip.BINDING.PATTERN_SELECTION];\n            let lines = patterns && patterns[id];\n            if (!lines) {\n                this.println(\"unknown pattern: \" + id);\n                return false;\n            }\n            this.println(\"loading pattern '\" + id + \"'\");\n            for (let i = 0, n = 0; i < lines.length; i++) {\n                let sLine = lines[i];\n                if (sLine[0] == '#') {\n                    this.println(sLine);\n                    continue;\n                }\n                if (!n++) {\n                    let match = sLine.match(/x\\s*=\\s*([0-9]+)\\s*,\\s*y\\s*=\\s*([0-9]+)\\s*(?:,\\s*rule\\s*=\\s*(\\S+)|)/i);\n                    if (!match) {\n                        this.println(\"unrecognized header line\");\n                        return false;\n                    }\n                    width = +match[1];\n                    height = +match[2];\n                    rule = match[3];\n                    continue;\n                }\n                let end = sLine.indexOf('!');\n                if (end >= 0) {\n                    sPattern += sLine.substr(0, end);\n                    break;\n                }\n                sPattern += sLine;\n            }\n        }\n\n        if (rule != this.sRule) {\n            this.println(\"unsupported rule: \" + rule);\n            return false;\n        }\n\n        if (iCol < 0) iCol = (leds.cols - width) >> 1;\n        if (iRow < 0) iRow = (leds.rows - height) >> 1;\n\n        if (iCol < 0 || iCol + width > leds.cols || iRow < 0 || iRow + height > leds.rows) {\n            this.printf(\"pattern too large (%d,%d)\\n\", width, height);\n            return false;\n        }\n\n        let i = 0, col = iCol, row = iRow;\n        let aTokens = sPattern.split(/([a-z$])/i);\n\n        leds.clearBuffer();\n\n        let rgb = [0, 0, 0, 1], counts = 0;\n        let fColors = false, fCounts = false;\n\n        /*\n         * We could add checks that verify that col and row stay within the bounds of the specified\n         * width and height of the pattern, but it's possible that there are some legit patterns out\n         * there that didn't get their bounds quite right.  And in any case, no harm can come of it,\n         * because setLEDState() will ignore any parameters outside the LED's array bounds.\n         */\n        while (i < aTokens.length - 1) {\n            let n = aTokens[i++];\n            let token = aTokens[i++];\n            let v = +n, nRepeat = (n === \"\"? 1 : v);\n            while (nRepeat--) {\n                let nAdvance = 0, fModified = false;\n                switch(token) {\n                case '$':\n                    fColors = fCounts = false;\n                    col = iCol;\n                    row++;\n                    break;\n                case 'C':\n                    counts = v;\n                    fCounts = true;\n                    break;\n                case 'R':\n                    rgb[0] = v;\n                    fColors = true;\n                    break;\n                case 'G':\n                    rgb[1] = v;\n                    fColors = true;\n                    break;\n                case 'B':\n                    rgb[2] = v;\n                    fColors = true;\n                    break;\n                case 'A':\n                    rgb[3] = v;\n                    fColors = true;\n                    break;\n                case 'b':\n                    fModified = leds.setLEDState(col, row, LED.STATE.OFF);\n                    nAdvance++;\n                    break;\n                case 'o':\n                    fModified = leds.setLEDState(col, row, LED.STATE.ON);\n                    nAdvance++;\n                    break;\n                default:\n                    this.printf(\"unrecognized pattern token: %s\\n\", token);\n                    break;\n                }\n                if (fModified == null) {\n                    this.printf(\"invalid pattern position (%d,%d)\\n\", col, row);\n                } else {\n                    if (fColors) {\n                        let color = leds.getRGBColorString(rgb);\n                        leds.setLEDColor(col, row, color);\n                    }\n                    if (fCounts) {\n                        leds.setLEDCountsPacked(col, row, counts);\n                    }\n                    col += nAdvance;\n                }\n            }\n        }\n\n        leds.drawBuffer(true);\n        return true;\n    }\n\n    /**\n     * loadState(state)\n     *\n     * If any saved values don't match (possibly overridden), abandon the given state and return false.\n     * \n     * @this {Chip}\n     * @param {Object|Array|null} state\n     * @returns {boolean}\n     */\n    loadState(state)\n    {\n        if (state) {\n            let stateChip = state['stateChip'] || state[0];\n            if (!stateChip || !stateChip.length) {\n                this.println(\"Invalid saved state\");\n                return false;\n            }\n            let version = stateChip.shift();\n            if ((version|0) !== (Chip.VERSION|0)) {\n                this.printf(\"Saved state version mismatch: %3.2f\\n\", version);\n                return false;\n            }\n            // try {\n            // } catch(err) {\n            //     this.println(\"Chip state error: \" + err.message);\n            //     return false;\n            // }\n            let stateLEDs = state['stateLEDs'] || state[1];\n            if (!Device.getURLParms()['pattern'] && !Device.getURLParms()[Chip.BINDING.IMAGE_SELECTION] && stateLEDs && this.leds) {\n                if (!this.leds.loadState(stateLEDs)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * onCommand(sCommand)\n     *\n     * Processes commands for our \"mini-debugger\".\n     *\n     * If sCommand is blank (ie, if Enter alone was pressed), then sCommandPrev will be used,\n     * but sCommandPrev is set only for certain commands deemed \"repeatable\" (eg, step and dump\n     * commands).\n     *\n     * @this {Chip}\n     * @param {string} sCommand\n     * @returns {boolean} (true if processed, false if not)\n     */\n    onCommand(sCommand)\n    {\n        let sResult = \"\";\n\n        if (sCommand == \"\") {\n            sCommand = this.sCommandPrev;\n        }\n        this.sCommandPrev = \"\";\n        sCommand = sCommand.trim();\n\n        let aCommands = sCommand.split(' ');\n        let s = aCommands[0], c = aCommands[1];\n\n        switch(s[0]) {\n        case 'c':\n            if (c) {\n                this.println(\"set category '\" + c + \"'\");\n                this.setCategory(c);\n            } else {\n                c = this.setCategory();\n                if (c) {\n                    this.println(\"cleared category '\" + c + \"'\");\n                } else {\n                    this.println(\"no category set\");\n                }\n            }\n            break;\n\n        case '?':\n            sResult = \"available commands:\";\n            Chip.COMMANDS.forEach(cmd => {sResult += '\\n' + cmd;});\n            break;\n\n        default:\n            if (sCommand) {\n                sResult = \"unrecognized command '\" + sCommand + \"' (try '?')\";\n            }\n            break;\n        }\n        if (sResult) this.println(sResult.trim());\n        return true;\n    }\n\n    /**\n     * onInput(col, row)\n     *\n     * @this {Chip}\n     * @param {number} col\n     * @param {number} row\n     */\n    onInput(col, row)\n    {\n        let leds = this.leds;\n        if (col >= 0 && row >= 0) {\n            if (this.colorSelected) {\n                if (!leds.setLEDColor(col, row, this.colorSelected)) {\n                    if (this.fToggle) {\n                        leds.setLEDState(col, row, LED.STATE.ON - leds.getLEDState(col, row));\n                    } else {\n                        /*\n                         * Non-toggle mode used to require clicking through 3 states: on, then off, then\n                         * transparent.  But when creating an initial image, you don't really care about the\n                         * middle (off) state; it's a legitimate state for blinking LEDs, but having to click\n                         * through that extra state just to remove a misplaced LED quickly becomes tedious.\n                         *\n                         *      if (!leds.getLEDState(col, row)) {\n                         *          leds.setLEDColor(col, row);\n                         *      } else {\n                         *          leds.setLEDState(col, row, LED.STATE.OFF);\n                         *      }\n                         */\n                        leds.setLEDColor(col, row);\n                    }\n                } else {\n                    leds.setLEDState(col, row, LED.STATE.ON);\n                }\n            }\n            else {\n                leds.setLEDState(col, row, LED.STATE.ON - leds.getLEDState(col, row));\n            }\n            let fAdvance = !!leds.getLEDState(col, row);\n            leds.setLEDCounts(col, row, this.getCounts(fAdvance));\n            leds.drawBuffer();\n        }\n    }\n    \n    /**\n     * onPower(fOn)\n     *\n     * Automatically called by the Machine device after all other devices have been powered up (eg, after\n     * a page load event), as well as when all devices are being powered down (eg, before a page unload event).\n     *\n     * May subsequently be called by the Input device to provide notification of a user-initiated power event\n     * (eg, toggling a power button); in this case, fOn should NOT be set, so that no state is loaded or saved.\n     *\n     * @this {Chip}\n     * @param {boolean} [fOn] (true to power on, false to power off; otherwise, toggle it)\n     */\n    onPower(fOn)\n    {\n        if (fOn) {\n            this.time.start();\n        } else {\n            this.time.stop();\n        }\n    }\n\n    /**\n     * onReset()\n     *\n     * Called by the Input device to provide notification of a reset event.\n     *\n     * @this {Chip}\n     */\n    onReset()\n    {\n        this.println(\"reset\");\n        this.leds.clearBuffer(true);\n    }\n\n    /**\n     * onRestore()\n     *\n     * @this {Chip}\n     */\n    onRestore()\n    {\n        this.loadState(this.loadLocalStorage());\n    }\n\n    /**\n     * onSave()\n     *\n     * @this {Chip}\n     */\n    onSave()\n    {\n        this.saveLocalStorage(this.saveState());\n    }\n\n    /**\n     * savePattern()\n     *\n     * We save our patterns as a string that is largely compatible with the \"Game of Life RLE Format\"\n     * (refer to http://www.conwaylife.com/w/index.php?title=Run_Length_Encoded), which uses <repetition><tag>\n     * pairs to describes runs of identical cells; the <tag> is either 'o' for \"alive\" cells, 'b' for \"dead\"\n     * cells, or '$' for end of line.\n     *\n     * We say \"largely\" compatible because it's not really a goal for our pattern strings to be compatible\n     * with any other RLE reader.  For example, we don't break our string into lines of 70 characters or less,\n     * so that's already one incompatibility.  Also, we don't attempt to determine the minimum bounding\n     * rectangle for the current pattern, because we use these strings to save/restore the entire grid as it\n     * originally appeared, not just the pattern within the grid.  Both of those differences can be dealt with\n     * in the future with a special RLE-compatibility flag, if we ever care.\n     *\n     * Moreover, we must deal with grids containing multi-color cells and additional state (eg, internal counters)\n     * not found in typical \"Game of Life\" grids, so we may precede each <repetition><tag> pair with zero or more\n     * <value><modifier> pairs, where <modifier> can be:\n     *\n     *      'R':    red color value (assumed zero if not present)\n     *      'G':    green color value (assumed zero if not present)\n     *      'B':    blue color value (assumed zero if not present)\n     *      'C':    packed count value (ie, internal counts packed into a single unsigned 32-bit number)\n     *\n     * If we use any of the above modifiers, they are always preceded with a value unless the value is zero\n     * (unlike the <repetition><tag> pairs, where a repetition of 1 is assumed if omitted).\n     *\n     * Also, a modifier remains in effect until modified by another modifier, reducing the amount of\n     * \"modifier noise\" in the pattern string.\n     *\n     * @this {Chip}\n     * @returns {string}\n     */\n    savePattern()\n    {\n        let leds = this.leds;\n\n        let sPattern = \"\";\n        let iCol = 0, iRow = 0;\n        let nCols = this.leds.cols, nRows = this.leds.rows;\n\n        let fColors = !!this.colors.length;\n        let state, rgb = [0, 0, 0], counts;\n        let stateLast = 0, rgbLast = [0, 0, 0, 1], countsLast = 0;\n        let statePrev = 0, rgbPrev = [0, 0, 0, 1], countsPrev = 0, nPrev = 0;\n\n        /**\n         * flushRun(fEndRow)\n         * \n         * @param {boolean} [fEndRow]\n         */\n        let flushRun = function(fEndRow) {\n            let fDelta = false;\n            if (rgb[3] == null) rgb[3] = 1;\n            if (nPrev) {\n                if (fColors) {\n                    if (rgb[0] !== rgbPrev[0] || rgb[1] !== rgbPrev[1] || rgb[2] !== rgbPrev[2] || rgb[3] !== rgbPrev[3]) {\n                        fDelta = true;\n                    }\n                    if (counts !== countsPrev) {\n                        fDelta = true;\n                    }\n                }\n                if (state !== statePrev) {\n                    fDelta = true;\n                }\n                if (fDelta || fEndRow && statePrev) {\n                    if (fColors) {\n                        if (rgbLast[0] !== rgbPrev[0]) {\n                            rgbLast[0] = rgbPrev[0];\n                            sPattern += (rgbPrev[0] || \"\") + 'R';\n                        }\n                        if (rgbLast[1] !== rgbPrev[1]) {\n                            rgbLast[1] = rgbPrev[1];\n                            sPattern += (rgbPrev[1] || \"\") + 'G';\n                        }\n                        if (rgbLast[2] !== rgbPrev[2]) {\n                            rgbLast[2] = rgbPrev[2];\n                            sPattern += (rgbPrev[2] || \"\") + 'B';\n                        }\n                        if (rgbLast[3] !== rgbPrev[3]) {\n                            rgbLast[3] = rgbPrev[3];\n                            sPattern += (rgbPrev[3] || \"\") + 'A';\n                        }\n                        if (countsLast !== countsPrev) {\n                            countsLast = countsPrev;\n                            sPattern += (countsPrev || \"\") + 'C';\n                        }\n                    }\n                    if (nPrev > 1) sPattern += nPrev;\n                    sPattern += (statePrev === LED.STATE.ON? 'o' : 'b');\n                    stateLast = statePrev;\n                    fDelta = true;\n                }\n            }\n            if (fEndRow) {\n                sPattern += '$';\n                nPrev = 0;\n            } else {\n                if (!fDelta) {\n                    nPrev++;\n                } else {\n                    nPrev = 1;\n                }\n                statePrev = state;\n                rgbPrev[0] = rgb[0];\n                rgbPrev[1] = rgb[1];\n                rgbPrev[2] = rgb[2];\n                rgbPrev[3] = rgb[3];\n                countsPrev = counts;\n            }\n        };\n\n        for (let row = 0; row < leds.rows; row++) {\n            for (let col = 0; col < leds.cols; col++) {\n                state = leds.getLEDState(col, row);\n                leds.getLEDColorValues(col, row, rgb);\n                counts = leds.getLEDCountsPacked(col, row);\n                flushRun();\n            }\n            flushRun(true);\n        }\n\n        /*\n         * Remove all '$' at the beginning of the pattern.\n         */\n        while (sPattern[0] == '$') {\n            iRow++; nRows--;\n            sPattern = sPattern.slice(1);\n        }\n\n        /*\n         * Similarly, remove all '$$' at the end of the pattern.\n         */\n        while (sPattern.slice(-2) == '$$') {\n            nRows--;\n            sPattern = sPattern.slice(0, -1);\n        }\n\n        sPattern = iCol + '/' + iRow + '/' + nCols + '/' + nRows + '/' + sPattern.slice(0, -1);\n\n        sPattern = sPattern.replace(/\\$+$/, '');\n        return sPattern;\n    }\n\n    /**\n     * saveState()\n     *\n     * @this {Chip}\n     * @returns {Array}\n     */\n    saveState()\n    {\n        let state = [[],[]];\n        let stateChip = state[0];\n        let stateLEDs = state[1];\n        stateChip.push(Chip.VERSION);\n        if (this.leds) this.leds.saveState(stateLEDs);\n        return state;\n    }\n\n    /**\n     * updateBackgroundImage(sImage)\n     *\n     * @this {Chip}\n     * @param {string} [sImage]\n     */\n    updateBackgroundImage(sImage)\n    {\n        let element = this.bindings[Chip.BINDING.IMAGE_SELECTION];\n        if (element && element.options.length) {\n            if (sImage) {\n                for (let i = 0; i < element.options.length; i++) {\n                    if (element.options[i].value == sImage) {\n                        element.selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n            sImage = element.options[element.selectedIndex].value;\n            this.leds.setContainerStyle('backgroundImage', sImage? (\"url('\" + sImage + \"')\") : \"none\");\n        }\n    }\n\n    /**\n     * updateColorPalette(binding)\n     *\n     * In addition to being called whenever the COLOR_PALETTE or COLOR_SELECTION onChange handler is\n     * called, this is also called when any of the color controls are initialized, because we don't know\n     * in what order the elements will be bound.\n     *\n     * @this {Chip}\n     * @param {string} [binding] (if set, the selection for the specified binding has changed)\n     */\n    updateColorPalette(binding)\n    {\n        let elementPalette = this.bindings[Chip.BINDING.COLOR_PALETTE];\n        let elementSelection = this.bindings[Chip.BINDING.COLOR_SELECTION];\n\n        let fPaletteChange = (binding === Chip.BINDING.COLOR_PALETTE);\n        if (elementPalette && !elementPalette.options.length) {\n            this.addBindingOptions(elementPalette, this.config['colors'], true);\n            fPaletteChange = true;\n        }\n\n        if (elementPalette && elementSelection && (!elementSelection.options.length || fPaletteChange)) {\n            let sPalette = elementPalette.options[elementPalette.selectedIndex].value;\n            this.colorPalette = this.config['colors'][sPalette];\n            for (let color in this.colorPalette) {\n                let sColorOverride = this.config[color.toLowerCase()];\n                if (sColorOverride) {\n                    if (sColorOverride[0] != '#') sColorOverride = '#' + sColorOverride;\n                    this.println(\"overriding color '\" + color + \"' with \" + sColorOverride + \" (formerly \" + this.colorPalette[color] + \")\");\n                    this.colorPalette[color] = sColorOverride;\n                }\n            }\n            this.addBindingOptions(elementSelection, this.colorPalette, true);\n        }\n\n        if (elementPalette && elementSelection && elementSelection.options.length) {\n            this.colorSelected = elementSelection.options[elementSelection.selectedIndex].value;\n            this.updateColorSwatches();\n        }\n    }\n\n    /**\n     * updateColorSelection(color)\n     *\n     * @this {Chip}\n     * @param {string} color\n     */\n    updateColorSelection(color)\n    {\n        let element = this.bindings[Chip.BINDING.COLOR_SELECTION];\n        if (element) {\n            let i;\n            for (i = 0; i < element.options.length; i++) {\n                if (element.options[i].value == color) {\n                    this.colorSelected = color;\n                    if (element.selectedIndex != i) {\n                        element.selectedIndex = i;\n                    }\n                    break;\n                }\n            }\n            if (i == element.options.length) element.selectedIndex = 0;\n        }\n    }\n\n    /**\n     * updateColorSwatches(binding)\n     *\n     * @this {Chip}\n     * @param {string} [binding]\n     */\n    updateColorSwatches(binding)\n    {\n        let i = 1, elementSwatch;\n        /*\n         * Some machines use only a single swatch called COLOR_SWATCH_SELECTED; update as appropriate.\n         */\n        if (!binding && this.colorSelected) {\n            elementSwatch = this.bindings[Chip.BINDING.COLOR_SWATCH_SELECTED];\n            if (elementSwatch) {\n                elementSwatch.style.backgroundColor = this.colorSelected;\n            }\n        }\n        /*\n         * Other machines use a series of swatches named COLOR_SWATCH + \"1\", COLOR_SWATCH + \"2\", etc;\n         * for each color in colorPalette, update the next available swatch.\n         */\n        if (this.colorPalette) {\n            for (let idColor in this.colorPalette) {\n                let color = this.colorPalette[idColor];\n                if (this.colors) this.colors[i-1] = color;\n                let idSwatch = Chip.BINDING.COLOR_SWATCH + i++;\n                elementSwatch = this.bindings[idSwatch];\n                if (!elementSwatch) break;\n                elementSwatch.style.display = \"inline-block\";\n                if (idSwatch == binding) {\n                    this.updateColorSelection(color);\n                }\n                if (color != this.colorSelected) {\n                    color = this.leds.getRGBAColor(color, 1.0, 0.50);\n                }\n                elementSwatch.style.backgroundColor = color;\n            }\n        }\n        /*\n         * Finally, for any remaining swatches in the series (ie, because the current palette doesn't need\n         * them all), hide them.\n         */\n        while (true) {\n            let idSwatch = Chip.BINDING.COLOR_SWATCH + i++;\n            let elementSwatch = this.bindings[idSwatch];\n            if (!elementSwatch) break;\n            elementSwatch.style.display = \"none\";\n        }\n    }\n\n    /**\n     * updatePattern()\n     *\n     * @this {Chip}\n     */\n    updatePattern()\n    {\n        let element = this.bindings[Chip.BINDING.PATTERN_SELECTION];\n        if (element && element.options.length) {\n            let sPattern = element.options[element.selectedIndex].value;\n            if (!sPattern) {\n                this.onReset();\n            } else {\n                this.loadPattern(sPattern);\n            }\n        }\n    }\n\n    /**\n     * updateStatus(fTransition)\n     *\n     * Update the LEDs as needed.\n     *\n     * Called by Time's updateStatus() function whenever 1) its YIELDS_PER_UPDATE threshold is reached\n     * (default is twice per second), 2) a step() operation has just finished (ie, the device is being\n     * single-stepped), and 3) a start() or stop() transition has occurred.\n     *\n     * Of those, all we currently care about are step() and stop() notifications, because we want to make sure\n     * the LED display is in sync with the last LED buffer update performed by countNeighbors().  In both of those\n     * cases, time has stopped.  If time has NOT stopped, then the LED's normal animator function (ledAnimate())\n     * takes care of updating the LED display.\n     *\n     * @this {Chip}\n     * @param {boolean} [fTransition]\n     */\n    updateStatus(fTransition)\n    {\n        if (!this.time.isRunning()) {\n            this.leds.drawBuffer();\n        }\n    }\n}\n\nChip.BINDING = {\n    COLOR_PALETTE:          \"colorPalette\",\n    COLOR_SELECTION:        \"colorSelection\",\n    COLOR_SWATCH:           \"colorSwatch\",\n    COLOR_SWATCH_SELECTED:  \"colorSwatchSelected\",\n    COUNT_INIT:             \"countInit\",\n    COUNT_ON:               \"countOn\",\n    COUNT_OFF:              \"countOff\",\n    COUNT_CYCLE:            \"countCycle\",\n    IMAGE_SELECTION:        \"backgroundImage\",\n    PATTERN_SELECTION:      \"patterns\",\n    SAVE_TO_URL:            \"saveToURL\",\n};\n\nChip.COUNTS = [null, Chip.BINDING.COUNT_ON, Chip.BINDING.COUNT_OFF, Chip.BINDING.COUNT_CYCLE];\n\nChip.COMMANDS = [\n    \"c\\tset category\"\n];\n\nChip.VERSION    = 1.10;\n\nMACHINE = \"LEDs\";\n\n/**\n * @copyright http://pcjs.org/modules/devices/machine.js (C) Jeff Parsons 2012-2017\n */\n\n/**\n * @class {Machine}\n * @unrestricted\n */\nclass Machine extends Device {\n    /**\n     * Machine(idMachine, sConfig)\n     *\n     * Sample config:\n     *\n     *    {\n     *      \"ti57\": {\n     *        \"class\": \"Machine\",\n     *        \"type\": \"TI57\",\n     *        \"name\": \"TI-57 Programmable Calculator Simulation\",\n     *        \"version\": 1.10,\n     *        \"autoPower\": true,\n     *        \"bindings\": {\n     *          \"clear\": \"clearTI57\",\n     *          \"print\": \"printTI57\"\n     *        }\n     *      },\n     *      \"chip\": {\n     *        \"class\": \"Chip\",\n     *        \"type\": \"TMS-1500\",\n     *        \"input\": \"buttons\",\n     *        \"output\": \"display\"\n     *      },\n     *      \"clock\": {\n     *        \"class\": \"Time\",\n     *        \"cyclesPerSecond\": 650000\n     *        \"bindings\": {\n     *          \"run\": \"runTI57\",\n     *          \"speed\": \"speedTI57\",\n     *          \"step\": \"stepTI57\"\n     *        },\n     *        \"overrides\": [\"cyclesPerSecond\"]\n     *      },\n     *      \"display\": {\n     *        \"class\": \"LED\",\n     *        \"type\": 3,\n     *        \"cols\": 12,\n     *        \"rows\": 1,\n     *        \"color\": \"red\",\n     *        \"bindings\": {\n     *          \"container\": \"displayTI57\"\n     *        },\n     *        \"overrides\": [\"color\",\"backgroundColor\"]\n     *      },\n     *      \"buttons\": {\n     *        \"class\": \"Input\",\n     *        \"map\": [\n     *          [\"2nd\",  \"inv\",  \"lnx\",  \"\\\\b\",  \"clr\"],\n     *          [\"lrn\",  \"xchg\", \"sq\",   \"sqrt\", \"rcp\"],\n     *          [\"sst\",  \"sto\",  \"rcl\",  \"sum\",  \"exp\"],\n     *          [\"bst\",  \"ee\",   \"(\",    \")\",    \"/\"],\n     *          [\"gto\",  \"7\",    \"8\",    \"9\",    \"*\"],\n     *          [\"sbr\",  \"4\",    \"5\",    \"6\",    \"-\"],\n     *          [\"rst\",  \"1\",    \"2\",    \"3\",    \"+\"],\n     *          [\"r/s\",  \"0\",    \".\",    \"+/-\",  \"=|\\\\r\"]\n     *        ],\n     *        \"location\": [139, 325, 368, 478, 0.34, 0.5, 640, 853, 418, 180, 75, 36],\n     *        \"bindings\": {\n     *          \"surface\": \"imageTI57\",\n     *          \"power\": \"powerTI57\",\n     *          \"reset\": \"resetTI57\"\n     *        }\n     *      },\n     *      \"rom\": {\n     *        \"class\": \"ROM\",\n     *        \"wordSize\": 13,\n     *        \"valueSize\": 16,\n     *        \"valueTotal\": 2048,\n     *        \"littleEndian\": true,\n     *        \"file\": \"ti57le.bin\",\n     *        \"reference\": \"\",\n     *        \"values\": [\n     *        ]\n     *      }\n     *    }\n     *\n     * @this {Machine}\n     * @param {string} idMachine (of both the machine AND the <div> to contain it)\n     * @param {string} sConfig (JSON configuration for entire machine, including any static resources)\n     */\n    constructor(idMachine, sConfig)\n    {\n        super(idMachine, idMachine, Machine.VERSION);\n        try {\n            this.config = JSON.parse(sConfig);\n            let config = this.config[idMachine];\n            this.checkVersion(config);\n            this.checkOverrides(config);\n            this.addBindings(config['bindings']);\n            this.fAutoPower = (config['autoPower'] !== false);\n        } catch(err) {\n            let sError = err.message;\n            let match = sError.match(/position ([0-9]+)/);\n            if (match) {\n                sError += \" ('\" + sConfig.substr(+match[1], 40).replace(/\\s+/g, ' ') + \"...')\";\n            }\n            this.println(\"machine '\" + idMachine + \"' initialization error: \" + sError);\n        }\n        /*\n         * Device initialization is now deferred until after the page is fully loaded, for the benefit\n         * of devices (eg, Input) that may be dependent on page resources.\n         *\n         * Strangely, for these page events, I must use the window object rather than the document object.\n         */\n        let machine = this, chip = null;\n        window.addEventListener('load', function onLoad(event) {\n            chip = machine.initDevices();\n            if (chip) {\n                if (chip.onRestore) chip.onRestore();\n                if (chip.onPower && machine.fAutoPower) chip.onPower(true);\n            }\n        });\n        let sEvent = this.isUserAgent(\"iOS\")? 'pagehide' : (this.isUserAgent(\"Opera\")? 'unload' : undefined);\n        window.addEventListener(sEvent || 'beforeunload', function onUnload(event) {\n            if (chip) {\n                if (chip.onSave) chip.onSave();\n                if (chip.onPower) chip.onPower(false);\n            }\n        });\n    }\n\n    /**\n     * initDevices()\n     *\n     * Initializes devices in the proper order.  For example, any Time devices should be initialized first,\n     * to ensure that their timer services are available to other devices.\n     *\n     * @this {Machine}\n     * @returns {Chip|undefined}\n     */\n    initDevices()\n    {\n        let idDevice, sClass, device, chip;\n        for (let iClass = 0; iClass < Machine.CLASSORDER.length; iClass++) {\n            for (idDevice in this.config) {\n                try {\n                    let config = this.config[idDevice], sStatus = \"\";\n                    sClass = config['class'];\n                    if (sClass != Machine.CLASSORDER[iClass]) continue;\n                    switch (sClass) {\n                    case Machine.CLASS.CHIP:\n                        device = new Chip(this.idMachine, idDevice, config);\n                        chip = device;\n                        break;\n                    case Machine.CLASS.INPUT:\n                        device = new Input(this.idMachine, idDevice, config);\n                        break;\n                    case Machine.CLASS.LED:\n                        device = new LED(this.idMachine, idDevice, config);\n                        break;\n                    case Machine.CLASS.ROM:\n                        device = new ROM(this.idMachine, idDevice, config);\n                        if (device.config['revision']) sStatus = \"revision \" + device.config['revision'];\n                        break;\n                    case Machine.CLASS.TIME:\n                        device = new Time(this.idMachine, idDevice, config);\n                        break;\n                    case Machine.CLASS.MACHINE:\n                        this.printf(\"PCjs %s v%3.2f\\n\", config['name'], Machine.VERSION);\n                        this.println(Machine.COPYRIGHT);\n                        this.println(Machine.LICENSE);\n                        continue;\n                    default:\n                        this.println(\"unrecognized device class: \" + sClass);\n                        continue;\n                    }\n                    this.println(sClass + \" device initialized\" + (sStatus? \" (\" + sStatus + \")\" : \"\"));\n                }\n                catch(err) {\n                    this.println(\"error initializing \" + sClass + \" device '\" + idDevice + \"':\\n\" + err.message);\n                    this.removeDevice(idDevice);\n                }\n            }\n        }\n        return chip;\n    }\n}\n\nMachine.CLASS = {\n    CHIP:       \"Chip\",\n    INPUT:      \"Input\",\n    LED:        \"LED\",\n    MACHINE:    \"Machine\",\n    ROM:        \"ROM\",\n    TIME:       \"Time\"\n};\n\nMachine.CLASSORDER = [\n    Machine.CLASS.MACHINE,\n    Machine.CLASS.TIME,\n    Machine.CLASS.LED,\n    Machine.CLASS.INPUT,\n    Machine.CLASS.ROM,\n    Machine.CLASS.CHIP\n];\n\nMachine.COPYRIGHT = \"Copyright © 2012-2017 Jeff Parsons <Jeff@pcjs.org>\";\nMachine.LICENSE = \"License: GPL version 3 or later <http://gnu.org/licenses/gpl.html>\";\n\nMachine.VERSION = 1.10;\n\nwindow[MACHINE] = Machine;\n"]}