{"version":3,"file":"leds.js","lineCount":106,"mappings":"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","sources":["versions/devices/1.11/leds-uncompiled.js"," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:es6/util/arrayfromiterator] "," [synthetic:util/polyfill] "," [synthetic:es6/number/parseint] "," [synthetic:es6/math/trunc] "," [synthetic:es6/array/fill] "," [synthetic:es6/math/log2] "," [synthetic:es6/string/startswith] "," [synthetic:util/checkstringargs] "," [synthetic:es6/util/arrayfromiterable] "],"names":["$jscomp.objectCreate","$jscomp.setPrototypeOf","$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.iteratorPrototype","$jscomp.polyfill","MACHINE","constructor","Device","idMachine","idDevice","version","config","bindings","Device.Machines","addDevice","push","checkVersion","checkOverrides","addBindings","sCommandPrev","addBinding","binding","element","device","Device.BINDING.CLEAR","onclick","element.onclick","findBinding","value","Device.BINDING.PRINT","addEventListener","onKeyPress","event","window","keyCode","which","sText","setSelectionRange","length","stopPropagation","preventDefault","blur","focus","doCommand","fDirectBindings","Array","isArray","id","document","getElementById","println","addBindingOptions","options","fReset","sDefault","prop","option","createElement","text","appendChild","selectedIndex","addHandler","fn","sType","Device.HANDLER.COMMAND","Device.Handlers","parms","Device.getURLParms","indexOf","s","match","Number","parseInt","sVersion","devices","findDevice","i","machine","sprintf","sError","class","type","Device.Alerts.Version","Device.Alerts.list.indexOf","alert","Device.Alerts.list.push","afnHandlers","findHandlers","sCommand","slice","lastIndexOf","trim","aTokens","split","c","setCategory","sResult","Device.COMMANDS.forEach","forEach","cmd","unshift","name","undefined","findDeviceByClass","idClass","getBindingID","getBindingText","ROM.BINDING.CELLDESC","textContent","getBounded","n","min","max","getDefault","idConfig","defaultValue","hasLocalStorage","Device.LocalStorage.Available","f","localStorage","setItem","Device.LocalStorage.Test","getItem","removeItem","err","message","isUserAgent","userAgent","navigator","print","Device.Category","Device.Category.indexOf","Device.CATEGORY.BUFFER","Device.PrintBuffer","substr","scrollTop","scrollHeight","console","log","printf","format","args","$jscomp.arrayFromIterator","$jscomp.makeIterator","setBindingText","category","cPrev","fFlush","sBuffer","buffer","aParts","iArg","iPart","arg","flags","minimum","precision","conversion","ach","Math","trunc","abs","pow","Device.HexUpperCase","Device.HexLowerCase","getURLParms","sParms","Device.URLParms","location","search","pl","exec","decodeURIComponent","replace","CLEAR","PRINT","BUFFER","Device.COMMANDS","COMMAND","list","Version","Available","Test","Input","Input.VERSION","time","Machine.CLASS.TIME","onHover","onReset","onPower","onInput","fDrag","getDefaultBoolean","fScroll","fTouch","Input.BINDING.SURFACE","xInput","yInput","cxInput","cyInput","hGap","vGap","cxSurface","naturalWidth","cySurface","naturalHeight","xPower","yPower","cxPower","cyPower","map","nRows","nCols","fHexagonal","buttonDelay","getDefaultNumber","cxButton","cyButton","cxGap","cyGap","xStart","yStart","captureMouse","captureTouch","input","timerInputRelease","addTimer","onInputRelease","setPosition","timerKeyRelease","onKeyRelease","onKeyTimer","keyState","keysPressed","captureKeys","col","row","$jscomp.inherits","Input.BINDING.POWER","Input.BINDING.RESET","addClick","addHover","addInput","advanceKeyState","setTimer","onKeyDown","activeElement","ch","Input.KEYCODE","String","fromCharCode","charCode","onMouseDown","button","x","scrollX","y","scrollY","scrollTo","processEvent","Input.ACTION.PRESS","onMouseMove","Input.ACTION.MOVE","onMouseUp","Input.ACTION.RELEASE","onMouseOut","onTouchStart","onTouchMove","onTouchEnd","rowMap","charCodeAt","shift","action","fMultiTouch","fButton","targetTouches","pageX","pageY","yOffset","xOffset","elementNext","isNaN","offsetLeft","offsetTop","offsetParent","offsetWidth","offsetHeight","fInput","fPower","cxCol","cyCol","colInput","rowInput","yCol","fRunning","iTimer","aTimers","timer","nCyclesLeft","PRESS","MOVE","RELEASE","POWER","RESET","SURFACE","LED","LED.VERSION","container","LED.BINDING.CONTAINER","Error","canvasView","getContext","innerHTML","LED.TYPE.ROUND","LED.TYPE.DIGIT","widthCell","LED.SIZES","heightCell","width","height","colsView","cols","rowsView","rows","widthView","heightView","colorTransparent","getRGBAColor","colorOn","getRGBColor","colorOff","colorHighlight","colorBackground","fFixed","style","fHighlight","fPersistent","setAttribute","toString","backgroundColor","contextView","canvasGrid","widthGrid","heightGrid","contextGrid","nBufferCells","nBufferInc","bufferClone","nBufferIncExtra","fBufferModified","fTickled","fShiftedLeft","fDisplayOff","iBufferRecent","led","addAnimator","ledAnimate","drawBuffer","clearBuffer","fDraw","initBuffer","clearGrid","fillStyle","fillRect","clearRect","fForced","colRedraw","drawGrid","cxVisible","drawImage","state","color","fLeaveModified","fModified","LED.FLAGS.MODIFIED","LED.STATE.OFF","fTransparent","colorCell","xDst","yDst","clearGridCell","coords","LED.SHAPES","beginPath","arc","PI","globalCompositeOperation","fill","LED.FLAGS.PERIOD","drawString","segments","LED.SYMBOL_SEGMENTS","drawGridSegment","LED.SEGMENTS","seg","lineTo","moveTo","closePath","getLEDCountsPacked","getLEDState","colorDefault","LED.COLORS","alpha","brightness","rgb","parseRGBValues","round","initCell","iCell","base","setLEDColor","colorNew","setLEDCounts","counts","bits","setLEDState","flagsSet","LED.FLAGS.SET","ROUND","DIGIT","CONTAINER","OFF","SET","PERIOD","MODIFIED","SQUARE","ROM","ROM.VERSION","data","ROM.BINDING.ARRAY","rom","addrLines","log2","ceil","floor","ledArray","configLEDs","getDefaultString","clearArray","ledInput","configInput","sCellDesc","onROMHover","chip","sDesc","addr","disassemble","opCode","ARRAY","CELLDESC","Time","Time.VERSION","nCyclesMinimum","nCyclesMaximum","nCyclesPerSecond","nYieldsPerSecond","Time.YIELDS_PER_SECOND","nYieldsPerUpdate","Time.YIELDS_PER_UPDATE","fRequestAnimationFrame","fClockByFrame","nBaseMultiplier","nCurrentMultiplier","nTargetMultiplier","mhzBase","mhzCurrent","mhzTarget","nYields","msYield","aAnimators","aClockers","aUpdaters","fYield","fThrottling","idRunTimeout","nStepping","onRunTimeout","run","bind","onAnimationFrame","animate","requestAnimationFrame","webkitRequestAnimationFrame","setTimeout","nCyclesDeposited","nCyclesDepositPerFrame","onYield","getCycles","updateStatus","resetSpeed","nCyclesRun","nCyclesBurst","nCyclesRemain","setSpeedThrottle","setSpeed","callBack","Time.BINDING.RUN","stop","start","Time.BINDING.STEP","step","nRepeat","Time.BINDING.THROTTLE","onThrottleStart","onThrottleStop","onThrottleChange","msAuto","snapStart","nCycles","getCyclesPerFrame","updateTimers","endBurst","doBurst","snapStop","calcCycles","nMultiplier","nCyclesPerYield","fStep","iClocker","nCyclesThisRun","ms","getSpeed","mhz","toFixed","hz","getCyclesPerBurst","elementInput","Time.BINDING.SPEED","getSpeedTarget","msStartRun","msEndRun","resetTimers","msOutsideThisRun","msStartThisRun","Date","now","msDelta","msRemainsThisRun","msElapsed","calcSpeed","TIME","clearTimeout","onStepTimeout","fTransition","getSpeedCurrent","RUN","SPEED","STEP","THROTTLE","Chip","Chip.VERSION","fWrap","sRule","sPattern","setMessage","fToggleColor","countBuffer","getCounts","leds","Machine.CLASS.LED","loadPattern","Machine.CLASS.INPUT","onLEDInput","colorSelected","ON","fAdvance","colors","updateColorSelection","updateColorSwatches","updateBackgroundImage","Chip.BINDING.IMAGE_SELECTION","clocker","onCommand","Chip.prototype","?.prototype","Chip.BINDING.COLOR_PALETTE","Chip.BINDING.COLOR_SELECTION","onchange","element.onchange","updateColorPalette","Chip.BINDING.PATTERN_SELECTION","buildPatternOptions","Chip.BINDING.SAVE","savePattern","elementSymbol","Chip.BINDING.SYMBOL_INPUT","Chip.BINDING.SAVE_TO_URL","href","onkeypress","element.onkeypress","elementPreview","Chip.BINDING.SYMBOL_PREVIEW","startsWith","Chip.BINDING.COLOR_SWATCH","patterns","lines","nCyclesTarget","nCyclesClocked","Chip.RULES.ANIM4","cActive","doCycling","fSuccess","stateNew","iColor","Chip.RULES.LEFT1","doShifting","processMessageCmd","nIncPerRow","nEmptyCols","nLeftEmpty","nRightEmpty","isEmptyCol","iCellOrig","stateOld","flagsNew","Chip.RULES.LIFE1","doCounting","nIncPerGrid","iNO","iNW","iNE","iWE","iEA","iSO","iSW","iSE","nNeighbors","nActive","getCount","count","init","Chip.BINDING.COUNT_INIT","range","Chip.BINDING.COUNT_ON","Chip.BINDING.COUNT_OFF","Chip.COUNTS.length","Chip.COUNTS","iCol","iRow","sLine","end","rule","loadPatternString","fOverwrite","fColors","fCounts","colMax","token","v","nAdvance","join","Chip.COMMANDS.forEach","Chip_prototype$onPower","fOn","Chip_prototype$onReset","onRestore","loadLocalStorage","sValue","JSON","parse","stateChip","loadState","stateLEDs","onSave","saveState","saveLocalStorage","stringify","nMessageCmd","nMessageCount","Chip.MESSAGE_CMD.HALT","Chip.MESSAGE_CMD.SHIFT","Chip.MESSAGE_CMD.SLEEP","Chip.MESSAGE_CMD.LOAD","Chip.MESSAGE_CMD.CENTER","Chip.MESSAGE_CMD.OFF","off","Chip.MESSAGE_CMD.ON","Chip.MESSAGE_CMD.RELOAD","sMessage","iMessageNext","chMessage","d","Chip.MESSAGE_CODE","Chip.SYMBOLS","fMinWidth","flushRun","fEndRow","fDelta","nPrev","rgbPrev","countsPrev","statePrev","rgbLast","countsLast","colMin","rowMax","rowMin","sImage","elementPalette","elementSelection","fPaletteChange","colorPalette","sColorOverride","toLowerCase","elementSwatch","Chip.BINDING.COLOR_SWATCH_SELECTED","idColor","idSwatch","display","Chip_prototype$updateStatus","COLOR_PALETTE","COLOR_SELECTION","COLOR_SWATCH","COLOR_SWATCH_SELECTED","COUNT_INIT","COUNT_ON","COUNT_OFF","IMAGE_SELECTION","PATTERN_SELECTION","SYMBOL_INPUT","SYMBOL_PREVIEW","SAVE","SAVE_TO_URL","COUNT_CYCLE","Chip.COMMANDS","HALT","LOAD","SHIFT","SLEEP","CENTER","RELOAD","ANIM4","LEFT1","LIFE1","Machine","sConfig","Machine.VERSION","fAutoPower","onLoad","sClass","iClass","Machine.CLASSORDER.length","sStatus","Machine.CLASSORDER","Machine.CLASS.CHIP","Machine.CLASS.ROM","Machine.CLASS.MACHINE","Machine.COPYRIGHT","Machine.LICENSE","splice","sEvent","onUnload","CHIP","INPUT"],"sourcesContent":["\"use strict\";\n\n/**\n * @copyright http://pcjs.org/modules/devices/device.js (C) Jeff Parsons 2012-2017\n */\n\n/**\n * @define {boolean}\n */\nvar COMPILED = false;\n\n/**\n * @define {boolean}\n */\nvar DEBUG = false;  // (window.location.hostname == \"pcjs\" || window.location.hostname == \"jeffpar.local\");\n\n/**\n * @type {string}\n */\nvar MACHINE = \"Machine\";\n\n/** @typedef {{ class: (string|undefined), bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined) }} */\nvar Config;\n\n/**\n * @class {Device}\n * @unrestricted\n * @property {string} idMachine\n * @property {string} idDevice\n * @property {Config} config\n * @property {Object} bindings [added by addBindings()]\n * @property {string} sCommandPrev\n */\nclass Device {\n    /**\n     * Device()\n     *\n     * Supported config properties:\n     *\n     *      \"bindings\": object containing name/value pairs, where name is the generic name\n     *      of a element, and value is the ID of the DOM element that should be mapped to it\n     *\n     * The properties in the \"bindings\" object are copied to our own bindings object in addBindings(),\n     * but only for DOM elements that actually exist, and it is the elements themselves (rather than\n     * their IDs) that we store.\n     *\n     * Also, URL parameters can be used to override config properties.  For example, the URL:\n     *\n     *      http://pcjs:8088/devices/ti57/machine/?cyclesPerSecond=100000\n     *\n     * will set the Time device's cyclesPerSecond config property to 100000.  In general, the values\n     * will be treated as strings, unless they contain all digits (number), or equal \"true\" or \"false\"\n     * (boolean).\n     *\n     * @this {Device}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {number} [version]\n     * @param {Config} [config]\n     */\n    constructor(idMachine, idDevice, version, config)\n    {\n        this.config = config || {};\n        this.idMachine = idMachine;\n        this.idDevice = idDevice;\n        this.version = version || 0;\n        this.bindings = {};\n        this.addDevice();\n        this.checkVersion(this.config);\n        this.checkOverrides(this.config);\n        this.addBindings(this.config['bindings']);\n        this.sCommandPrev = \"\";\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Device}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let device = this;\n\n        switch (binding) {\n\n        case Device.BINDING.CLEAR:\n            element.onclick = function onClickClear() {\n                device.clear();\n            };\n            break;\n\n        case Device.BINDING.PRINT:\n            let elementTextArea = /** @type {HTMLTextAreaElement} */ (element);\n            /*\n             * This was added for Firefox (Safari will clear the <textarea> on a page reload, but Firefox does not).\n             */\n            elementTextArea.value = \"\";\n            /*\n             * An onKeyPress handler has been added to this element simply to stop event propagation, so that if the\n             * element has been explicitly given focus, any key presses won't be picked up by the Input device (which,\n             * as that device's constructor explains, is monitoring key presses for the entire document).\n             */\n            elementTextArea.addEventListener(\n                'keypress',\n                function onKeyPress(event) {\n                    event = event || window.event;\n                    let keyCode = event.which || event.keyCode;\n                    if (keyCode) {\n                        /*\n                         * Move the caret to the end of any text in the textarea.\n                         */\n                        let sText = elementTextArea.value;\n                        elementTextArea.setSelectionRange(sText.length, sText.length);\n\n                        /*\n                         * Don't let the Input device's document-based keypress handler see any key presses\n                         * that came to this element first.\n                         */\n                        event.stopPropagation();\n\n                        /*\n                         * On the ENTER key, look for any COMMAND handlers and invoke them until one of them\n                         * returns true.\n                         */\n                        if (keyCode == 13) {\n                            /*\n                             * At the time we call any command handlers, a linefeed will not yet have been\n                             * appended to the text, so for consistency, we prevent the default behavior and\n                             * add the linefeed ourselves.  Unfortunately, one side-effect is that we must\n                             * go to some extra effort to ensure the cursor remains in view; hence the stupid\n                             * blur() and focus() calls.\n                             */\n                            event.preventDefault();\n                            sText = (elementTextArea.value += '\\n');\n                            elementTextArea.blur();\n                            elementTextArea.focus();\n                            device.doCommand(sText);\n                        }\n                    }\n                }\n            );\n            break;\n        }\n    }\n\n    /**\n     * addBindings(bindings)\n     *\n     * Builds the set of ACTUAL bindings (this.bindings) from the set of DESIRED bindings (this.config['bindings']),\n     * using either a \"bindings\" object map OR an array of \"direct bindings\".\n     *\n     * @this {Device}\n     * @param {Object} bindings\n     */\n    addBindings(bindings)\n    {\n        let fDirectBindings = Array.isArray(bindings);\n        for (let binding in bindings) {\n            let id = bindings[binding];\n            if (fDirectBindings) binding = id;\n            let element = document.getElementById(id);\n            if (element) {\n                this.bindings[binding] = element;\n                this.addBinding(binding, element);\n            } else {\n                if (!fDirectBindings) this.println(\"unable to find device ID: \" + id);\n            }\n        }\n    }\n\n    /**\n     * addBindingOptions(element, options, fReset, sDefault)\n     *\n     * @this {Device}\n     * @param {Element|HTMLSelectElement} element\n     * @param {Object} options (eg, key/value pairs for a series of \"option\" elements)\n     * @param {boolean} [fReset]\n     * @param {string} [sDefault]\n     */\n    addBindingOptions(element, options, fReset, sDefault)\n    {\n        if (fReset) {\n            element.options.length = 0;\n        }\n        if (options) {\n            for (let prop in options) {\n                let option = document.createElement(\"option\");\n                option.text = prop;\n                option.value = (typeof options[prop] == \"string\"? options[prop] : prop);\n                element.appendChild(option);\n                if (option.value == sDefault) element.selectedIndex = element.options.length - 1;\n            }\n        }\n    }\n\n    /**\n     * addDevice()\n     *\n     * Adds this Device to the global set of Devices, so that findDevice(), findBinding(), etc, will work.\n     *\n     * @this {Device}\n     */\n    addDevice()\n    {\n        if (!Device.Machines[this.idMachine]) Device.Machines[this.idMachine] = [];\n        Device.Machines[this.idMachine].push(this);\n    }\n\n    /**\n     * addHandler(sType, fn)\n     *\n     * @this {Device}\n     * @param {string} sType\n     * @param {function(Array.<string>,Device)} fn\n     */\n    addHandler(sType, fn)\n    {\n        if (!Device.Handlers[this.idMachine]) Device.Handlers[this.idMachine] = {};\n        if (!Device.Handlers[this.idMachine][sType]) Device.Handlers[this.idMachine][sType] = [];\n        Device.Handlers[this.idMachine][sType].push(fn);\n    }\n\n    /**\n     * alert(s, type)\n     *\n     * @this {Device}\n     * @param {string} s\n     * @param {string} [type]\n     */\n    alert(s, type)\n    {\n        if (type && Device.Alerts.list.indexOf(type) < 0) {\n            alert(s);\n            Device.Alerts.list.push(type);\n        }\n        this.println(s);\n    }\n\n    /**\n     * assert(f, s)\n     *\n     * Verifies conditions that must be true (for DEBUG builds only).\n     *\n     * The Closure Compiler should automatically remove all references to assert() in non-DEBUG builds.\n     * TODO: Add a task to the build process that \"asserts\" there are no instances of \"assertion failure\" in RELEASE builds.\n     *\n     * @this {Device}\n     * @param {*} f is the expression asserted to be true\n     * @param {string} [s] is description of the assertion on failure\n     */\n    assert(f, s)\n    {\n        if (DEBUG) {\n            if (!f) {\n                throw new Error(s || \"assertion failure\");\n            }\n        }\n    }\n\n    /**\n     * checkOverrides(config)\n     *\n     * @this {Device}\n     * @param {Config} config\n     */\n    checkOverrides(config)\n    {\n        /*\n         * If this device's config contains an \"overrides\" array, then any of the properties listed in\n         * that array may be overridden with a URL parameter.  We don't impose any checks on the overriding\n         * value, so it is the responsibility of the component with overridable properties to validate them.\n         */\n        if (config['overrides']) {\n            let parms = Device.getURLParms();\n            for (let prop in parms) {\n                if (config['overrides'].indexOf(prop) >= 0) {\n                    let value;\n                    let s = parms[prop];\n                    /*\n                     * You might think we could simply call parseInt() and check isNaN(), but parseInt() has\n                     * some annoying quirks, like stopping at the first non-numeric character.  If the ENTIRE\n                     * string isn't a number, then we don't want to treat ANY part of it as a number.\n                     */\n                    if (s.match(/^[+-]?[0-9.]+$/)) {\n                        value = Number.parseInt(s, 10);\n                    } else if (s == \"true\") {\n                        value = true;\n                    } else if (s == \"false\") {\n                        value = false;\n                    } else {\n                        value = s;\n                        s = '\"' + s + '\"';\n                    }\n                    config[prop] = value;\n                    this.println(\"overriding \" + this.idDevice + \" property '\" + prop + \"' with \" + s);\n                }\n            }\n        }\n    }\n\n    /**\n     * checkVersion(config)\n     *\n     * Verify that device's version matches the machine's version, and also that the config version stored in\n     * the JSON (if any) matches the device's version.\n     *\n     * This is normally performed by the constructor, but the Machine device cannot be fully initialized in the\n     * constructor, so it calls this separately.\n     *\n     * @this {Device}\n     * @param {Config} config\n     */\n    checkVersion(config)\n    {\n        if (this.version) {\n            let sVersion = \"\", version;\n            let machine = this.findDevice(this.idMachine);\n            if (machine.version != this.version) {\n                sVersion = \"Machine\";\n                version = machine.version;\n            }\n            else if (config.version && config.version > this.version) {\n                sVersion = \"Config\";\n                version = config.version;\n            }\n            if (sVersion) {\n                let sError = this.sprintf(\"%s Device version (%3.2f) incompatible with %s version (%3.2f)\", config.class, this.version, sVersion, version);\n                this.alert(\"Error: \" + sError + '\\n\\n' + \"Clearing your browser's cache may resolve the issue.\", Device.Alerts.Version);\n            }\n        }\n    }\n\n    /**\n     * clear()\n     *\n     * @this {Device}\n     */\n    clear()\n    {\n        let element = this.findBinding(Device.BINDING.PRINT, true);\n        if (element) element.value = \"\";\n    }\n\n    /**\n     * doCommand(sText)\n     * \n     * @this {Device}\n     * @param {string} sText\n     */\n    doCommand(sText)\n    {\n        let afnHandlers = this.findHandlers(Device.HANDLER.COMMAND);\n        if (afnHandlers) {\n\n            let i = sText.lastIndexOf('\\n', sText.length - 2);\n            let sCommand = sText.slice(i + 1, -1) || this.sCommandPrev;\n            this.sCommandPrev = \"\";\n            sCommand = sCommand.trim();\n            let aTokens = sCommand.split(' ');\n    \n            switch(aTokens[0]) {\n            case 'c':\n                let c = aTokens[1];\n                if (c) {\n                    this.println(\"set category '\" + c + \"'\");\n                    this.setCategory(c);\n                } else {\n                    c = this.setCategory();\n                    if (c) {\n                        this.println(\"cleared category '\" + c + \"'\");\n                    } else {\n                        this.println(\"no category set\");\n                    }\n                }\n                break;\n            case '?':\n                let sResult = \"\";\n                Device.COMMANDS.forEach(cmd => {sResult += '\\n' + cmd;});\n                if (sResult) this.println(\"default commands:\" + sResult);\n                /* falls through */\n            default:\n                aTokens.unshift(sCommand);\n                for (let i = 0; i < afnHandlers.length; i++) {\n                    if (afnHandlers[i](aTokens, this)) break;\n                }\n                break;\n            }\n        }\n    }\n    \n    /**\n     * findBinding(name, fAll)\n     *\n     * This will search the current device's bindings, and optionally all the device bindings within the\n     * machine.  If the binding is found in another device, that binding is recorded in this device as well.\n     *\n     * @this {Device}\n     * @param {string} name\n     * @param {boolean} [fAll]\n     * @returns {Element|null|undefined}\n     */\n    findBinding(name, fAll = false)\n    {\n        let element = this.bindings[name];\n        if (element === undefined && fAll) {\n            let devices = Device.Machines[this.idMachine];\n            for (let i in devices) {\n                element = devices[i].bindings[name];\n                if (element) break;\n            }\n            if (!element) element = null;\n            this.bindings[name] = element;\n        }\n        return element;\n    }\n\n    /**\n     * findDevice(idDevice)\n     *\n     * @this {Device}\n     * @param {string} idDevice\n     * @returns {Device|undefined}\n     */\n    findDevice(idDevice)\n    {\n        let device;\n        let devices = Device.Machines[this.idMachine];\n        if (devices) {\n            for (let i in devices) {\n                if (devices[i].idDevice == idDevice) {\n                    device = devices[i];\n                    break;\n                }\n            }\n        }\n        return device;\n    }\n\n    /**\n     * findDeviceByClass(idClass)\n     *\n     * @this {Device}\n     * @param {string} idClass\n     * @returns {Device|undefined}\n     */\n    findDeviceByClass(idClass)\n    {\n        let device;\n        let devices = Device.Machines[this.idMachine];\n        if (devices) {\n            for (let i in devices) {\n                if (devices[i].config['class'] == idClass) {\n                    device = devices[i];\n                    break;\n                }\n            }\n        }\n        return device;\n    }\n\n    /**\n     * findHandlers(sType)\n     *\n     * @this {Device}\n     * @param {string} sType\n     * @returns {Array.<function(Array.<string>,Device)>|undefined}\n     */\n    findHandlers(sType)\n    {\n        return Device.Handlers[this.idMachine] && Device.Handlers[this.idMachine][sType];\n    }\n\n    /**\n     * getBindingID(name)\n     * \n     * Since this.bindings contains the actual elements, not their original IDs, we must delve back into\n     * the original this.config['bindings'] to determine the original ID.\n     * \n     * @this {Device}\n     * @param {string} name \n     * @returns {string|undefined}\n     */\n    getBindingID(name)\n    {\n        return this.config['bindings'] && this.config['bindings'][name];\n    }\n    \n    /**\n     * getBindingText(name)\n     *\n     * @this {Device}\n     * @param {string} name\n     * @return {string|undefined}\n     */\n    getBindingText(name)\n    {\n        let sText;\n        let element = this.bindings[name];\n        if (element) sText = element.textContent;\n        return sText;\n    }\n\n    /**\n     * getBounded(n, min, max)\n     *\n     * Restricts n to the bounds defined by min and max.  A side-effect is ensuring that the return\n     * value is ALWAYS a number, even n is not.\n     *\n     * @this {Device}\n     * @param {number} n\n     * @param {number} min\n     * @param {number} max\n     * @returns {number} (updated n)\n     */\n    getBounded(n, min, max)\n    {\n\n        n = +n || 0;\n        if (n < min) n = min;\n        if (n > max) n = max;\n        return n;\n    }\n\n    /**\n     * getDefault(idConfig, defaultValue)\n     *\n     * @this {Device}\n     * @param {string} idConfig\n     * @param {*} defaultValue\n     * @returns {*}\n     */\n    getDefault(idConfig, defaultValue)\n    {\n        let value = this.config[idConfig];\n        if (value === undefined) {\n            value = defaultValue;\n        } else {\n            let type = typeof defaultValue;\n            if (typeof value != type) {\n\n                if (type == \"boolean\") {\n                    value = !!value;\n                } else if (typeof defaultValue == \"number\") {\n                    value = +value;\n                }\n            }\n        }\n        return value;\n    }\n\n    /**\n     * getDefaultBoolean(idConfig, defaultValue)\n     *\n     * @this {Device}\n     * @param {string} idConfig\n     * @param {boolean} defaultValue\n     * @returns {boolean}\n     */\n    getDefaultBoolean(idConfig, defaultValue)\n    {\n        return /** @type {boolean} */ (this.getDefault(idConfig, defaultValue));\n    }\n\n    /**\n     * getDefaultNumber(idConfig, defaultValue)\n     *\n     * @this {Device}\n     * @param {string} idConfig\n     * @param {number} defaultValue\n     * @returns {number}\n     */\n    getDefaultNumber(idConfig, defaultValue)\n    {\n        return /** @type {number} */ (this.getDefault(idConfig, defaultValue));\n    }\n\n    /**\n     * getDefaultString(idConfig, defaultValue)\n     *\n     * @this {Device}\n     * @param {string} idConfig\n     * @param {string} defaultValue\n     * @returns {string}\n     */\n    getDefaultString(idConfig, defaultValue)\n    {\n        return /** @type {string} */ (this.getDefault(idConfig, defaultValue));\n    }\n\n    /**\n     * hasLocalStorage\n     *\n     * If localStorage support exists, is enabled, and works, return true.\n     *\n     * @this {Device}\n     * @returns {boolean}\n     */\n    hasLocalStorage()\n    {\n        if (Device.LocalStorage.Available === undefined) {\n            let f = false;\n            if (window) {\n                try {\n                    window.localStorage.setItem(Device.LocalStorage.Test, Device.LocalStorage.Test);\n                    f = (window.localStorage.getItem(Device.LocalStorage.Test) == Device.LocalStorage.Test);\n                    window.localStorage.removeItem(Device.LocalStorage.Test);\n                } catch(err) {\n                    this.println(err.message);\n                    f = false;\n                }\n            }\n            Device.LocalStorage.Available = f;\n        }\n        return !!Device.LocalStorage.Available;\n    }\n\n    /**\n     * hex(n)\n     *\n     * This is a helper function intended for use in a debugging console, allowing you to display\n     * numbers as hex by evaluating the expression \"this.hex(n)\".  Technically, this should be a static\n     * method, since there's nothing instance-specific about it, but \"this.hex()\" is easier to type than\n     * \"Device.hex()\".\n     *\n     * @this {Device}\n     * @param {number} n\n     */\n    hex(n)\n    {\n        return this.sprintf(\"%x\", n);\n    }\n\n    /**\n     * isCategory(category)\n     *\n     * Use this function to enable/disable any code (eg, print() calls) based on 1) whether specific\n     * categories are required, and 2) whether the specified category is one of them.\n     *\n     * @this {Device}\n     * @param {string} category\n     */\n    isCategoryOn(category)\n    {\n        return (Device.Category && Device.Category.indexOf(category) >= 0);\n    }\n\n    /**\n     * isUserAgent(s)\n     *\n     * Check the browser's user-agent string for the given substring; \"iOS\" and \"MSIE\" are special values you can\n     * use that will match any iOS or MSIE browser, respectively (even IE11, in the case of \"MSIE\").\n     *\n     * 2013-11-06: In a questionable move, MSFT changed the user-agent reported by IE11 on Windows 8.1, eliminating\n     * the \"MSIE\" string (which MSDN calls a \"version token\"; see http://msdn.microsoft.com/library/ms537503.aspx);\n     * they say \"public websites should rely on feature detection, rather than browser detection, in order to design\n     * their sites for browsers that don't support the features used by the website.\" So, in IE11, we get a user-agent\n     * that tries to fool apps into thinking the browser is more like WebKit or Gecko:\n     *\n     *      Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\n     *\n     * @this {Device}\n     * @param {string} s is a substring to search for in the user-agent; as noted above, \"iOS\" and \"MSIE\" are special values\n     * @returns {boolean} is true if the string was found, false if not\n     */\n    isUserAgent(s)\n    {\n        if (window) {\n            let userAgent = window.navigator.userAgent;\n            return s == \"iOS\" && !!userAgent.match(/(iPod|iPhone|iPad)/) && !!userAgent.match(/AppleWebKit/) || s == \"MSIE\" && !!userAgent.match(/(MSIE|Trident)/) || (userAgent.indexOf(s) >= 0);\n        }\n        return false;\n    }\n\n    /**\n     * loadLocalStorage()\n     *\n     * @this {Device}\n     * @returns {Array|null}\n     */\n    loadLocalStorage()\n    {\n        let state = null;\n        if (this.hasLocalStorage()) {\n            let sValue;\n            if (window) {\n                try {\n                    sValue = window.localStorage.getItem(this.idMachine);\n                    if (sValue) state = /** @type {Array} */ (JSON.parse(sValue));\n                } catch (err) {\n                    this.println(err.message);\n                }\n            }\n        }\n        return state;\n    }\n\n    /**\n     * print(s)\n     *\n     * @this {Device}\n     * @param {string} s\n     */\n    print(s)\n    {\n        if (this.isCategoryOn(Device.CATEGORY.BUFFER)) {\n            Device.PrintBuffer += s;\n            return;\n        }\n        let element = this.findBinding(Device.BINDING.PRINT, true);\n        if (element) {\n            element.value += s;\n            /*\n             * Prevent the <textarea> from getting too large; otherwise, printing becomes slower and slower.\n             */\n            if (!DEBUG && element.value.length > 8192) {\n                element.value = element.value.substr(element.value.length - 4096);\n            }\n            element.scrollTop = element.scrollHeight;\n        }\n        if (DEBUG || !element) {\n            let i = s.lastIndexOf('\\n');\n            if (i >= 0) {\n                console.log(Device.PrintBuffer + s.substr(0, i));\n                Device.PrintBuffer = \"\";\n                s = s.substr(i + 1);\n            }\n            Device.PrintBuffer += s;\n        }\n    }\n\n    /**\n     * println(s)\n     *\n     * @this {Device}\n     * @param {string} s\n     */\n    println(s)\n    {\n        this.print(s + '\\n');\n    }\n\n    /**\n     * printf(format, ...args)\n     *\n     * @this {Device}\n     * @param {string} format\n     * @param {...} args\n     */\n    printf(format, ...args)\n    {\n        this.print(this.sprintf(format, ...args));\n    }\n\n    /**\n     * removeDevice(idDevice)\n     *\n     * @this {Device}\n     * @param {string} idDevice\n     * @returns {boolean} (true if successfully removed, false if not)\n     */\n    removeDevice(idDevice)\n    {\n        let device;\n        let devices = Device.Machines[this.idMachine];\n        if (devices) {\n            for (let i in devices) {\n                if (devices[i].idDevice == idDevice) {\n                    devices.splice(i, 1);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * saveLocalStorage(state)\n     *\n     * @this {Device}\n     * @param {Array} state\n     * @returns {boolean} true if successful, false if error\n     */\n    saveLocalStorage(state)\n    {\n        if (this.hasLocalStorage()) {\n            let sValue = JSON.stringify(state);\n            try {\n                window.localStorage.setItem(this.idMachine, sValue);\n                return true;\n            } catch(err) {\n                this.println(err.message);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * setBindingText(name, text)\n     *\n     * @this {Device}\n     * @param {string} name\n     * @param {string} text\n     */\n    setBindingText(name, text)\n    {\n        let element = this.bindings[name];\n        if (element) element.textContent = text;\n    }\n\n    /**\n     * setCategory(category)\n     *\n     * Use this function to set/clear categories.  Generally, these are thought of as print categories,\n     * allowing code to use isCategoryOn() to decide whether to print a certain category of messages, but\n     * it can be used to control any functionality related to a given category, not just printing.\n     *\n     * You usually want to use one of the predefined category strings in Device.CATEGORIES, but in reality,\n     * the category string can be anything you want.\n     *\n     * If you want to enable multiple categories, specify them all in a single string (eg, \"time|buffer\",\n     * or Device.CATEGORY.TIME + Device.CATEGORY.BUFFER).\n     *\n     * Device.CATEGORY.BUFFER is special, causing all print calls to be buffered; the print buffer will be\n     * dumped as soon as setCategory() clears Device.CATEGORY.BUFFER.\n     *\n     * @this {Device}\n     * @param {string} [category] (if undefined, clear previous category)\n     * @returns {string}\n     */\n    setCategory(category = \"\")\n    {\n        let cPrev = Device.Category;\n        let fFlush = (!category && this.isCategoryOn(Device.CATEGORY.BUFFER));\n        Device.Category = category;\n        if (fFlush) {\n            let sBuffer = Device.PrintBuffer;\n            Device.PrintBuffer = \"\";\n            this.print(sBuffer);\n        }\n        return cPrev;\n    }\n\n    /**\n     * sprintf(format, ...args)\n     *\n     * Copied from the CCjs project (https://github.com/jeffpar/ccjs/blob/master/lib/stdio.js) and extended.\n     *\n     * Far from complete, let alone sprintf-compatible, but it's adequate for the handful of sprintf-style format\n     * specifiers that I use.\n     *\n     * @this {Device}\n     * @param {string} format\n     * @param {...} args\n     * @returns {string}\n     */\n    sprintf(format, ...args)\n    {\n        let buffer = \"\";\n        let aParts = format.split(/%([-+ 0#]?)([0-9]*)(\\.?)([0-9]*)([hlL]?)([A-Za-z%])/);\n\n        let iArg = 0, iPart;\n        for (iPart = 0; iPart < aParts.length - 7; iPart += 7) {\n\n            buffer += aParts[iPart];\n\n            let arg = args[iArg++];\n            let flags = aParts[iPart+1];\n            let minimum = +aParts[iPart+2] || 0;\n            let precision = +aParts[iPart+4] || 0;\n            let conversion = aParts[iPart+6];\n            let ach = null, s;\n\n            switch(conversion) {\n            case 'd':\n                /*\n                 * We could use \"arg |= 0\", but there may be some value to supporting integers > 32 bits.\n                 */\n                arg = Math.trunc(arg);\n                /* falls through */\n\n            case 'f':\n                s = Math.trunc(arg) + \"\";\n                if (precision) {\n                    minimum -= (precision + 1);\n                }\n                if (s.length < minimum) {\n                    if (flags == '0') {\n                        if (arg < 0) minimum--;\n                        s = (\"0000000000\" + Math.abs(arg)).slice(-minimum);\n                        if (arg < 0) s = '-' + s;\n                    } else {\n                        s = (\"          \" + s).slice(-minimum);\n                    }\n                }\n                if (precision) {\n                    arg = Math.trunc((arg - Math.trunc(arg)) * Math.pow(10, precision));\n                    s += '.' + (\"0000000000\" + Math.abs(arg)).slice(-precision);\n                }\n                buffer += s;\n                break;\n\n            case 's':\n                while (arg.length < minimum) {\n                    if (flags == '-') {\n                        arg += ' ';\n                    } else {\n                        arg = ' ' + arg;\n                    }\n                }\n                buffer += arg;\n                break;\n\n            case 'X':\n                ach = Device.HexUpperCase;\n                /* falls through */\n\n            case 'x':\n                if (!ach) ach = Device.HexLowerCase;\n                s = \"\";\n                do {\n                    s = ach[arg & 0xf] + s;\n                    arg >>>= 4;\n                } while (--minimum > 0 || arg);\n                buffer += s;\n                break;\n\n            default:\n                /*\n                 * The supported ANSI C set of conversions: \"dioxXucsfeEgGpn%\"\n                 */\n                buffer += \"(unrecognized printf conversion %\" + conversion + \")\";\n                break;\n            }\n        }\n\n        buffer += aParts[iPart];\n        return buffer;\n    }\n\n    /**\n     * getURLParms(sParms)\n     *\n     * @param {string} [sParms] containing the parameter portion of a URL (ie, after the '?')\n     * @returns {Object} containing properties for each parameter found\n     */\n    static getURLParms(sParms)\n    {\n        let parms = Device.URLParms;\n        if (!parms) {\n            parms = {};\n            if (window) {\n                if (!sParms) {\n                    /*\n                     * Note that window.location.href returns the entire URL, whereas window.location.search\n                     * returns only the parameters, if any (starting with the '?', which we skip over with a substr() call).\n                     */\n                    sParms = window.location.search.substr(1);\n                }\n                let match;\n                let pl = /\\+/g; // RegExp for replacing addition symbol with a space\n                let search = /([^&=]+)=?([^&]*)/g;\n                let decode = function decodeParameter(s) {\n                    return decodeURIComponent(s.replace(pl, \" \")).trim();\n                };\n\n                while ((match = search.exec(sParms))) {\n                    parms[decode(match[1])] = decode(match[2]);\n                }\n            }\n            Device.URLParms = parms;\n        }\n        return parms;\n    }\n}\n\nDevice.BINDING = {\n    CLEAR:      \"clear\",\n    PRINT:      \"print\"\n};\n\n/*\n * List of standard categories.\n *\n * Device.CATEGORY.BUFFER is special, causing all print calls to be buffered; the print buffer will be\n * dumped as soon as setCategory() clears Device.CATEGORY.BUFFER.\n */\nDevice.CATEGORY = {\n    TIME:       \"time\",\n    BUFFER:     \"buffer\"\n};\n\nDevice.COMMANDS = [\n    \"c\\tset category\"\n];\n\nDevice.HANDLER = {\n    COMMAND:    \"command\"\n};\n\nDevice.Alerts = {\n    list:       [],\n    Version:    \"version\"\n};\n\nDevice.LocalStorage = {\n    Available:  undefined,\n    Test:       \"PCjs.localStorage\"\n};\n\n/**\n * Handlers is a global object whose properties are machine IDs, each of which contains zero or more\n * handler IDs, each of which contains an arrays of functions.\n *\n * @type {Object}\n */\nDevice.Handlers = {};\n\n/**\n * Machines is a global object whose properties are machine IDs and whose values are arrays of Devices.\n *\n * @type {Object}\n */\nDevice.Machines = {};\n\n/**\n * Category is a global string that contains zero or more Device.CATEGORY strings; see setCategory().\n *\n * @type {string}\n */\nDevice.Category = \"\";\n\n/**\n * PrintBuffer is a global string that buffers partial lines for our print services when using console.log().\n *\n * @type {string}\n */\nDevice.PrintBuffer = \"\";\n\n/*\n * Handy global constants\n */\nDevice.HexLowerCase = \"0123456789abcdef\";\nDevice.HexUpperCase = \"0123456789ABCDEF\";\n\n/**\n * @copyright http://pcjs.org/modules/devices/input.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), location: Array.<number>, map: (Array.<Array.<number>>|undefined), drag: (boolean|undefined), scroll: (boolean|undefined), hexagonal: (boolean|undefined), buttonDelay: (number|undefined) }} */\nvar InputConfig;\n\n/**\n * @class {Input}\n * @unrestricted\n * @property {InputConfig} config\n * @property {Array.<number>} location\n * @property {Array.<Array.<number>>} map\n * @property {boolean} fDrag\n * @property {boolean} fScroll\n * @property {boolean} fHexagonal\n * @property {number} buttonDelay\n * @property {{\n *  surface: HTMLImageElement|undefined\n * }} bindings\n */\nclass Input extends Device {\n    /**\n     * Input(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"input\": {\n     *        \"class\": \"Input\",\n     *        \"location\": [139, 325, 368, 478, 0.34, 0.5, 640, 853],\n     *        \"map\": [\n     *          [\"2nd\",  \"inv\",  \"lnx\",  \"\\\\b\",  \"clr\"],\n     *          [\"lrn\",  \"xchg\", \"sq\",   \"sqrt\", \"rcp\"],\n     *          [\"sst\",  \"sto\",  \"rcl\",  \"sum\",  \"exp\"],\n     *          [\"bst\",  \"ee\",   \"(\",    \")\",    \"/\"],\n     *          [\"gto\",  \"7\",    \"8\",    \"9\",    \"*\"],\n     *          [\"sbr\",  \"4\",    \"5\",    \"6\",    \"-\"],\n     *          [\"rst\",  \"1\",    \"2\",    \"3\",    \"+\"],\n     *          [\"r/s\",  \"0\",    \".\",    \"+/-\",  \"=|\\\\r\"]\n     *        ],\n     *        \"drag\": false,\n     *        \"bindings\": {\n     *          \"surface\": \"imageTI57\",\n     *          \"power\": \"powerTI57\",\n     *          \"reset\": \"resetTI57\"\n     *        }\n     *      }\n     *\n     * A word about the \"power\" button: the page will likely use absolute positioning to overlay the HTML button\n     * onto the image of the physical button, and the temptation might be to use the style \"display:none\" to hide\n     * it, but \"opacity:0\" should be used instead, because otherwise our efforts to use it as focusable element\n     * may fail.\n     *\n     * @this {Input}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {InputConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, Input.VERSION, config);\n\n        this.time = /** @type {Time} */ (this.findDeviceByClass(Machine.CLASS.TIME));\n\n        this.onInput = null;\n        this.onPower = null;\n        this.onReset = null;\n        this.onHover = null;\n\n        /*\n         * If 'drag' is true, then the onInput() handler will be called whenever the current col and/or row\n         * changes, even if the mouse hasn't been released since the previous onInput() call.\n         *\n         * The default is false, because in general, allowing drag is a bad idea for calculator buttons.  But\n         * I've made this an option for other input surfaces, like LED arrays, where you might want to turn a\n         * series of LEDs on or off.\n         */\n        this.fDrag = this.getDefaultBoolean('drag', false);\n\n        /*\n         * If 'scroll' is true, then we do NOT call preventDefault() on touch events; this permits the input\n         * surface to be scrolled like any other part of the page.  The default is false, because this has other\n         * side-effects (eg, inadvertent zooms).\n         */\n        this.fScroll = this.getDefaultBoolean('scroll', false);\n\n        /*\n         * This is set on receipt of the first 'touch' event of any kind, and is used by the 'mouse' event\n         * handlers to disregard mouse events if set.\n         */\n        this.fTouch = false;\n\n        let element = this.bindings[Input.BINDING.SURFACE];\n        if (element) {\n            /*\n             * The location array, eg:\n             *\n             *      \"location\": [139, 325, 368, 478, 0.34, 0.5, 640, 853, 180, 418, 75, 36],\n             *\n             * contains the top left corner (xInput, yInput) and dimensions (cxInput, cyInput)\n             * of the input rectangle where the buttons described in the map are located, relative\n             * to the surface image.  It also describes the average amount of horizontal and vertical\n             * space between buttons, as fractions of the average button width and height (hGap, vGap).\n             *\n             * With all that, we can now calculate the center lines for each column and row.  This\n             * obviously assumes that all the buttons are evenly laid out in a perfect grid.  For\n             * devices that don't have such a nice layout, a different location array format will\n             * have to be defined.\n             *\n             * NOTE: While element.naturalWidth and element.naturalHeight should, for all modern\n             * browsers, contain the surface image's dimensions as well, those values still might not\n             * be available if our constructor is called before the page's onload event has fired,\n             * so we allow them to be stored in the next two elements of the location array, too.\n             *\n             * Finally, the position and size of the device's power button may be stored in the array\n             * as well, in case some browsers refuse to generate onClickPower() events (eg, if they\n             * think the button is inaccessible/not visible).\n             */\n            let location = this.config['location'];\n            this.xInput = location[0];\n            this.yInput = location[1];\n            this.cxInput = location[2];\n            this.cyInput = location[3];\n            this.hGap = location[4] || 1.0;\n            this.vGap = location[5] || 1.0;\n            this.cxSurface = location[6] || element.naturalWidth || this.cxInput;\n            this.cySurface = location[7] || element.naturalHeight || this.cyInput;\n            this.xPower = location[8] || 0;\n            this.yPower = location[9] || 0;\n            this.cxPower = location[10] || 0;\n            this.cyPower = location[11] || 0;\n            this.map = this.config['map'];\n            if (this.map) {\n                this.nRows = this.map.length;\n                this.nCols = this.map[0].length;\n            } else {\n                this.nCols = this.hGap;\n                this.nRows = this.vGap;\n                this.hGap = this.vGap = 0;\n            }\n\n            /*\n             * If 'hexagonal' is true, then we treat the input grid as hexagonal, where even rows of the associated\n             * display are offset.\n             */\n            this.fHexagonal = this.getDefaultBoolean('hexagonal', false);\n            \n            /*\n             * The 'buttonDelay' setting is only necessary for devices (ie, old calculator chips) that are either slow\n             * to respond and/or have debouncing logic that would otherwise be defeated.\n             */\n            this.buttonDelay = this.getDefaultNumber('buttonDelay', 0);\n\n            /*\n             * To calculate the average button width (cxButton), we know that the overall width\n             * must equal the sum of all the button widths + the sum of all the button gaps:\n             *\n             *      cxInput = nCols * cxButton + nCols * (cxButton * hGap)\n             *\n             * The number of gaps would normally be (nCols - 1), but we require that cxInput include\n             * only 1/2 the gap at the edges, too.  Solving for cxButton:\n             *\n             *      cxButton = cxInput / (nCols + nCols * hGap)\n             */\n            this.cxButton = (this.cxInput / (this.nCols + this.nCols * this.hGap))|0;\n            this.cyButton = (this.cyInput / (this.nRows + this.nRows * this.vGap))|0;\n            this.cxGap = (this.cxButton * this.hGap)|0;\n            this.cyGap = (this.cyButton * this.vGap)|0;\n\n            /*\n             * xStart and yStart record the last 'touchstart' or 'mousedown' position on the surface\n             * image; they will be reset to -1 when movement has ended (eg, 'touchend' or 'mouseup').\n             */\n            this.xStart = this.yStart = -1;\n\n            this.captureMouse(element);\n            this.captureTouch(element);\n\n            if (this.time) {\n                /*\n                 * We use a timer for the touch/mouse release events, to ensure that the machine had\n                 * enough time to notice the input before releasing it.\n                 */\n                let input = this;\n                if (this.buttonDelay) {\n                    this.timerInputRelease = this.time.addTimer(\"timerInputRelease\", function onInputRelease() {\n                        if (input.xStart < 0 && input.yStart < 0) { // auto-release ONLY if it's REALLY released\n                            input.setPosition(-1, -1);\n                        }\n                    });\n                }\n                if (this.map) {\n                    /*\n                     * This auto-releases the last key reported after an appropriate delay, to ensure that\n                     * the machine had enough time to notice the corresponding button was pressed.\n                     */\n                    if (this.buttonDelay) {\n                        this.timerKeyRelease = this.time.addTimer(\"timerKeyRelease\", function onKeyRelease() {\n                            input.onKeyTimer();\n                        });\n                    }\n                    /*\n                     * I used to maintain a single-key buffer (this.keyPressed) and would immediately release\n                     * that key as soon as another key was pressed, but it appears that the ROM wants a minimum\n                     * delay between release and the next press -- probably for de-bouncing purposes.  So we\n                     * maintain a key state: 0 means no key has gone down or up recently, 1 means a key just went\n                     * down, and 2 means a key just went up.  keysPressed maintains a queue of keys (up to 16)\n                     * received while key state is non-zero.\n                     */\n                    this.keyState = 0;\n                    this.keysPressed = [];\n                    /*\n                     * I'm attaching my 'keypress' handlers to the document object, since image elements are\n                     * not focusable.  I'm disinclined to do what I've done with other machines (ie, create an\n                     * invisible <textarea> overlay), because in this case, I don't really want a soft keyboard\n                     * popping up and obscuring part of the display.\n                     *\n                     * A side-effect, however, is that if the user attempts to explicitly give the image\n                     * focus, we don't have anything for focus to attach to.  We address that in onMouseDown(),\n                     * by redirecting focus to the \"power\" button, if any, not because we want that or any other\n                     * button to have focus, but simply to remove focus from any other input element on the page.\n                     */\n                    this.captureKeys(document);\n                }\n            }\n\n            /*\n             * Finally, the active input state.  If there is no active input, col and row are -1.  After\n             * this point, these variables will be updated by setPosition().\n             */\n            this.col = this.row = -1;\n        }\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Input}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let input = this;\n\n        switch(binding) {\n\n        case Input.BINDING.POWER:\n            element.onclick = function onClickPower() {\n                if (input.onPower) input.onPower();\n            };\n            break;\n\n        case Input.BINDING.RESET:\n            element.onclick = function onClickReset() {\n                if (input.onReset) input.onReset();\n            };\n            break;\n        }\n        super.addBinding(binding, element);\n    }\n\n    /**\n     * addClick(onPower, onReset)\n     *\n     * Called by the Chip device to set up power and reset notifications.\n     *\n     * @this {Input}\n     * @param {function()} [onPower] (called when the \"power\" button, if any, is clicked)\n     * @param {function()} [onReset] (called when the \"reset\" button, if any, is clicked)\n     */\n    addClick(onPower, onReset)\n    {\n        this.onPower = onPower;\n        this.onReset = onReset;\n    }\n\n    /**\n     * addHover(onHover)\n     *\n     * @this {Input}\n     * @param {function(number, number)} onHover\n     */\n    addHover(onHover)\n    {\n        this.onHover = onHover;\n    }\n\n    /**\n     * addInput(onInput)\n     *\n     * Called by the Chip device to set up input notifications.\n     *\n     * @this {Input}\n     * @param {function(number,number)} onInput\n     */\n    addInput(onInput)\n    {\n        this.onInput = onInput;\n    }\n\n    /**\n     * advanceKeyState()\n     *\n     * @this {Input}\n     */\n    advanceKeyState()\n    {\n        if (!this.buttonDelay) {\n            this.onKeyTimer();\n        } else {\n            this.time.setTimer(this.timerKeyRelease, this.buttonDelay);\n        }\n    }\n\n    /**\n     * captureKeys(element)\n     *\n     * @this {Input}\n     * @param {Document|HTMLElement} element\n     */\n    captureKeys(element)\n    {\n        let input = this;\n        element.addEventListener(\n            'keydown',\n            function onKeyDown(event) {\n                event = event || window.event;\n                let activeElement = document.activeElement;\n                if (activeElement == input.bindings[Input.BINDING.POWER]) {\n                    let keyCode = event.which || event.keyCode;\n                    let ch = Input.KEYCODE[keyCode];\n                    if (ch && input.onKeyPress(ch)) event.preventDefault();\n                }\n            }\n        );\n        element.addEventListener(\n            'keypress',\n            function onKeyPress(event) {\n                event = event || window.event;\n                let charCode = event.which || event.charCode;\n                let ch = String.fromCharCode(charCode);\n                if (ch && input.onKeyPress(ch)) event.preventDefault();\n            }\n        );\n    }\n\n    /**\n     * captureMouse(element)\n     *\n     * @this {Input}\n     * @param {HTMLImageElement} element\n     */\n    captureMouse(element)\n    {\n        let input = this;\n\n        element.addEventListener(\n            'mousedown',\n            function onMouseDown(event) {\n                if (input.fTouch) return;\n                /*\n                 * If there are any text input elements on the page that might currently have focus,\n                 * this is a good time to divert focus to a focusable element of our own (eg, a \"power\"\n                 * button).  Otherwise, key presses could be confusingly processed in two places.\n                 *\n                 * Unfortunately, setting focus on an element can cause the browser to scroll the element\n                 * into view, so to avoid that, we use the following scrollTo() work-around.\n                 */\n                let button = input.bindings[Input.BINDING.POWER];\n                if (button) {\n                    let x = window.scrollX, y = window.scrollY;\n                    button.focus();\n                    window.scrollTo(x, y);\n                }\n                if (!event.button) {\n                    input.processEvent(element, Input.ACTION.PRESS, event);\n                }\n            }\n        );\n\n        element.addEventListener(\n            'mousemove',\n            function onMouseMove(event) {\n                if (input.fTouch) return;\n                input.processEvent(element, Input.ACTION.MOVE, event);\n            }\n        );\n\n        element.addEventListener(\n            'mouseup',\n            function onMouseUp(event) {\n                if (input.fTouch) return;\n                if (!event.button) {\n                    input.processEvent(element, Input.ACTION.RELEASE, event);\n                }\n            }\n        );\n\n        element.addEventListener(\n            'mouseout',\n            function onMouseOut(event) {\n                if (input.fTouch) return;\n                if (input.xStart < 0) {\n                    input.processEvent(element, Input.ACTION.MOVE, event);\n                } else {\n                    input.processEvent(element, Input.ACTION.RELEASE, event);\n                }\n            }\n        );\n    }\n\n    /**\n     * captureTouch(element)\n     *\n     * @this {Input}\n     * @param {HTMLImageElement} element\n     */\n    captureTouch(element)\n    {\n        let input = this;\n\n        /*\n         * NOTE: The mouse event handlers below deal only with events where the left button is involved\n         * (ie, left button is pressed, down, or released).\n         */\n        element.addEventListener(\n            'touchstart',\n            function onTouchStart(event) {\n                /*\n                 * Under normal circumstances (ie, when fScroll is false), when any touch events arrive,\n                 * processEvent() calls preventDefault(), which prevents a variety of potentially annoying\n                 * behaviors (ie, zooming, scrolling, fake mouse events, etc).  Under non-normal circumstances,\n                 * (ie, when fScroll is true), we set fTouch on receipt of a 'touchstart' event, which will\n                 * help our mouse event handlers avoid any redundant actions due to fake mouse events.\n                 */\n                if (input.fScroll) input.fTouch = true;\n                input.processEvent(element, Input.ACTION.PRESS, event);\n            }\n        );\n\n        element.addEventListener(\n            'touchmove',\n            function onTouchMove(event) {\n                input.processEvent(element, Input.ACTION.MOVE, event);\n            }\n        );\n\n        element.addEventListener(\n            'touchend',\n            function onTouchEnd(event) {\n                input.processEvent(element, Input.ACTION.RELEASE, event);\n            }\n        );\n    }\n\n    /**\n     * onKeyPress(ch)\n     *\n     * @this {Input}\n     * @param {string} ch\n     * @returns {boolean} (true if processed, false if not)\n     */\n    onKeyPress(ch)\n    {\n        for (let row = 0; row < this.map.length; row++) {\n            let rowMap = this.map[row];\n            for (let col = 0; col < rowMap.length; col++) {\n                let aParts = rowMap[col].split('|');\n                if (aParts.indexOf(ch) >= 0) {\n                    if (this.keyState) {\n                        if (this.keysPressed.length < 16) {\n                            this.keysPressed.push(ch);\n                        }\n                    } else {\n                        this.keyState = 1;\n                        this.setPosition(col, row);\n                        this.advanceKeyState();\n                    }\n                    return true;\n                }\n            }\n        }\n        this.printf(\"unrecognized key '%s' (0x%02x)\\n\", ch, ch.charCodeAt(0));\n        return false;\n    }\n\n    /**\n     * onKeyTimer()\n     *\n     * @this {Input}\n     */\n    onKeyTimer()\n    {\n\n        if (this.keyState == 1) {\n            this.keyState++;\n            this.setPosition(-1, -1);\n            this.advanceKeyState();\n        } else {\n            this.keyState = 0;\n            if (this.keysPressed.length) {\n                this.onKeyPress(this.keysPressed.shift());\n            }\n        }\n    }\n\n    /**\n     * processEvent(element, action, event)\n     *\n     * @this {Input}\n     * @param {HTMLImageElement} element\n     * @param {number} action\n     * @param {Event|MouseEvent|TouchEvent} [event] (eg, the object from a 'touch' or 'mouse' event)\n     */\n    processEvent(element, action, event)\n    {\n        let col = -1, row = -1;\n        let fMultiTouch = false;\n        let x, y, xInput, yInput, fButton, fInput, fPower;\n\n        if (action < Input.ACTION.RELEASE) {\n\n            /**\n             * @name Event\n             * @property {Array} targetTouches\n             */\n            event = event || window.event;\n\n            if (!event.targetTouches || !event.targetTouches.length) {\n                x = event.pageX;\n                y = event.pageY;\n            } else {\n                x = event.targetTouches[0].pageX;\n                y = event.targetTouches[0].pageY;\n                fMultiTouch = (event.targetTouches.length > 1);\n            }\n\n            /*\n             * Touch coordinates (that is, the pageX and pageY properties) are relative to the page, so to make\n             * them relative to the element, we must subtract the element's left and top positions.  This Apple web page:\n             *\n             *      https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/AddingMouseandTouchControlstoCanvas/AddingMouseandTouchControlstoCanvas.html\n             *\n             * makes it sound simple, but it turns out we have to walk the element's entire \"parentage\" of DOM elements\n             * to get the exact offsets.\n             */\n            let xOffset = 0;\n            let yOffset = 0;\n            let elementNext = element;\n            do {\n                if (!isNaN(elementNext.offsetLeft)) {\n                    xOffset += elementNext.offsetLeft;\n                    yOffset += elementNext.offsetTop;\n                }\n            } while ((elementNext = elementNext.offsetParent));\n\n            /*\n             * Due to the responsive nature of our pages, the displayed size of the surface image may be smaller than\n             * the original size, and the coordinates we receive from events are based on the currently displayed size.\n             */\n            x = ((x - xOffset) * (this.cxSurface / element.offsetWidth))|0;\n            y = ((y - yOffset) * (this.cySurface / element.offsetHeight))|0;\n\n            xInput = x - this.xInput;\n            yInput = y - this.yInput;\n\n            /*\n             * fInput is set if the event occurred somewhere within the input region (ie, the calculator keypad),\n             * either on a button or between buttons, whereas fButton is set if the event occurred squarely (rectangularly?)\n             * on a button.  fPower deals separately with the power button; it is set if the event occurred on the\n             * power button.\n             */\n            fInput = fButton = false;\n            fPower = (x >= this.xPower && x < this.xPower + this.cxPower && y >= this.yPower && y < this.yPower + this.cyPower);\n\n            /*\n             * I use the top of the input region, less some gap, to calculate a dividing line, above which\n             * default actions should be allowed, and below which they should not.  Ditto for any event inside\n             * the power button.\n             */\n            if (xInput >= 0 && xInput < this.cxInput && yInput + this.cyGap >= 0 || fPower) {\n                /*\n                 * If we allow touch events to be processed, they will generate mouse events as well, causing\n                 * confusion and delays.  We can sidestep that problem by preventing default actions on any event\n                 * that occurs within the input region.  One downside is that you can no longer scroll or zoom the\n                 * image using touch, but that may be just as well, because you probably don't want sloppy touches\n                 * moving your display around (or worse, a rapid double-tap zooming the display).  I do try to\n                 * make one small concession for two-finger zoom operations (see fMultiTouch), but that's a bit\n                 * fiddly, because it depends on both fingers hitting the surface at the same instant.\n                 */\n                if (!fMultiTouch && !this.fScroll) event.preventDefault();\n\n                if (xInput >= 0 && xInput < this.cxInput && yInput >= 0 && yInput < this.cyInput) {\n                    fInput = true;\n                    /*\n                     * The width and height of each column and row could be determined by computing cxGap + cxButton\n                     * and cyGap + cyButton, respectively, but those gap and button sizes are merely estimates, and should\n                     * only be used to help with the final button coordinate checks farther down.\n                     */\n                    let cxCol = (this.cxInput / this.nCols) | 0;\n                    let cyCol = (this.cyInput / this.nRows) | 0;\n                    let colInput = (xInput / cxCol) | 0;\n                    let rowInput = (yInput / cyCol) | 0;\n\n                    /*\n                     * If the grid is hexagonal (aka \"Lite-Brite\" mode), then the cells of even-numbered rows are\n                     * offset horizontally by 1/2 cell.  In addition, the last cell in those rows is unused, so if\n                     * after compensating by 1/2 cell, the target column is the last cell, we set xInput to -1,\n                     * effectively ignoring input on that cell.\n                     */\n                    if (this.fHexagonal && !(rowInput & 0x1)) {\n                        xInput -= (cxCol >> 1);\n                        colInput = (xInput / cxCol) | 0;\n                        if (colInput == this.nCols - 1) xInput = -1;\n                    }\n\n                    /*\n                     * (xCol,yCol) will be the top left corner of the button closest to the point of input.  However, that's\n                     * based on our gap estimate.  If things seem \"too tight\", shrink the gap estimates, which will automatically\n                     * increase the button size estimates.\n                     */\n                    let xCol = colInput * cxCol + (this.cxGap >> 1);\n                    let yCol = rowInput * cyCol + (this.cyGap >> 1);\n\n                    xInput -= xCol;\n                    yInput -= yCol;\n                    if (xInput >= 0 && xInput < this.cxButton && yInput >= 0 && yInput < this.cyButton) {\n                        col = colInput;\n                        row = rowInput;\n                        fButton = true;\n                    }\n                }\n            }\n        }\n\n        if (fMultiTouch) return;\n\n        if (action == Input.ACTION.PRESS) {\n            /*\n             * Record the position of the event, transitioning xStart and yStart to non-negative values.\n             */\n            this.xStart = x;\n            this.yStart = y;\n            if (fInput) {\n                /*\n                 * The event occurred in the input region, so we call setPosition() regardless of whether\n                 * it hit or missed a button.\n                 */\n                this.setPosition(col, row);\n                /*\n                 * On the other hand, if it DID hit a button, then we arm the auto-release timer, to ensure\n                 * a minimum amount of time (ie, BUTTON_DELAY).\n                 */\n                if (fButton && this.buttonDelay) {\n                    this.time.setTimer(this.timerInputRelease, this.buttonDelay, true);\n                }\n            } else if (fPower && this.onPower) {\n                this.onPower();\n            }\n        }\n        else if (action == Input.ACTION.MOVE) {\n            if (this.xStart >= 0 && this.yStart >= 0 && this.fDrag) {\n                this.setPosition(col, row);\n            }\n            else if (this.onHover) {\n                this.onHover(col, row);\n            }\n        }\n        else if (action == Input.ACTION.RELEASE) {\n            /*\n             * Don't immediately signal the release if the release timer is active (let the timer take care of it).\n             */\n            if (!this.buttonDelay || !this.time.isTimerSet(this.timerInputRelease)) {\n                this.setPosition(-1, -1);\n            }\n            this.xStart = this.yStart = -1;\n        }\n        else {\n            this.println(\"unrecognized action: \" + action);\n        }\n    }\n\n    /**\n     * setPosition(col, row)\n     *\n     * @this {Input}\n     * @param {number} col\n     * @param {number} row\n     */\n    setPosition(col, row)\n    {\n        if (col != this.col || row != this.row) {\n            this.col = col;\n            this.row = row;\n            if (this.onInput) this.onInput(col, row);\n        }\n    }\n}\n\nInput.ACTION = {\n    PRESS:      1,              // eg, an action triggered by a 'mousedown' or 'touchstart' event\n    MOVE:       2,              // eg, an action triggered by a 'mousemove' or 'touchmove' event\n    RELEASE:    3               // eg, an action triggered by a 'mouseup' (or 'mouseout') or 'touchend' event\n};\n\nInput.BINDING = {\n    POWER:      \"power\",\n    RESET:      \"reset\",\n    SURFACE:    \"surface\"\n};\n\nInput.KEYCODE = {               // keyCode from keydown/keyup events\n    0x08:       \"\\b\"            // backspace\n};\n\nInput.BUTTON_DELAY = 50;        // minimum number of milliseconds to ensure between button presses and releases\n\nInput.VERSION   = 1.11;\n\n/**\n * @copyright http://pcjs.org/modules/devices/led.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), type: number, width: (number|undefined), height: (number|undefined), cols: (number|undefined), colsExtra: (number|undefined), rows: (number|undefined), rowsExtra: (number|undefined), color: (string|undefined), backgroundColor: (string|undefined), fixed: (boolean|undefined), hexagonal: (boolean|undefined), highlight: (boolean|undefined), persistent: (boolean|undefined) }} */\nvar LEDConfig;\n\n/**\n * The ultimate goal is to provide support for a variety of LED types, such as:\n *\n * 1) LED Light (single light)\n * 2) LED Digit (7-segment digit)\n *\n * The initial goal is to manage a 12-element array of 7-segment LED digits for the TI-57.\n *\n * We create a \"view\" canvas element inside the specified \"container\" element, along with a \"grid\" canvas\n * where all the real drawing occurs; drawView() then renders the \"grid\" canvas onto the \"view\" canvas.\n *\n * Internally, our LED digits have a width and height of 96 and 128.  Those are \"grid\" dimensions which\n * cannot be changed, because our table of drawing coordinates in LED.SEGMENTS are hard-coded for those\n * dimensions.  The cell width and height that are specified as part of the LEDConfig are \"view\" dimensions,\n * which usually match the grid dimensions, but you're welcome to scale them up or down; the browser's\n * drawImage() function takes care of that.\n *\n * There is a low-level function, drawGridSegment(), for drawing specific LED segments of specific digits;\n * generally, you start with clearGrid(), draw all the segments for a given update, and then call drawView()\n * to make them visible.\n *\n * However, our Chip devices operate at a higher level.  They use setLEDState() to modify the state,\n * character, etc, that each of the LED cells should display, which updates our internal LED buffer.  Then\n * at whatever display refresh rate is set (typically 60Hz), drawBuffer() is called to see if the buffer\n * contents have been modified since the last refresh, and if so, it converts the contents of the buffer to\n * a string and calls drawString().\n *\n * This buffering strategy, combined with the buffer \"tickled\" flag (see below), not only makes life\n * simple for the Chip device, but also simulates how the display goes blank for short periods of time while\n * the Chip is busy performing calculations.\n *\n * @class {LED}\n * @unrestricted\n * @property {LEDConfig} config\n * @property {number} type (one of the LED.TYPE values)\n * @property {number} width (default is 96 for LED.TYPE.DIGIT, 32 otherwise; see LED.SIZES)\n * @property {number} height (default is 128 for LED.TYPE.DIGIT, 32 otherwise; see LED.SIZES)\n * @property {number} cols (default is 1)\n * @property {number} rows (default is 1)\n * @property {number} colsView (default is cols)\n * @property {number} rowsView (default is rows)\n * @property {string} color (default is none; ie, transparent foreground)\n * @property {string} colorBackground (default is none; ie, transparent background)\n * @property {boolean} fFixed (default is false, meaning the view may fill the container to its maximum size)\n * @property {boolean} fHexagonal (default is false)\n * @property {boolean} fHighlight (default is true)\n * @property {boolean} fPersistent (default is false for LED.TYPE.DIGIT, meaning the view will be blanked if not refreshed)\n * @property {number} widthView (computed)\n * @property {number} heightView (computed)\n * @property {number} widthGrid (computed)\n * @property {number} heightGrid (computed)\n * @property {HTMLCanvasElement} canvasView\n * @property {CanvasRenderingContext2D} contextView\n * @property {HTMLCanvasElement} canvasGrid\n * @property {CanvasRenderingContext2D} contextGrid\n * @property {{\n *  container: HTMLElement|undefined\n * }} bindings\n * @property {Array.<string|number|null>} buffer\n * @property {Array.<string|number>|null} bufferClone\n * @property {boolean} fBufferModified\n * @property {boolean} fTickled\n */\nclass LED extends Device {\n    /**\n     * LED(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"display\": {\n     *        \"class\": \"LED\",\n     *        \"type\": 3,\n     *        \"cols\": 12,\n     *        \"rows\": 1,\n     *        \"color\": \"red\",\n     *        \"bindings\": {\n     *          \"container\": \"displayTI57\"\n     *        }\n     *      }\n     *\n     * @this {LED}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {LEDConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, LED.VERSION, config);\n\n        let container = this.bindings[LED.BINDING.CONTAINER];\n        if (!container) {\n            let sError = \"LED binding for '\" + LED.BINDING.CONTAINER + \"' missing: '\" + this.config.bindings[LED.BINDING.CONTAINER] + \"'\";\n            throw new Error(sError);\n        }\n\n        let canvasView = /** @type {HTMLCanvasElement} */ (document.createElement(\"canvas\"));\n        if (!canvasView || !canvasView.getContext) {\n            let sError = \"LED device requires HTML5 canvas support\";\n            container.innerHTML = sError;\n            throw new Error(sError);\n        }\n\n        this.container = container;\n        this.canvasView = canvasView;\n\n        this.type = this.getBounded(this.config['type'] || LED.TYPE.ROUND, LED.TYPE.ROUND, LED.TYPE.DIGIT);\n        this.widthCell = LED.SIZES[this.type][0];\n        this.heightCell = LED.SIZES[this.type][1];\n        this.width = this.getDefaultNumber('width', this.widthCell);\n        this.height = this.getDefaultNumber('height', this.heightCell);\n        this.colsView = this.getDefaultNumber('cols',  1);\n        this.cols = this.colsView + this.getDefaultNumber('colsExtra', 0);\n        this.rowsView = this.getDefaultNumber('rows',  1);\n        this.rows = this.rowsView + this.getDefaultNumber('rowsExtra', 0);\n        this.widthView = this.width * this.colsView;\n        this.heightView = this.height * this.rowsView;\n\n        this.colorTransparent = this.getRGBAColor(\"black\", 0);\n        this.colorOn = this.getRGBColor(this.config['color']) || this.colorTransparent;\n        this.colorOff = this.getRGBAColor(this.colorOn, 1.0, 0.25);\n        this.colorHighlight = this.getRGBAColor(this.colorOn, 1.0, 2.0);\n        this.colorBackground = this.getRGBColor(this.config['backgroundColor']);\n\n        /*\n         * We generally want our view canvas to be \"responsive\", not \"fixed\" (ie, to automatically resize\n         * with changes to the overall window size), so we apply the following style attributes (formerly\n         * applied with the \"pcjs-canvas\" style in /modules/shared/templates/components.css):\n         *\n         *      width: 100%;\n         *      height: auto;\n         *\n         * But, if you really don't want that feature, then set the LED config's \"fixed\" property to true.\n         */\n        this.fFixed = this.getDefaultBoolean('fixed', false);\n        if (!this.fFixed) {\n            canvasView.style.width = \"100%\";\n            canvasView.style.height = \"auto\";\n        }\n\n        /*\n         * Hexagonal (aka \"Lite-Brite\" mode) and highlighting options\n         */\n        this.fHexagonal = this.getDefaultBoolean('hexagonal', false);\n        this.fHighlight = this.getDefaultBoolean('highlight', true);\n\n        /*\n         * Persistent LEDS are the default, except for LED.TYPE.DIGIT, which is used with calculator displays\n         * whose underlying hardware must constantly \"refresh\" the LEDs to prevent them from going dark.\n         */\n        this.fPersistent = this.getDefaultBoolean('persistent', (this.type < LED.TYPE.DIGIT));\n\n        canvasView.setAttribute(\"width\", this.widthView.toString());\n        canvasView.setAttribute(\"height\", this.heightView.toString());\n        canvasView.style.backgroundColor = this.colorTransparent;\n        container.appendChild(canvasView);\n        this.contextView = /** @type {CanvasRenderingContext2D} */ (canvasView.getContext(\"2d\"));\n\n        /*\n         * canvasGrid is where all LED segments are composited; then they're drawn onto canvasView.\n         */\n        this.canvasGrid = /** @type {HTMLCanvasElement} */ (document.createElement(\"canvas\"));\n        if (this.canvasGrid) {\n            this.canvasGrid.width = this.widthGrid = this.widthCell * this.colsView;\n            this.canvasGrid.height = this.heightGrid = this.heightCell * this.rowsView;\n            this.contextGrid = this.canvasGrid.getContext(\"2d\");\n        }\n\n        /*\n         * Time to allocate our internal LED buffer.  Other devices access the buffer through interfaces\n         * like setLEDState() and getLEDState().  The LED buffer contains four per elements per LED cell:\n         *\n         *      [0]:    state (eg, ON or OFF or a digit)\n         *      [1]:    color\n         *      [2]:    count(s) (eg, 0 to 8  4-bit counts)\n         *      [3]:    flags (eg, PERIOD, MODIFIED, etc)\n         *\n         * The LED buffer also contains an extra (scratch) row at the end.  This extra row, along with the\n         * dynamically allocated \"clone\" buffer, is used by the LED Controller for direct buffer manipulation;\n         * see the low-level getBuffer(), getBufferClone(), and swapBuffers() interfaces.\n         */\n        this.nBufferInc = 4;\n        this.nBufferCells = ((this.rows + 1) * this.cols) * this.nBufferInc;\n        this.buffer = new Array(this.nBufferCells);\n        this.bufferClone = null;\n        this.nBufferIncExtra = (this.colsView < this.cols? (this.cols - this.colsView) * 4 : 0);\n\n        /*\n         * fBufferModified is straightforward: set to true by any setLEDState() call that actually\n         * changed something in the LED buffer, set to false after every drawBuffer() call, periodic\n         * or otherwise.\n         *\n         * fTickled is a flag which, under normal (idle) circumstances, will constantly be set to\n         * true by periodic display operations that call setLEDState(); we clear it after every\n         * periodic drawBuffer(), so if the machine fails to execute a setBuffer() in a timely manner,\n         * we will see that fTickled hasn't been \"tickled\", and automatically blank the display.\n         * \n         * fShiftedLeft is an optimization that tells drawGrid() when it can minimize the number of\n         * individual cells to redraw, by shifting the entire grid image leftward and redrawing only\n         * the rightmost cells.\n         * \n         * fDisplayOff is a global \"off\" switch for the entire display.\n         */\n        this.fBufferModified = this.fTickled = this.fShiftedLeft = this.fDisplayOff = false;\n\n        /*\n         * This records the location of the most recent LED buffer location updated via setLEDState(),\n         * in case we want to highlight it.\n         */\n        this.iBufferRecent = -1;\n\n        let led = this;\n        this.time = /** @type {Time} */ (this.findDeviceByClass(Machine.CLASS.TIME));\n        if (this.time) {\n            this.time.addAnimator(function ledAnimate() {\n                led.drawBuffer();\n            });\n        }\n    }\n\n    /**\n     * clearBuffer(fDraw)\n     *\n     * @this {LED}\n     * @param {boolean} [fDraw]\n     */\n    clearBuffer(fDraw)\n    {\n        this.initBuffer(this.buffer);\n        this.fBufferModified = this.fTickled = true;\n        if (fDraw) this.drawBuffer(true);\n    }\n\n    /**\n     * clearGrid()\n     *\n     * @this {LED}\n     */\n    clearGrid()\n    {\n        if (this.colorBackground) {\n            this.contextGrid.fillStyle = this.colorBackground;\n            this.contextGrid.fillRect(0, 0, this.widthGrid, this.heightGrid);\n        } else {\n            this.contextGrid.clearRect(0, 0, this.widthGrid, this.heightGrid);\n        }\n    }\n\n    /**\n     * clearGridCell(col, row, xOffset)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {number} xOffset\n     */\n    clearGridCell(col, row, xOffset)\n    {\n        let xDst = col * this.widthCell + xOffset;\n        let yDst = row * this.heightCell;\n        if (this.colorBackground) {\n            this.contextGrid.fillStyle = this.colorBackground;\n            this.contextGrid.fillRect(xDst, yDst, this.widthCell, this.heightCell);\n        } else {\n            this.contextGrid.clearRect(xDst, yDst, this.widthCell, this.heightCell);\n        }\n    }\n\n    /**\n     * drawBuffer(fForced)\n     *\n     * This is our periodic (60Hz) redraw function; however, it can also be called synchronously\n     * (eg, see clearBuffer()).  The other important periodic side-effect of this function is clearing\n     * fTickled, so that if no other setLEDState() calls occur between now and the next drawBuffer(),\n     * an automatic clearBuffer() will be triggered.  This simulates the normal blanking of the display\n     * whenever the machine performs lengthy calculations, because for an LED display to remain lit,\n     * the machine must perform a display operation (\"refresh\") at least 30-60 times per second.\n     *\n     * @this {LED}\n     * @param {boolean} [fForced] (if not set, this is a normal refresh call)\n     */\n    drawBuffer(fForced = false)\n    {\n        if (this.fBufferModified || fForced) {\n            if (this.type < LED.TYPE.DIGIT) {\n                this.drawGrid(fForced);\n            } else {\n                let s = \"\";\n                for (let i = 0; i < this.buffer.length; i += this.nBufferInc) {\n                    s += this.buffer[i] || ' ';\n                    if (this.buffer[i+3] & LED.FLAGS.PERIOD) s += '.';\n                }\n                this.drawString(s);\n            }\n            this.fBufferModified = false;\n            this.iBufferRecent = -1;\n        }\n        else if (!this.fPersistent && !this.fTickled) {\n            this.clearBuffer(true);\n        }\n        this.fTickled = false;\n    }\n\n    /**\n     * drawGrid(fForced)\n     *\n     * Used by drawBuffer() for LED.TYPE.ROUND and LED.TYPE.SQUARE.\n     * \n     * If the buffer was recently shifted left (ie, fShiftedLeft is true), then we take advantage\n     * of that knowledge to use drawImage() to shift the entire grid image left, and then redrawing\n     * only the rightmost visible column.\n     *\n     * @this {LED}\n     * @param {boolean} [fForced] (if not set, this is a normal refresh call)\n     */\n    drawGrid(fForced)\n    {\n        let colRedraw = -1;\n        if (!this.fPersistent || fForced) {\n            this.clearGrid();\n        } else if (this.fShiftedLeft) {\n            colRedraw = this.colsView - 1;\n            let cxVisible = this.widthCell * colRedraw;\n            this.contextGrid.drawImage(this.canvasGrid, this.widthCell, 0, cxVisible, this.heightGrid, 0, 0, cxVisible, this.heightGrid);\n            /*\n             * At this point, the only grid drawing we might need to do now is the column at colRedraw,\n             * but we still loop over the entire buffer to ensure all the cell MODIFIED states are in sync.\n             */\n        }\n        let i = 0;\n        for (let row = 0; row < this.rows; row++) {\n            for (let col = 0; col < this.colsView; col++) {\n                let state = this.buffer[i];\n                let color = this.buffer[i+1] || this.colorTransparent;\n                let fLeaveModified = false;\n                let fModified = !!(this.buffer[i+3] & LED.FLAGS.MODIFIED);\n                let fHighlight = (this.fHighlight && i == this.iBufferRecent);\n                if (this.fDisplayOff && state) {\n                    state = LED.STATE.OFF;\n                    fModified = fLeaveModified = true;\n                }\n                if (fModified || fHighlight || fForced) {\n                    if (colRedraw < 0 || col == colRedraw) {\n                        this.drawGridCell(state, color, col, row, fHighlight);\n                    }\n                    if (fHighlight || fLeaveModified) {\n                        this.buffer[i+3] |= LED.FLAGS.MODIFIED;\n                    } else {\n                        this.buffer[i+3] &= ~LED.FLAGS.MODIFIED;\n                    }\n                }\n                i += this.nBufferInc;\n            }\n            i += this.nBufferIncExtra;\n        }\n        this.fShiftedLeft = false;\n        this.drawView();\n    }\n\n    /**\n     * drawGridCell(state, color, col, row, fHighlight)\n     *\n     * Used by drawGrid() for LED.TYPE.ROUND and LED.TYPE.SQUARE.\n     *\n     * @this {LED}\n     * @param {string} state (eg, LED.STATE.ON or LED.STATE.OFF)\n     * @param {string} [color]\n     * @param {number} [col] (default is zero)\n     * @param {number} [row] (default is zero)\n     * @param {boolean} [fHighlight] (true if the cell should be highlighted; default is false)\n     */\n    drawGridCell(state, color, col = 0, row = 0, fHighlight = false)\n    {\n        let xOffset = 0;\n        if (this.fHexagonal) {\n            if (!(row & 0x1)) {\n                xOffset = (this.widthCell >> 1);\n                if (col == this.colsView - 1) return;\n            }\n        }\n\n        let colorOn, colorOff;\n        if (!color || color == this.colorOn) {\n            colorOn = fHighlight? this.colorHighlight : this.colorOn;\n            colorOff = this.colorOff;\n        } else {\n            colorOn = fHighlight? this.getRGBAColor(color, 1.0, 2.0) : color;\n            colorOff = this.getRGBAColor(color, 1.0, 0.25);\n        }\n\n        let fTransparent = false;\n        let colorCell = (state? colorOn : colorOff);\n        if (colorOn == this.colorTransparent) {\n            colorCell = this.colorBackground;\n            fTransparent = true;\n        }\n\n        let xDst = col * this.widthCell + xOffset;\n        let yDst = row * this.heightCell;\n\n        /*\n         * If this is NOT a persistent LED display, then drawGrid() will have done a preliminary clearGrid(),\n         * eliminating the need to clear individual cells.  Whereas if this IS a persistent LED display, then\n         * we need to clear cells on an as-drawn basis.  If we don't, there could be residual \"bleed over\"\n         * around the edges of the shape we drew here previously.\n         */\n        if (this.fPersistent) {\n            this.clearGridCell(col, row, xOffset);\n        }\n\n        this.contextGrid.fillStyle = colorCell;\n\n        let coords = LED.SHAPES[this.type];\n        if (coords.length == 3) {\n            this.contextGrid.beginPath();\n            this.contextGrid.arc(xDst + coords[0], yDst + coords[1], coords[2], 0, Math.PI * 2);\n            if (fTransparent) {\n                /*\n                 * The following code works as well:\n                 *\n                 *      this.contextGrid.save();\n                 *      this.contextGrid.clip();\n                 *      this.contextGrid.clearRect(xDst, yDst, this.widthCell, this.heightCell);\n                 *      this.contextGrid.restore();\n                 *\n                 * but I assume it's not as efficient.\n                 */\n                this.contextGrid.globalCompositeOperation = \"destination-out\";\n                this.contextGrid.fill();\n                this.contextGrid.globalCompositeOperation = \"source-over\";\n            } else {\n                this.contextGrid.fill();\n            }\n        } else {\n            this.contextGrid.fillRect(xDst + coords[0], yDst + coords[1], coords[2], coords[3]);\n        }\n    }\n\n    /**\n     * drawGridSegment(seg, col, row)\n     *\n     * Used by drawSymbol() for LED.TYPE.DIGIT.\n     *\n     * @this {LED}\n     * @param {string} seg (eg, \"A\")\n     * @param {number} [col] (default is zero)\n     * @param {number} [row] (default is zero)\n     */\n    drawGridSegment(seg, col = 0, row = 0)\n    {\n        let coords = LED.SEGMENTS[seg];\n        if (coords) {\n            let xDst = col * this.widthCell;\n            let yDst = row * this.heightCell;\n            this.contextGrid.fillStyle = this.colorOn;\n            this.contextGrid.beginPath();\n            if (coords.length == 3) {\n                this.contextGrid.arc(xDst + coords[0], yDst + coords[1], coords[2], 0, Math.PI * 2);\n            } else {\n                for (let i = 0; i < coords.length; i += 2) {\n                    if (!i) {\n                        this.contextGrid.moveTo(xDst + coords[i], yDst + coords[i+1]);\n                    } else {\n                        this.contextGrid.lineTo(xDst + coords[i], yDst + coords[i+1]);\n                    }\n                }\n            }\n            this.contextGrid.closePath();\n            this.contextGrid.fill();\n        }\n    }\n\n    /**\n     * drawString(s)\n     *\n     * Used by drawBuffer() for LED.TYPE.DIGIT.\n     *\n     * @this {LED}\n     * @param {string} s\n     */\n    drawString(s)\n    {\n        this.clearGrid();\n        for (let i = 0, col = 0, row = 0; i < s.length; i++) {\n            let ch = s[i];\n            if (ch == '.') {\n                if (col) col--;\n            }\n            this.drawSymbol(ch, col, row);\n            if (++col == this.colsView) {\n                col = 0;\n                if (++row == this.rows) {\n                    break;\n                }\n            }\n        }\n        this.drawView();\n    }\n\n    /**\n     * drawSymbol(symbol, col, row)\n     *\n     * Used by drawString() for LED.TYPE.DIGIT.\n     *\n     * If the symbol does not exist in LED.SYMBOL_SEGMENTS, then nothing is drawn.\n     *\n     * @this {LED}\n     * @param {string} symbol\n     * @param {number} [col] (default is zero)\n     * @param {number} [row] (default is zero)\n     */\n    drawSymbol(symbol, col = 0, row = 0)\n    {\n        let segments = LED.SYMBOL_SEGMENTS[symbol];\n        if (segments) {\n            for (let i = 0; i < segments.length; i++) {\n                this.drawGridSegment(segments[i], col, row)\n            }\n        }\n    }\n\n    /**\n     * drawView()\n     *\n     * @this {LED}\n     */\n    drawView()\n    {\n        /*\n         * Setting the 'globalCompositeOperation' property of a 2D context is something you rarely need to do,\n         * because the default draw behavior (\"source-over\") is fine for most cases.  One case where it is NOT\n         * fine is when we're using a transparent background color, because it doesn't copy over any transparent\n         * pixels, effectively making it impossible to \"turn off\" any previously drawn LED segments.  To force\n         * that behavior, we must select the \"copy\" behavior.\n         *\n         * Refer to: https://www.w3.org/TR/2dcontext/#dom-context-2d-globalcompositeoperation\n         */\n        this.contextView.globalCompositeOperation = (this.colorBackground && !this.fPersistent)? \"source-over\" : \"copy\";\n        this.contextView.drawImage(this.canvasGrid, 0, 0, this.widthGrid, this.heightGrid, 0, 0, this.widthView, this.heightView);\n    }\n\n    /**\n     * getBuffer()\n     *\n     * @this {LED}\n     * @returns {Array}\n     */\n    getBuffer()\n    {\n        return this.buffer;\n    }\n\n    /**\n     * getBufferClone()\n     *\n     * @this {LED}\n     * @returns {Array}\n     */\n    getBufferClone()\n    {\n        if (!this.bufferClone) {\n            this.bufferClone = new Array(this.nBufferCells);\n            this.initBuffer(this.bufferClone);\n        }\n        return this.bufferClone;\n    }\n\n    /**\n     * getLEDColor(col, row)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @returns {string}\n     */\n    getLEDColor(col, row)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        return this.buffer[i+1] || this.colorTransparent;\n    }\n\n    /**\n     * getLEDColorValues(col, row, rgb)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {Array.<number>} rgb\n     * @returns {boolean}\n     */\n    getLEDColorValues(col, row, rgb)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        return this.parseRGBValues(this.buffer[i+1] || this.colorTransparent, rgb);\n    }\n\n    /**\n     * getLEDCounts(col, row, counts)\n     *\n     * This function returns success (true) ONLY for cells that are not transparent.\n     *\n     * For a typical \"Lite-Brite\" grid, transparent cells are considered \"empty\", so we want to\n     * ignore them.\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {Array.<number>} counts\n     * @returns {boolean}\n     */\n    getLEDCounts(col, row, counts)\n    {\n        let fSuccess = false;\n        let i = (row * this.cols + col) * this.nBufferInc;\n        if (i <= this.buffer.length - this.nBufferInc && this.buffer[i+1]) {\n            fSuccess = true;\n            let bits = this.buffer[i+2];\n            for (let c = counts.length - 1; c >= 0; c--) {\n                counts[c] = bits & 0xf;\n                bits >>>= 4;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * getLEDCountsPacked(col, row)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @returns {number}\n     */\n    getLEDCountsPacked(col, row)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        return (i <= this.buffer.length - this.nBufferInc)? this.buffer[i+2] : 0;\n    }\n\n    /**\n     * getLEDState(col, row)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @returns {number|undefined}\n     */\n    getLEDState(col, row)\n    {\n        let state;\n        let i = (row * this.cols + col) * this.nBufferInc;\n        if (i <= this.buffer.length - this.nBufferInc) {\n            state = this.buffer[i];\n        }\n        return state;\n    }\n\n    /**\n     * getDefaultColor()\n     *\n     * @this {LED}\n     * @returns {string}\n     */\n    getDefaultColor()\n    {\n        return this.colorOn;\n    }\n\n    /**\n     * getRGBColor(color, colorDefault)\n     *\n     * Returns a color string in the \"hex\" format that fillStyle recognizes (eg, \"#rrggbb\").\n     *\n     * The default is optional, allowing an undefined color to remain undefined if we want to use\n     * that to signal transparency (as in the case of colorBackground).\n     *\n     * @this {LED}\n     * @param {string|undefined} color\n     * @param {string} [colorDefault]\n     * @returns {string|undefined}\n     */\n    getRGBColor(color, colorDefault)\n    {\n        color = color || colorDefault;\n        return color && LED.COLORS[color] || color;\n    }\n\n    /**\n     * getRGBColorString(rgb)\n     *\n     * Returns a color string fillStyle recognizes (ie, \"#rrggbb\", or \"rgba(r,g,b,a)\" if an alpha value\n     * less than 1 is set).\n     *\n     * TODO: Cache frequently requested colors.\n     * \n     * @this {LED}\n     * @param {Array.<number>} rgb\n     * @returns {string}\n     */\n    getRGBColorString(rgb)\n    {\n        let s;\n        if (rgb.length < 4 || rgb[3] == 1) {\n            s = this.sprintf(\"#%02x%02x%02x\", rgb[0], rgb[1], rgb[2]);\n        } else {\n            s = this.sprintf(\"rgba(%d,%d,%d,%d)\", rgb[0], rgb[1], rgb[2], rgb[3]);\n        }\n        return s;\n    }\n\n    /**\n     * getRGBAColor(color, alpha, brightness)\n     *\n     * Returns a color string in the \"rgba\" format that fillStyle recognizes (eg, \"rgba(255, 255, 255, 0)\").\n     *\n     * I used to use \"alpha\" to adjust the brightness, but it's safer to use the \"brightness\" parameter,\n     * which simply scales all the RGB values.  That's because if any shapes are redrawn using a fillStyle\n     * with alpha < 1.0, the target alpha values will be added instead of replaced, resulting in progressively\n     * brighter shapes; probably not what you want.\n     *\n     * @this {LED}\n     * @param {string} color\n     * @param {number} [alpha]\n     * @param {number} [brightness]\n     * @returns {string}\n     */\n    getRGBAColor(color, alpha = 1.0, brightness = 1.0)\n    {\n        if (color) {\n            let rgb = [];\n            color = LED.COLORS[color] || color;\n            if (this.parseRGBValues(color, rgb)) {\n                color = \"rgba(\";\n                let i;\n                for (i = 0; i < 3; i++) {\n                    let n = Math.round(rgb[i] * brightness);\n                    n = (n < 0? 0 : (n > 255? 255 : n));\n                    color += n + \",\";\n                }\n                color += (i < rgb.length? rgb[i] : alpha) + \")\";\n            }\n        }\n        return color;\n    }\n\n    /**\n     * initBuffer(buffer)\n     *\n     * @this {LED}\n     * @param {Array.<number|string|null>} buffer\n     */\n    initBuffer(buffer)\n    {\n        for (let i = 0; i < buffer.length; i += this.nBufferInc) {\n            this.initCell(buffer, i);\n        }\n    }\n\n    /**\n     * initCell(buffer, iCell)\n     *\n     * @this {LED}\n     * @param {Array.<number|string|null>} buffer\n     * @param {number} iCell\n     */\n    initCell(buffer, iCell)\n    {\n        if (this.type < LED.TYPE.DIGIT) {\n            buffer[iCell] = LED.STATE.OFF;\n        } else {\n            buffer[iCell] = ' ';\n        }\n        buffer[iCell+1] = (this.colorOn == this.colorTransparent? null : this.colorOn);\n        buffer[iCell+2] = 0;\n        buffer[iCell+3] = LED.FLAGS.MODIFIED;\n    }\n\n    /**\n     * loadState(state)\n     *\n     * If any saved values don't match (possibly overridden), abandon the given state and return false.\n     *\n     * @this {LED}\n     * @param {Array} state\n     * @returns {boolean}\n     */\n    loadState(state)\n    {\n        let colorOn = state.shift();\n        let colorBackground = state.shift();\n        let buffer = state.shift();\n        if (colorOn == this.colorOn && colorBackground == this.colorBackground && buffer && buffer.length == this.buffer.length) {\n            this.buffer = buffer;\n            /*\n             * Loop over all the buffer colors to fix a legacy problem (ie, before we started storing null for colorTransparent)\n             */\n            for (let i = 0; i <= this.buffer.length - this.nBufferInc; i += this.nBufferInc) {\n                if (this.buffer[i+1] == this.colorTransparent) this.buffer[i+1] = null;\n            }\n            this.drawBuffer(true);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * parseRGBValues(color, rgb)\n     *\n     * @this {LED}\n     * @param {string} color\n     * @param {Array.<number>} rgb\n     * @returns {boolean}\n     */\n    parseRGBValues(color, rgb)\n    {\n        let base = 16;\n        let match = color.match(/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i);\n        if (!match) {\n            base = 10;\n            match = color.match(/^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,?\\s*(\\d+|)\\)$/i);\n        }\n        if (match) {\n            let i;\n            for (i = 1; i < match.length; i++) {\n                rgb[i-1] = Number.parseInt(match[i], base);\n            }\n            rgb.length = i-1;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * saveState(state)\n     *\n     * @this {LED}\n     * @param {Array} state\n     */\n    saveState(state)\n    {\n        if (this.buffer) {\n            state.push(this.colorOn);\n            state.push(this.colorBackground);\n            state.push(this.buffer);\n        }\n    }\n\n    /**\n     * setContainerStyle(sAttr, sValue)\n     * \n     * @this {LED}\n     * @param {string} sAttr \n     * @param {string} sValue \n     */\n    setContainerStyle(sAttr, sValue)\n    {\n        if (this.container) this.container.style[sAttr] = sValue;\n    }\n\n    /**\n     * setDisplayOff(off)\n     * \n     * @this {LED}\n     * @param {boolean} [off]\n     */\n    setDisplayOff(off)\n    {\n        if (this.fDisplayOff != off) {\n            this.fDisplayOff = off;\n            this.fBufferModified = true;\n        }\n    }\n    \n    /**\n     * setLEDColor(col, row, color)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {string} [color]\n     * @returns {boolean|null} (true if this call modified the LED color, false if not, null if error)\n     */\n    setLEDColor(col, row, color)\n    {\n        let fModified = null;\n        if (row >= 0 && row < this.rows && col >= 0 && col < this.cols) {\n            fModified = false;\n            let colorNew = color || this.colorOn;\n            if (colorNew == this.colorTransparent) colorNew = null;\n            let i = (row * this.cols + col) * this.nBufferInc;\n            if (this.buffer[i+1] !== colorNew) {\n                this.buffer[i+1] = colorNew;\n                if (!colorNew) this.buffer[i] = LED.STATE.OFF;  // transparent LEDs are automatically turned off\n                this.buffer[i+3] |= LED.FLAGS.MODIFIED;\n                this.fBufferModified = fModified = true;\n            }\n            this.iBufferRecent = i;\n            this.fTickled = true;\n        }\n        return fModified;\n    }\n\n    /**\n     * setLEDCounts(col, row, counts)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {Array.<number>} counts\n     * @returns {boolean|null} (true if this call modified the LED color, false if not, null if error)\n     */\n    setLEDCounts(col, row, counts)\n    {\n        let fModified = null;\n        if (row >= 0 && row < this.rows && col >= 0 && col < this.cols) {\n            fModified = false;\n            let i = (row * this.cols + col) * this.nBufferInc;\n            let bits = 0;\n            if (this.buffer[i+1]) {                             // only non-transparent LEDs are allowed to set counters\n                for (let c = 0; c < counts.length; c++) {\n                    bits = (bits << 4) | (counts[c] & 0xf);\n                }\n            }\n            if (this.buffer[i+2] !== bits) {\n                this.buffer[i+2] = bits;\n                this.buffer[i+3] |= LED.FLAGS.MODIFIED;\n                this.fBufferModified = fModified = true;\n            }\n            this.iBufferRecent = i;\n            this.fTickled = true;\n        }\n        return fModified;\n    }\n\n    /**\n     * setLEDCountsPacked(col, row, counts)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {number} counts\n     * @returns {boolean|null} (true if this call modified the LED state, false if not, null if error)\n     */\n    setLEDCountsPacked(col, row, counts)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        if (i <= this.buffer.length - this.nBufferInc) {\n            if (this.buffer[i+2] != counts) {\n                this.buffer[i+2] = counts;\n                return true;\n            }\n            return false;\n        }\n        return null;\n    }\n\n    /**\n     * setLEDState(col, row, state, flags)\n     *\n     * For LED.TYPE.ROUND or LED.TYPE.SQUARE, the state parameter should be LED.STATE.OFF or LED.STATE.ON.\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {string|number} state (new state for the specified cell)\n     * @param {number} [flags]\n     * @returns {boolean} (true if this call modified the LED state, false if not)\n     */\n    setLEDState(col, row, state, flags = 0)\n    {\n        let fModified = false;\n        let flagsSet = flags & LED.FLAGS.SET;\n        let i = (row * this.cols + col) * this.nBufferInc;\n        if (i <= this.buffer.length - this.nBufferInc) {\n            if (this.buffer[i] !== state || (this.buffer[i+3] & LED.FLAGS.SET) !== flagsSet) {\n                this.buffer[i] = state;\n                this.buffer[i+3] = (this.buffer[i+3] & ~LED.FLAGS.SET) | flagsSet | LED.FLAGS.MODIFIED;\n                this.fBufferModified = fModified = true;\n            }\n            this.fShiftedLeft = false;\n            this.iBufferRecent = i;\n            this.fTickled = true;\n        }\n        return fModified;\n    }\n\n    /**\n     * swapBuffers()\n     *\n     * @this {LED}\n     */\n    swapBuffers()\n    {\n        let buffer = this.buffer;\n        this.buffer = this.bufferClone;\n        this.bufferClone = buffer;\n        this.fBufferModified = true;\n    }\n}\n\nLED.TYPE = {\n    ROUND:      1,      // a single (round) LED\n    SQUARE:     2,      // a single (square) LED\n    DIGIT:      3       // a 7-segment (digit) LED, with a period as an 8th segment\n};\n\nLED.BINDING = {\n    CONTAINER:  \"container\"\n};\n\nLED.COLORS = {\n    \"aliceblue\":            \"#f0f8ff\",\n    \"antiquewhite\":         \"#faebd7\",\n    \"aqua\":                 \"#00ffff\",\n    \"aquamarine\":           \"#7fffd4\",\n    \"azure\":                \"#f0ffff\",\n    \"beige\":                \"#f5f5dc\",\n    \"bisque\":               \"#ffe4c4\",\n    \"black\":                \"#000000\",\n    \"blanchedalmond\":       \"#ffebcd\",\n    \"blue\":                 \"#0000ff\",\n    \"blueviolet\":           \"#8a2be2\",\n    \"brown\":                \"#a52a2a\",\n    \"burlywood\":            \"#deb887\",\n    \"cadetblue\":            \"#5f9ea0\",\n    \"chartreuse\":           \"#7fff00\",\n    \"chocolate\":            \"#d2691e\",\n    \"coral\":                \"#ff7f50\",\n    \"cornflowerblue\":       \"#6495ed\",\n    \"cornsilk\":             \"#fff8dc\",\n    \"crimson\":              \"#dc143c\",\n    \"cyan\":                 \"#00ffff\",\n    \"darkblue\":             \"#00008b\",\n    \"darkcyan\":             \"#008b8b\",\n    \"darkgoldenrod\":        \"#b8860b\",\n    \"darkgray\":             \"#a9a9a9\",\n    \"darkgreen\":            \"#006400\",\n    \"darkkhaki\":            \"#bdb76b\",\n    \"darkmagenta\":          \"#8b008b\",\n    \"darkolivegreen\":       \"#556b2f\",\n    \"darkorange\":           \"#ff8c00\",\n    \"darkorchid\":           \"#9932cc\",\n    \"darkred\":              \"#8b0000\",\n    \"darksalmon\":           \"#e9967a\",\n    \"darkseagreen\":         \"#8fbc8f\",\n    \"darkslateblue\":        \"#483d8b\",\n    \"darkslategray\":        \"#2f4f4f\",\n    \"darkturquoise\":        \"#00ced1\",\n    \"darkviolet\":           \"#9400d3\",\n    \"deeppink\":             \"#ff1493\",\n    \"deepskyblue\":          \"#00bfff\",\n    \"dimgray\":              \"#696969\",\n    \"dodgerblue\":           \"#1e90ff\",\n    \"firebrick\":            \"#b22222\",\n    \"floralwhite\":          \"#fffaf0\",\n    \"forestgreen\":          \"#228b22\",\n    \"fuchsia\":              \"#ff00ff\",\n    \"gainsboro\":            \"#dcdcdc\",\n    \"ghostwhite\":           \"#f8f8ff\",\n    \"gold\":                 \"#ffd700\",\n    \"goldenrod\":            \"#daa520\",\n    \"gray\":                 \"#808080\",\n    \"green\":                \"#008000\",\n    \"greenyellow\":          \"#adff2f\",\n    \"honeydew\":             \"#f0fff0\",\n    \"hotpink\":              \"#ff69b4\",\n    \"indianred \":           \"#cd5c5c\",\n    \"indigo\":               \"#4b0082\",\n    \"ivory\":                \"#fffff0\",\n    \"khaki\":                \"#f0e68c\",\n    \"lavender\":             \"#e6e6fa\",\n    \"lavenderblush\":        \"#fff0f5\",\n    \"lawngreen\":            \"#7cfc00\",\n    \"lemonchiffon\":         \"#fffacd\",\n    \"lightblue\":            \"#add8e6\",\n    \"lightcoral\":           \"#f08080\",\n    \"lightcyan\":            \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgrey\":            \"#d3d3d3\",\n    \"lightgreen\":           \"#90ee90\",\n    \"lightpink\":            \"#ffb6c1\",\n    \"lightsalmon\":          \"#ffa07a\",\n    \"lightseagreen\":        \"#20b2aa\",\n    \"lightskyblue\":         \"#87cefa\",\n    \"lightslategray\":       \"#778899\",\n    \"lightsteelblue\":       \"#b0c4de\",\n    \"lightyellow\":          \"#ffffe0\",\n    \"lime\":                 \"#00ff00\",\n    \"limegreen\":            \"#32cd32\",\n    \"linen\":                \"#faf0e6\",\n    \"magenta\":              \"#ff00ff\",\n    \"maroon\":               \"#800000\",\n    \"mediumaquamarine\":     \"#66cdaa\",\n    \"mediumblue\":           \"#0000cd\",\n    \"mediumorchid\":         \"#ba55d3\",\n    \"mediumpurple\":         \"#9370d8\",\n    \"mediumseagreen\":       \"#3cb371\",\n    \"mediumslateblue\":      \"#7b68ee\",\n    \"mediumspringgreen\":    \"#00fa9a\",\n    \"mediumturquoise\":      \"#48d1cc\",\n    \"mediumvioletred\":      \"#c71585\",\n    \"midnightblue\":         \"#191970\",\n    \"mintcream\":            \"#f5fffa\",\n    \"mistyrose\":            \"#ffe4e1\",\n    \"moccasin\":             \"#ffe4b5\",\n    \"navajowhite\":          \"#ffdead\",\n    \"navy\":                 \"#000080\",\n    \"oldlace\":              \"#fdf5e6\",\n    \"olive\":                \"#808000\",\n    \"olivedrab\":            \"#6b8e23\",\n    \"orange\":               \"#ffa500\",\n    \"orangered\":            \"#ff4500\",\n    \"orchid\":               \"#da70d6\",\n    \"palegoldenrod\":        \"#eee8aa\",\n    \"palegreen\":            \"#98fb98\",\n    \"paleturquoise\":        \"#afeeee\",\n    \"palevioletred\":        \"#d87093\",\n    \"papayawhip\":           \"#ffefd5\",\n    \"peachpuff\":            \"#ffdab9\",\n    \"peru\":                 \"#cd853f\",\n    \"pink\":                 \"#ffc0cb\",\n    \"plum\":                 \"#dda0dd\",\n    \"powderblue\":           \"#b0e0e6\",\n    \"purple\":               \"#800080\",\n    \"rebeccapurple\":        \"#663399\",\n    \"red\":                  \"#ff0000\",\n    \"rosybrown\":            \"#bc8f8f\",\n    \"royalblue\":            \"#4169e1\",\n    \"saddlebrown\":          \"#8b4513\",\n    \"salmon\":               \"#fa8072\",\n    \"sandybrown\":           \"#f4a460\",\n    \"seagreen\":             \"#2e8b57\",\n    \"seashell\":             \"#fff5ee\",\n    \"sienna\":               \"#a0522d\",\n    \"silver\":               \"#c0c0c0\",\n    \"skyblue\":              \"#87ceeb\",\n    \"slateblue\":            \"#6a5acd\",\n    \"slategray\":            \"#708090\",\n    \"snow\":                 \"#fffafa\",\n    \"springgreen\":          \"#00ff7f\",\n    \"steelblue\":            \"#4682b4\",\n    \"tan\":                  \"#d2b48c\",\n    \"teal\":                 \"#008080\",\n    \"thistle\":              \"#d8bfd8\",\n    \"tomato\":               \"#ff6347\",\n    \"turquoise\":            \"#40e0d0\",\n    \"violet\":               \"#ee82ee\",\n    \"wheat\":                \"#f5deb3\",\n    \"white\":                \"#ffffff\",\n    \"whitesmoke\":           \"#f5f5f5\",\n    \"yellow\":               \"#ffff00\",\n    \"yellowgreen\":          \"#9acd32\"\n};\n\nLED.STATE = {\n    OFF:        0,\n    ON:         1\n};\n\n/*\n * NOTE: Although technically the MODIFIED flag is an internal flag, it may be set explicitly as well;\n * the ROM device uses the setLEDState() flags parameter to set it, in order to trigger highlighting of\n * the most recently active LED.\n */\nLED.FLAGS = {\n    NONE:       0x00,\n    SET:        0x81,   // bits that may be set using the flags parameter of setLEDState()\n    PERIOD:     0x01,   // used with DIGIT-type LED to indicate that the period \"segment\" should be on, too\n    MODIFIED:   0x80,   // cell has been modified since the last time it was drawn\n};\n\nLED.SHAPES = {\n    [LED.TYPE.ROUND]:   [16, 16, 14],\n    [LED.TYPE.SQUARE]:  [2, 2, 28, 28]\n};\n\nLED.SIZES = [\n    [],\n    [32,  32],          // LED.TYPE.ROUND\n    [32,  32],          // LED.TYPE.SQUARE\n    [96, 128]           // LED.TYPE.DIGIT\n];\n\n/*\n * The segments are arranged roughly as follows, in a 96x128 grid:\n *\n *      AAAA\n *     F    B\n *     F    B\n *      GGGG\n *     E    C\n *     E    C\n *      DDDD P\n *\n * The following arrays specify pairs of moveTo()/lineTo() coordinates, used by drawGridSegment().  They all\n * assume the hard-coded width and height in LED.SIZES[LED.TYPE.DIGIT] specified above.  If there is a triplet\n * instead of one or more pairs (eg, the 'P' or period segment), then the coordinates are treated as arc()\n * parameters.\n */\nLED.SEGMENTS = {\n    'A':        [30,   8,  79,   8,  67,  19,  37,  19],\n    'B':        [83,  10,  77,  52,  67,  46,  70,  22],\n    'C':        [77,  59,  71, 100,  61,  89,  64,  64],\n    'D':        [28,  91,  58,  91,  69, 104,  15, 104],\n    'E':        [18,  59,  28,  64,  25,  88,  12, 100],\n    'F':        [24,  10,  34,  21,  31,  47,  18,  52],\n    'G':        [24,  56,  34,  50,  60,  50,  71,  56,  61,  61,  33,  61],\n    'P':        [80, 102,  8]\n};\n\n/*\n * Segmented symbols are formed with the following segments.\n */\nLED.SYMBOL_SEGMENTS = {\n    ' ':        [],\n    '0':        ['A','B','C','D','E','F'],\n    '1':        ['B','C'],\n    '2':        ['A','B','D','E','G'],\n    '3':        ['A','B','C','D','G'],\n    '4':        ['B','C','F','G'],\n    '5':        ['A','C','D','F','G'],\n    '6':        ['A','C','D','E','F','G'],\n    '7':        ['A','B','C'],\n    '8':        ['A','B','C','D','E','F','G'],\n    '9':        ['A','B','C','D','F','G'],\n    '-':        ['G'],\n    'E':        ['A','D','E','F','G'],\n    '.':        ['P']\n};\n\nLED.VERSION     = 1.11;\n\n/**\n * @copyright http://pcjs.org/modules/devices/rom.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), wordSize: number, valueSize: number, valueTotal: number, littleEndian: boolean, file: string, reference: string, chipID: string, revision: (number|undefined), colorROM: (string|undefined), backgroundColorROM: (string|undefined), values: Array.<number> }} */\nvar ROMConfig;\n\n/**\n * @class {ROM}\n * @unrestricted\n * @property {ROMConfig} config\n * @property {Array.<number>} data\n * @property {number} addrMask\n */\nclass ROM extends Device {\n    /**\n     * ROM(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"rom\": {\n     *        \"class\": \"ROM\",\n     *        \"wordSize\": 13,\n     *        \"valueSize\": 16,\n     *        \"valueTotal\": 2048,\n     *        \"littleEndian\": true,\n     *        \"file\": \"ti57le.bin\",\n     *        \"reference\": \"\",\n     *        \"chipID\": \"TMC1501NC DI 7741\",\n     *        \"revision\": \"0\",\n     *        \"bindings\": {\n     *          \"array\": \"romArrayTI57\",\n     *          \"cellDesc\": \"romCellTI57\"\n     *        },\n     *        \"overrides\": [\"colorROM\",\"backgroundColorROM\"],\n     *        \"values\": [\n     *          ...\n     *        ]\n     *      }\n     *\n     * @this {ROM}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {ROMConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, ROM.VERSION, config);\n\n        this.data = config['values'];\n\n        /*\n         * This addrMask calculation assumes that the data array length is a power-of-two (which we assert).\n         */\n        this.addrMask = this.data.length - 1;\n\n\n        /*\n         * If an \"array\" binding has been supplied, then create an LED array sufficiently large to represent the\n         * entire ROM.  If the power-of-two is odd, then we will favor a slightly wider array over a taller one,\n         * by virtue of using Math.ceil() for cols and Math.floor() for rows.\n         */\n        if (this.bindings[ROM.BINDING.ARRAY]) {\n            let rom = this;\n            let addrLines = Math.log2(this.data.length) / 2;\n            this.cols = Math.pow(2, Math.ceil(addrLines));\n            this.rows = Math.pow(2, Math.floor(addrLines));\n            let configLEDs = {\n                \"class\":            \"LED\",\n                \"bindings\":         {\"container\": this.getBindingID(ROM.BINDING.ARRAY)},\n                \"type\":             LED.TYPE.ROUND,\n                \"cols\":             this.cols,\n                \"rows\":             this.rows,\n                \"color\":            this.getDefaultString('colorROM', \"green\"),\n                \"backgroundColor\":  this.getDefaultString('backgroundColorROM', \"black\"),\n                \"persistent\":       true\n            };\n            this.ledArray = new LED(idMachine, idDevice + \"LEDs\", configLEDs);\n            this.clearArray();\n            let configInput = {\n                \"class\":        \"Input\",\n                \"location\":     [0, 0, this.ledArray.widthView, this.ledArray.heightView, this.cols, this.rows],\n                \"bindings\":     {\"surface\": this.getBindingID(ROM.BINDING.ARRAY)}\n            };\n            this.ledInput = new Input(idMachine, idDevice + \"Input\", configInput);\n            this.sCellDesc = this.getBindingText(ROM.BINDING.CELLDESC);\n            this.ledInput.addHover(function onROMHover(col, row) {\n                if (rom.chip) {\n                    let sDesc = rom.sCellDesc;\n                    if (col >= 0 && row >= 0) {\n                        let addr = row * rom.cols + col;\n\n                        let opCode = rom.data[addr];\n                        sDesc = rom.chip.disassemble(opCode, addr);\n                    }\n                    rom.setBindingText(ROM.BINDING.CELLDESC, sDesc);\n                }\n            });\n        }\n    }\n\n    /**\n     * clearArray()\n     *\n     * clearBuffer(true) performs a combination of clearBuffer() and drawBuffer().\n     *\n     * @this {ROM}\n     */\n    clearArray()\n    {\n        if (this.ledArray) this.ledArray.clearBuffer(true);\n    }\n\n    /**\n     * drawArray()\n     *\n     * This performs a simple drawBuffer(); intended for synchronous updates (eg, step operations);\n     * otherwise, you should allow the LED object's async animation handler take care of drawing updates.\n     *\n     * @this {ROM}\n     */\n    drawArray()\n    {\n        if (this.ledArray) this.ledArray.drawBuffer();\n    }\n\n    /**\n     * getData(addr, fInternal)\n     *\n     * Set fInternal to true if an internal caller (eg, the disassembler) is accessing the ROM, to avoid touching\n     * the ledArray.\n     *\n     * @this {ROM}\n     * @param {number} addr\n     * @param {boolean} [fInternal]\n     * @returns {number|undefined}\n     */\n    getData(addr, fInternal)\n    {\n        if (this.ledArray && !fInternal) {\n            this.ledArray.setLEDState(addr % this.cols, (addr / this.cols)|0, LED.STATE.ON, LED.FLAGS.MODIFIED);\n        }\n        return this.data[addr];\n    }\n\n    /**\n     * loadState(state)\n     *\n     * If any saved values don't match (presumably overridden), abandon the given state and return false.\n     * \n     * @this {ROM}\n     * @param {Array} state\n     * @returns {boolean}\n     */\n    loadState(state)\n    {\n        let buffer = state.shift();\n        if (buffer && this.ledArray) {\n\n            if (this.ledArray.buffer.length == buffer.length) {\n                this.ledArray.buffer = buffer;\n                this.ledArray.drawBuffer(true);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * saveState(state)\n     *\n     * @this {ROM}\n     * @param {Array} state\n     */\n    saveState(state)\n    {\n        if (this.ledArray) {\n            state.push(this.ledArray.buffer);\n        }\n    }\n\n    /**\n     * setChip()\n     *\n     * @this {ROM}\n     * @param {Chip} chip\n     */\n    setChip(chip)\n    {\n        this.chip = chip;\n    }\n}\n\nROM.BINDING = {\n    ARRAY:      \"array\",\n    CELLDESC:   \"cellDesc\"\n};\n\nROM.VERSION     = 1.11;\n\n/**\n * @copyright http://pcjs.org/modules/devices/time.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ id: string, callBack: function(), msAuto: number, nCyclesLeft: number }} */\nvar Timer;\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), cyclesMinimum: (number|undefined), cyclesMaximum: (number|undefined), cyclesPerSecond: (number|undefined), yieldsPerSecond: (number|undefined), yieldsPerUpdate: (number|undefined), requestAnimationFrame: (boolean|undefined), clockByFrame: (boolean|undefined) }} */\nvar TimeConfig;\n\n/**\n * @class {Time}\n * @unrestricted\n * @property {TimeConfig} config\n * @property {number} nCyclesMinimum\n * @property {number} nCyclesMaximum\n * @property {number} nCyclesPerSecond\n * @property {number} nYieldsPerSecond\n * @property {number} nYieldsPerUpdate\n * @property {boolean} fClockByFrame\n */\nclass Time extends Device {\n    /**\n     * Time(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"clock\": {\n     *        \"class\": \"Time\",\n     *        \"cyclesPerSecond\": 650000,\n     *        \"clockByFrame\": true,\n     *        \"bindings\": {\n     *          \"run\": \"runTI57\",\n     *          \"speed\": \"speedTI57\",\n     *          \"step\": \"stepTI57\"\n     *        },\n     *        \"overrides\": [\"cyclesPerSecond\",\"yieldsPerSecond\",\"yieldsPerUpdate\"]\n     *      }\n     *\n     * @this {Time}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {TimeConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, Time.VERSION, config);\n\n        /*\n         * NOTE: The default speed of 650,000Hz (0.65Mhz) was a crude approximation based on real world TI-57\n         * device timings.  I had originally assumed the speed as 1,600,000Hz (1.6Mhz), based on timing information\n         * in TI's patents, but in hindsight, that speed seems rather high for a mid-1970's device, and reality\n         * suggests it was much lower.  The TMS-1500 does burn through a lot of cycles (minimum of 128) per instruction,\n         * but either that cycle burn was much higher, or the underlying clock speed was much lower.  I assume the latter.\n         */\n        this.nCyclesMinimum = this.getDefaultNumber('cyclesMinimum', 100000);\n        this.nCyclesMaximum = this.getDefaultNumber('cyclesMaximum', 3000000);\n        this.nCyclesPerSecond = this.getBounded(this.getDefaultNumber('cyclesPerSecond', 650000), this.nCyclesMinimum, this.nCyclesMaximum);\n        this.nYieldsPerSecond = this.getBounded(this.getDefaultNumber('yieldsPerSecond', Time.YIELDS_PER_SECOND), 30, 120);\n        this.nYieldsPerUpdate = this.getBounded(this.getDefaultNumber('yieldsPerUpdate', Time.YIELDS_PER_UPDATE), 1, this.nYieldsPerSecond);\n        this.fClockByFrame = this.getDefaultBoolean('clockByFrame', true);\n        this.fRequestAnimationFrame = this.fClockByFrame || this.getDefaultBoolean('requestAnimationFrame', true);\n\n        this.nBaseMultiplier = this.nCurrentMultiplier = this.nTargetMultiplier = 1;\n        this.mhzBase = (this.nCyclesPerSecond / 10000) / 100;\n        this.mhzCurrent = this.mhzTarget = this.mhzBase * this.nTargetMultiplier;\n        this.nYields = 0;\n        this.msYield = Math.round(1000 / this.nYieldsPerSecond);\n        this.aAnimators = [];\n        this.aClockers = [];\n        this.aTimers = [];\n        this.aUpdaters = [];\n        this.fRunning = this.fYield = this.fThrottling = false;\n        this.nStepping = 0;\n        this.idRunTimeout = this.idStepTimeout = 0;\n        this.onRunTimeout = this.run.bind(this);\n        this.onAnimationFrame = this.animate.bind(this);\n        this.requestAnimationFrame = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.setTimeout).bind(window);\n\n        /*\n         * When fClockByFrame is true, we rely exclusively on requestAnimationFrame() instead of setTimeout()\n         * to drive the clock, which means we automatically yield after every frame, so no yield timer is required.\n         */\n        if (!this.fClockByFrame) {\n            let time = this;\n            this.timerYield = this.addTimer(\"timerYield\", function onYield() {\n                time.onYield();\n            }, this.msYield);\n        }\n        else {\n            /*\n             * When clocking exclusively by animation frames, setSpeed() calculates how many cycles\n             * each animation frame should \"deposit\" in our cycle bank:\n             * \n             *      this.nCyclesDepositPerFrame = (nCyclesPerSecond / 60) + 0.00000001;\n             *\n             * After that amount is added to our \"balance\" (this.nCyclesDeposited), we make a \"withdrawal\"\n             * whenever the balance is >= 1.0 and call all our clocking functions with the maximum number\n             * of cycles we were able to withdraw.\n             *\n             * setSpeed() also adds a tiny amount of \"interest\" to each \"deposit\" (0.00000001); otherwise\n             * you can end up in situations where the deposit amount is, say, 0.2499999 instead of 0.25,\n             * and four such deposits would still fall short of the 1-cycle threshold.\n             */\n            this.nCyclesDeposited = this.nCyclesDepositPerFrame = 0;\n        }\n        this.resetSpeed();\n    }\n\n    /**\n     * addAnimator(callBack)\n     *\n     * Animators are functions that used to be called with YIELDS_PER_SECOND frequency, when animate()\n     * was called on every onYield() call, but now we rely on requestAnimationFrame(), so the frequency\n     * is browser-dependent (but presumably at least 60Hz).\n     *\n     * @this {Time}\n     * @param {function()} callBack\n     */\n    addAnimator(callBack)\n    {\n        this.aAnimators.push(callBack);\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Time}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let time = this;\n\n        switch(binding) {\n\n        case Time.BINDING.RUN:\n            element.onclick = function onClickRun() {\n                time.onRun();\n            };\n            break;\n\n        case Time.BINDING.STEP:\n            element.onclick = function onClickStep() {\n                time.onStep();\n            };\n            break;\n\n        case Time.BINDING.THROTTLE:\n            let elementInput = /** @type {HTMLInputElement} */ (element);\n            elementInput.addEventListener(\"mousedown\", function onThrottleStart() {\n                time.fThrottling = true;\n            });\n            elementInput.addEventListener(\"mouseup\", function onThrottleStop() {\n                time.setSpeedThrottle();\n                time.fThrottling = false;\n            });\n            elementInput.addEventListener(\"mousemove\", function onThrottleChange() {\n                if (time.fThrottling) {\n                    time.setSpeedThrottle();\n                }\n            });\n            elementInput.addEventListener(\"change\", function onThrottleChange() {\n                time.fThrottling = true;\n                time.setSpeedThrottle();\n                time.fThrottling = false;\n            });\n            break;\n        }\n        super.addBinding(binding, element);\n    }\n\n    /**\n     * addClocker(callBack)\n     *\n     * Adds a clocker function that's called from doBurst() to process a specified number of cycles.\n     *\n     * @this {Time}\n     * @param {function(number)} callBack\n     */\n    addClocker(callBack)\n    {\n        this.aClockers.push(callBack);\n    }\n\n    /**\n     * addTimer(id, callBack, msAuto)\n     *\n     * Devices that want to have timers that fire after some number of milliseconds call addTimer() to create\n     * the timer, and then setTimer() when they want to arm it.  Alternatively, they can specify an automatic\n     * timeout value (in milliseconds) to have the timer fire automatically at regular intervals.  There is\n     * currently no removeTimer() because these are generally used for the entire lifetime of a device.\n     *\n     * A timer is initially dormant; dormant timers have a cycle count of -1 (although any negative number will\n     * suffice) and active timers have a non-negative cycle count.\n     *\n     * @this {Time}\n     * @param {string} id\n     * @param {function()} callBack\n     * @param {number} [msAuto] (if set, enables automatic setTimer calls)\n     * @returns {number} timer index (1-based)\n     */\n    addTimer(id, callBack, msAuto = -1)\n    {\n        let nCyclesLeft = -1;\n        let iTimer = this.aTimers.length + 1;\n        this.aTimers.push({id, callBack, msAuto, nCyclesLeft});\n        if (msAuto >= 0) this.setTimer(iTimer, msAuto);\n        return iTimer;\n    }\n\n    /**\n     * addUpdater(callBack)\n     *\n     * Adds a status update function that's called from updateStatus(), either as the result\n     * of periodic status updates from onYield(), single-step updates from step(), or transitional\n     * updates from start() and stop().\n     *\n     * @this {Time}\n     * @param {function(boolean)} callBack\n     */\n    addUpdater(callBack)\n    {\n        this.aUpdaters.push(callBack);\n    }\n\n    /**\n     * animate()\n     *\n     * This is the callback function we supply to requestAnimationFrame().  The callback has a single\n     * (DOMHighResTimeStamp) argument, which indicates the current time (returned from performance.now())\n     * for when requestAnimationFrame() starts to fire callbacks.\n     *\n     * See: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame\n     *\n     * @this {Time}\n     * @param {number} [t]\n     */\n    animate(t)\n    {\n        if (this.fClockByFrame) {\n            /*\n             * Mimic the logic in run()\n             */\n            if (!this.fRunning) return;\n            this.snapStart();\n            try {\n                this.fYield = false;\n                do {\n                    /*\n                    * Execute the burst and then update all timers.\n                    */\n                    this.updateTimers(this.endBurst(this.doBurst(this.getCyclesPerFrame())));\n                } while (this.fRunning && !this.fYield);\n            }\n            catch(err) {\n                this.println(err.message);\n                this.stop();\n                return;\n            }\n            this.snapStop();\n        }\n        for (let i = 0; i < this.aAnimators.length; i++) {\n            this.aAnimators[i]();\n        }\n        if (this.fRunning && this.fRequestAnimationFrame) this.requestAnimationFrame(this.onAnimationFrame);\n    }\n\n    /**\n     * calcCycles()\n     *\n     * Calculate the maximum number of cycles we should attempt to process before the next yield.\n     *\n     * @this {Time}\n     */\n    calcCycles()\n    {\n        let nMultiplier = this.mhzCurrent / this.mhzBase;\n        if (!nMultiplier || nMultiplier > this.nTargetMultiplier) {\n            nMultiplier = this.nTargetMultiplier;\n        }\n        /*\n         * nCyclesPerYield is now allowed to be a fractional number, so that for machines configured\n         * to run at an extremely slow speed (eg, less than 60Hz), a fractional value here will signal\n         * to snapStop() that it should increase msYield to a proportionally higher value.\n         */\n        this.nCyclesPerYield = (this.nCyclesPerSecond / this.nYieldsPerSecond * nMultiplier);\n        this.nCurrentMultiplier = nMultiplier;\n    }\n\n    /**\n     * calcSpeed(nCycles, msElapsed)\n     *\n     * @this {Time}\n     * @param {number} nCycles\n     * @param {number} msElapsed\n     */\n    calcSpeed(nCycles, msElapsed)\n    {\n        if (msElapsed) {\n            this.mhzCurrent = (nCycles / (msElapsed * 10)) / 100;\n        }\n    }\n\n    /**\n     * doBurst(nCycles, fStep)\n     *\n     * @this {Time}\n     * @param {number} nCycles\n     * @param {boolean} [fStep]\n     * @returns {number} (number of cycles actually executed)\n     */\n    doBurst(nCycles, fStep)\n    {\n        this.nCyclesBurst = this.nCyclesRemain = nCycles;\n        if (!this.aClockers.length) {\n            this.nCyclesRemain = 0;\n            return this.nCyclesBurst;\n        }\n        let iClocker = 0;\n        while (this.nCyclesRemain > 0) {\n            if (iClocker < this.aClockers.length) {\n                nCycles = this.aClockers[iClocker++](fStep? 0 : nCycles) || 1;\n            } else {\n                iClocker = nCycles = 0;\n            }\n            this.nCyclesRemain -= nCycles;\n        }\n        return this.nCyclesBurst - this.nCyclesRemain;\n    }\n\n    /**\n     * doOutside(fn)\n     *\n     * Use this function to perform any work outside of normal time (eg, DOM updates),\n     * to prevent that work from disrupting our speed calculations.\n     *\n     * @this {Time}\n     * @param {function()} fn (should return true only if the function actually performed any work)\n     * @returns {boolean}\n     */\n    doOutside(fn)\n    {\n        let msStart = Date.now();\n        if (fn()) {\n            let msStop = Date.now();\n            this.msOutsideThisRun += msStop - msStart;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * endBurst(nCycles)\n     *\n     * @this {Time}\n     * @param {number} [nCycles]\n     * @returns {number} (number of cycles executed in burst)\n     */\n    endBurst(nCycles = this.nCyclesBurst - this.nCyclesRemain)\n    {\n        if (this.fClockByFrame && this.fRunning) {\n            this.nCyclesDeposited -= nCycles;\n            if (this.nCyclesDeposited < 1) {\n                this.fYield = true;\n            }\n        }\n        this.nCyclesBurst = this.nCyclesRemain = 0;\n        this.nCyclesThisRun += nCycles;\n        this.nCyclesRun += nCycles;\n        if (!this.fRunning) this.nCyclesRun = 0;\n        return nCycles;\n    }\n\n    /**\n     * getCycles(ms)\n     *\n     * If no time period is specified, this returns the current number of cycles per second.\n     *\n     * @this {Time}\n     * @param {number} ms (default is 1000)\n     * @returns {number} number of corresponding cycles\n     */\n    getCycles(ms = 1000)\n    {\n        return Math.ceil((this.nCyclesPerSecond * this.nCurrentMultiplier) / 1000 * ms);\n    }\n\n    /**\n     * getCyclesPerBurst()\n     *\n     * This tells us how many cycles to execute as a burst.\n     *\n     * @this {Time}\n     * @returns {number} (the maximum number of cycles we should execute in the next burst)\n     */\n    getCyclesPerBurst()\n    {\n        let nCycles = this.getCycles(this.msYield);\n        for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n            let timer = this.aTimers[iTimer-1];\n\n            if (timer.nCyclesLeft < 0) continue;\n            if (nCycles > timer.nCyclesLeft) {\n                nCycles = timer.nCyclesLeft;\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * getCyclesPerFrame()\n     *\n     * This tells us how many cycles to execute per frame (assuming fClockByFrame).\n     *\n     * @this {Time}\n     * @returns {number} (the maximum number of cycles we should execute in the next burst)\n     */\n    getCyclesPerFrame()\n    {\n        let nCycles = (this.nCyclesDeposited += this.nCyclesDepositPerFrame);\n        if (nCycles < 1) {\n            nCycles = 0;\n        } else {\n            nCycles |= 0;\n            for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n                let timer = this.aTimers[iTimer-1];\n\n                if (timer.nCyclesLeft < 0) continue;\n                if (nCycles > timer.nCyclesLeft) {\n                    nCycles = timer.nCyclesLeft;\n                }\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * getSpeed(mhz)\n     *\n     * @this {Time}\n     * @param {number} mhz\n     * @returns {string} the given speed, as a formatted string\n     */\n    getSpeed(mhz)\n    {\n        let s;\n        if (mhz >= 1) {\n            s = mhz.toFixed(2) + \"Mhz\";\n        } else {\n            let hz = Math.round(mhz * 1000000);\n            if (hz <= 999) {\n                s = hz + \"Hz\";\n            } else {\n                s = Math.ceil(hz / 1000) + \"Khz\";\n            }\n        }\n        return s;\n    }\n\n    /**\n     * getSpeedCurrent()\n     *\n     * @this {Time}\n     * @returns {string} the current speed, as a formatted string\n     */\n    getSpeedCurrent()\n    {\n        return (this.fRunning && this.mhzCurrent)? this.getSpeed(this.mhzCurrent) : \"Stopped\";\n    }\n\n    /**\n     * getSpeedTarget()\n     *\n     * @this {Time}\n     * @returns {string} the target speed, as a formatted string\n     */\n    getSpeedTarget()\n    {\n        return this.getSpeed(this.mhzTarget);\n    }\n\n    /**\n     * isRunning()\n     *\n     * @this {Time}\n     * @returns {boolean}\n     */\n    isRunning()\n    {\n        return this.fRunning;\n    }\n\n    /**\n     * isTimerSet(iTimer)\n     *\n     * NOTE: Even if the timer is armed, we return false if the clock is currently stopped;\n     * in that sense, perhaps this function should be named isTimerArmedAndWillItFireOnTime().\n     *\n     * @this {Time}\n     * @param {number} iTimer\n     * @returns {boolean}\n     */\n    isTimerSet(iTimer)\n    {\n        if (this.fRunning) {\n            if (iTimer > 0 && iTimer <= this.aTimers.length) {\n                let timer = this.aTimers[iTimer - 1];\n                return (timer.nCyclesLeft >= 0);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * onRun()\n     *\n     * This handles the \"run\" button, if any, attached to the Time device.\n     *\n     * Note that this serves a different purpose than the \"power\" button that's managed by the Input device,\n     * because toggling power also requires resetting the program counter prior to start() OR clearing the display\n     * after stop().  See the Chip's onPower() function for details.\n     *\n     * @this {Time}\n     */\n    onRun()\n    {\n        if (this.fRunning) {\n            this.stop();\n        } else {\n            this.start();\n        }\n    }\n\n    /**\n     * onStep(nRepeat)\n     *\n     * This handles the \"step\" button, if any, attached to the Time device.\n     *\n     * @this {Time}\n     * @param {number} [nRepeat]\n     */\n    onStep(nRepeat)\n    {\n        if (!this.fRunning) {\n            if (this.nStepping) {\n                this.stop();\n            } else {\n                this.step(nRepeat);\n            }\n        } else {\n            this.println(\"already running\");\n        }\n    }\n\n    /**\n     * onYield()\n     *\n     * @this {Time}\n     */\n    onYield()\n    {\n        this.fYield = true;\n        let nYields = this.nYields;\n        let nCyclesPerSecond = this.getCycles();\n        if (nCyclesPerSecond >= this.nYieldsPerSecond) {\n            this.nYields++;\n        } else {\n            /*\n             * Let's imagine that nCyclesPerSecond has dropped to 4, whereas the usual nYieldsPerSecond is 60;\n             * that's means we're yielding at 1/15th the usual rate, so to compensate, we want to bump nYields\n             * by 15 instead of 1.\n             */\n            this.nYields += Math.ceil(this.nYieldsPerSecond / nCyclesPerSecond);\n        }\n        if (this.nYields >= this.nYieldsPerUpdate && nYields < this.nYieldsPerUpdate) {\n            this.updateStatus();\n        }\n        if (this.nYields >= this.nYieldsPerSecond) {\n            this.nYields = 0;\n        }\n    }\n\n    /**\n     * resetSpeed()\n     *\n     * Resets speed and cycle information as part of any reset() or restore(); this typically occurs during powerUp().\n     * It's important that this be called BEFORE the actual restore() call, because restore() may want to call setSpeed(),\n     * which in turn assumes that all the cycle counts have been initialized to sensible values.\n     *\n     * @this {Time}\n     */\n    resetSpeed()\n    {\n        this.nCyclesRun = this.nCyclesBurst = this.nCyclesRemain = 0;\n        if (!this.setSpeedThrottle()) this.setSpeed(this.nBaseMultiplier);\n    }\n\n    /**\n     * resetTimers()\n     *\n     * When the target speed multiplier is altered, it's a good idea to run through all the timers that\n     * have a fixed millisecond period and re-arm them, because the timers are using cycle counts that were based\n     * on a previous multiplier.\n     *\n     * @this {Time}\n     */\n    resetTimers()\n    {\n        for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n            let timer = this.aTimers[iTimer-1];\n            if (timer.msAuto >= 0) this.setTimer(iTimer, timer.msAuto, true);\n        }\n    }\n\n    /**\n     * run()\n     *\n     * @this {Time}\n     */\n    run()\n    {\n        this.idRunTimeout = 0;\n        if (!this.fRunning) return;\n        this.snapStart();\n        try {\n            this.fYield = false;\n            do {\n                /*\n                 * Execute the burst and then update all timers.\n                 */\n                this.updateTimers(this.endBurst(this.doBurst(this.getCyclesPerBurst())));\n\n            } while (this.fRunning && !this.fYield);\n        }\n        catch(err) {\n            this.println(err.message);\n            this.stop();\n            return;\n        }\n        if (this.fRunning) {\n\n            this.idRunTimeout = setTimeout(this.onRunTimeout, this.snapStop());\n            if (!this.fRequestAnimationFrame) this.animate();\n        }\n    }\n\n    /**\n     * setSpeedThrottle()\n     *\n     * This handles speed adjustments requested by the throttling slider.\n     *\n     * @this {Time}\n     * @returns {boolean} (true if a throttle exists, false if not)\n     */\n    setSpeedThrottle()\n    {\n        /*\n         * We're not going to assume any direct relationship between the slider's min/max/value\n         * and our own nCyclesMinimum/nCyclesMaximum/nCyclesPerSecond.  We're just going to calculate\n         * a new target nCyclesPerSecond that is proportional, and then convert that to a speed multiplier.\n         */\n        let elementInput = this.bindings[Time.BINDING.THROTTLE];\n        if (elementInput) {\n            let ratio = (elementInput.value - elementInput.min) / (elementInput.max - elementInput.min);\n            let nCycles = Math.floor((this.nCyclesMaximum - this.nCyclesMinimum) * ratio + this.nCyclesMinimum);\n            let nMultiplier = nCycles / this.nCyclesPerSecond;\n\n            this.setSpeed(nMultiplier);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * setSpeed(nMultiplier)\n     *\n     * @this {Time}\n     * @param {number} [nMultiplier] is the new proposed multiplier (reverts to default if target was too high)\n     * @returns {boolean} true if successful, false if not\n     *\n     * @desc Whenever the speed is changed, the running cycle count and corresponding start time must be reset,\n     * so that the next effective speed calculation obtains sensible results.  In fact, when run() initially calls\n     * setSpeed() with no parameters, that's all this function does (it doesn't change the current speed setting).\n     */\n    setSpeed(nMultiplier)\n    {\n        let fSuccess = true;\n        if (nMultiplier !== undefined) {\n            /*\n             * If we haven't reached 90% (0.9) of the current target speed, revert to the default multiplier.\n             */\n            if (!this.fThrottling && this.mhzCurrent > 0 && this.mhzCurrent < this.mhzTarget * 0.9) {\n                nMultiplier = this.nBaseMultiplier;\n                fSuccess = false;\n            }\n            this.nTargetMultiplier = nMultiplier;\n            let mhzTarget = this.mhzBase * this.nTargetMultiplier;\n            if (this.mhzTarget != mhzTarget) {\n                this.mhzTarget = mhzTarget;\n                this.setBindingText(Time.BINDING.SPEED, this.getSpeedTarget());\n            }\n            /*\n             * After every yield, calcSpeed() will update mhzCurrent, but we also need to be optimistic\n             * and set it to the mhzTarget now, so that the next calcCycles() call will make a reasonable\n             * initial estimate.\n             */\n            this.mhzCurrent = this.mhzTarget;\n        }\n        if (this.fClockByFrame) {\n            let nCyclesPerSecond = this.mhzCurrent * 1000000;\n            this.nCyclesDepositPerFrame = (nCyclesPerSecond / 60) + 0.00000001;\n            this.nCyclesDeposited = 0;\n        }\n        this.nCyclesRun = 0;\n        this.msStartRun = this.msEndRun = 0;\n        this.calcCycles();      // calculate a new value for the current cycle multiplier\n        this.resetTimers();     // and then update all the fixed-period timers using the new cycle multiplier\n        return fSuccess;\n    }\n\n    /**\n     * setTimer(iTimer, ms, fReset)\n     *\n     * Using the timer index from a previous addTimer() call, this sets that timer to fire after the\n     * specified number of milliseconds.\n     *\n     * @this {Time}\n     * @param {number} iTimer\n     * @param {number} ms (converted into a cycle countdown internally)\n     * @param {boolean} [fReset] (true if the timer should be reset even if already armed)\n     * @returns {number} (number of cycles used to arm timer, or -1 if error)\n     */\n    setTimer(iTimer, ms, fReset)\n    {\n        let nCycles = -1;\n        if (iTimer > 0 && iTimer <= this.aTimers.length) {\n            let timer = this.aTimers[iTimer-1];\n            if (fReset || timer.nCyclesLeft < 0) {\n                nCycles = this.getCycles(ms);\n                /*\n                 * If we're currently executing a burst of cycles, the number of cycles it has executed in\n                 * that burst so far must NOT be charged against the cycle timeout we're about to set.  The simplest\n                 * way to resolve that is to immediately call endBurst() and bias the cycle timeout by the number\n                 * of cycles that the burst executed.\n                 */\n                if (this.fRunning) {\n                    nCycles += this.endBurst();\n                }\n                timer.nCyclesLeft = nCycles;\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * snapStart()\n     *\n     * @this {Time}\n     */\n    snapStart()\n    {\n        this.calcCycles();\n\n        this.nCyclesThisRun = 0;\n        this.msOutsideThisRun = 0;\n        this.msStartThisRun = Date.now();\n        if (!this.msStartRun) this.msStartRun = this.msStartThisRun;\n\n        /*\n         * Try to detect situations where the browser may have throttled us, such as when the user switches\n         * to a different tab; in those situations, Chrome and Safari may restrict setTimeout() callbacks\n         * to roughly one per second.\n         *\n         * Another scenario: the user resizes the browser window.  setTimeout() callbacks are not throttled,\n         * but there can still be enough of a lag between the callbacks that speed will be noticeably\n         * erratic if we don't compensate for it here.\n         *\n         * We can detect throttling/lagging by verifying that msEndRun (which was set at the end of the\n         * previous run and includes any requested sleep time) is comparable to the current msStartThisRun;\n         * if the delta is significant, we compensate by bumping msStartRun forward by that delta.\n         *\n         * This shouldn't be triggered when the Debugger stops time, because setSpeed() -- which is called\n         * whenever the time starts again -- zeroes msEndRun.\n         */\n        let msDelta = 0;\n        if (this.msEndRun) {\n            msDelta = this.msStartThisRun - this.msEndRun;\n            if (msDelta > this.msYield) {\n                this.msStartRun += msDelta;\n                /*\n                 * Bumping msStartRun forward should NEVER cause it to exceed msStartThisRun; however, just\n                 * in case, I make absolutely sure it cannot happen, since doing so could result in negative\n                 * speed calculations.\n                 */\n\n                if (this.msStartRun > this.msStartThisRun) {\n                    this.msStartRun = this.msStartThisRun;\n                }\n            }\n        }\n    }\n\n    /**\n     * snapStop()\n     *\n     * @this {Time}\n     * @returns {number}\n     */\n    snapStop()\n    {\n        this.msEndRun = Date.now();\n\n        if (this.msOutsideThisRun) {\n            this.msStartRun += this.msOutsideThisRun;\n            this.msStartThisRun += this.msOutsideThisRun;\n        }\n\n        let msYield = this.msYield;\n        if (this.nCyclesThisRun) {\n            /*\n             * Normally, we assume we executed a full quota of work over msYield.  If nCyclesThisRun is correct,\n             * then the ratio of nCyclesThisRun/nCyclesPerYield should represent the percentage of work we performed,\n             * and so applying that percentage to msYield should give us a better estimate of work vs. time.\n             */\n            msYield = Math.round(msYield * this.nCyclesThisRun / this.nCyclesPerYield);\n        }\n\n        let msElapsedThisRun = this.msEndRun - this.msStartThisRun;\n        let msRemainsThisRun = msYield - msElapsedThisRun;\n\n        let nCycles = this.nCyclesRun;\n        let msElapsed = this.msEndRun - this.msStartRun;\n\n        if (DEBUG && msRemainsThisRun < 0 && this.nTargetMultiplier > 1) {\n            this.println(\"warning: updates @\" + msElapsedThisRun + \"ms (prefer \" + Math.round(msYield) + \"ms)\");\n        }\n\n        this.calcSpeed(nCycles, msElapsed);\n\n        if (msRemainsThisRun < 0) {\n            /*\n             * Try \"throwing out\" the effects of large anomalies, by moving the overall run start time up;\n             * ordinarily, this should only happen when the someone is using an external Debugger or some other\n             * tool or feature that is interfering with our overall execution.\n             */\n            if (msRemainsThisRun < -1000) {\n                this.msStartRun -= msRemainsThisRun;\n            }\n            /*\n             * If the last burst took MORE time than we allotted (ie, it's taking more than 1 second to simulate\n             * nCyclesPerSecond), all we can do is yield for as little time as possible (ie, 0ms) and hope that the\n             * simulation is at least usable.\n             */\n            msRemainsThisRun = 0;\n        }\n        else if (this.mhzCurrent < this.mhzTarget) {\n            msRemainsThisRun = 0;\n        }\n\n        this.msEndRun += msRemainsThisRun;\n\n        if (this.isCategoryOn(Device.CATEGORY.TIME)) {\n            this.printf(\"after running %d cycles, resting for %dms\\n\", this.nCyclesThisRun, msRemainsThisRun);\n        }\n\n        return msRemainsThisRun;\n    }\n\n    /**\n     * start()\n     *\n     * @this {Time}\n     * @returns {boolean}\n     */\n    start()\n    {\n        if (this.fRunning || this.nStepping) {\n            return false;\n        }\n\n        if (this.idRunTimeout) {\n            clearTimeout(this.idRunTimeout);\n            this.idRunTimeout = 0;\n        }\n\n        this.fRunning = true;\n        this.msStartRun = this.msEndRun = 0;\n        this.updateStatus(true);\n\n        /*\n         * Kickstart both the clockers and requestAnimationFrame; it's a little premature to start\n         * animation here, because the first run() should take place before the first animate(), but\n         * since clock speed is now decoupled from animation speed, this isn't something we should\n         * worry about.\n         */\n        if (!this.fClockByFrame) {\n\n            this.idRunTimeout = setTimeout(this.onRunTimeout, 0);\n        }\n        if (this.fRequestAnimationFrame) this.requestAnimationFrame(this.onAnimationFrame);\n        return true;\n    }\n\n    /**\n     * step(nRepeat)\n     *\n     * @this {Time}\n     * @param {number} [nRepeat]\n     * @returns {boolean} true if successful, false if already running\n     */\n    step(nRepeat = 1)\n    {\n        if (!this.fRunning) {\n            if (nRepeat && !this.nStepping) {\n                this.nStepping = nRepeat;\n            }\n            if (this.nStepping) {\n                /*\n                 * Execute a minimum-cycle burst and then update all timers.\n                 */\n                this.nStepping--;\n                this.updateTimers(this.endBurst(this.doBurst(1, true)));\n                this.updateStatus();\n                if (this.nStepping) {\n                    let time = this;\n                    this.idStepTimeout = setTimeout(function onStepTimeout() {\n                        time.step(0);\n                    }, 0);\n                    return true;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * stop()\n     *\n     * @this {Time}\n     * @returns {boolean} true if successful, false if already stopped\n     */\n    stop()\n    {\n        if (this.nStepping) {\n            this.nStepping = 0;\n            this.updateStatus(true);\n            return true;\n        }\n        if (this.fRunning) {\n            this.fRunning = false;\n            this.endBurst();\n            this.updateStatus(true);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * updateStatus(fTransition)\n     *\n     * Used for periodic status updates from onYield(), single-step updates from step(), and transitional\n     * updates from start() and stop().\n     *\n     * @this {Time}\n     * @param {boolean} [fTransition]\n     */\n    updateStatus(fTransition)\n    {\n        if (fTransition) {\n            if (this.fRunning) {\n                this.println(\"starting (\" + this.getSpeedTarget() + \" target by \" + (this.fClockByFrame? \"frame\" : \"timer\") + \")\");\n            } else {\n                this.println(\"stopping\");\n            }\n        }\n\n        this.setBindingText(Time.BINDING.RUN, this.fRunning? \"Halt\" : \"Run\");\n        this.setBindingText(Time.BINDING.STEP, this.nStepping? \"Stop\" : \"Step\");\n        if (!this.fThrottling) {\n            this.setBindingText(Time.BINDING.SPEED, this.getSpeedCurrent());\n        }\n\n        for (let i = 0; i < this.aUpdaters.length; i++) {\n            this.aUpdaters[i](fTransition);\n        }\n    }\n\n    /**\n     * updateTimers(nCycles)\n     *\n     * Used by run() to reduce all active timer countdown values by the number of cycles just executed;\n     * this is the function that actually \"fires\" any timer(s) whose countdown has reached (or dropped below)\n     * zero, invoking their callback function.\n     *\n     * @this {Time}\n     * @param {number} nCycles (number of cycles actually executed)\n     */\n    updateTimers(nCycles)\n    {\n        if (nCycles >= 1) {\n            for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n                let timer = this.aTimers[iTimer-1];\n\n                if (timer.nCyclesLeft < 0) continue;\n                timer.nCyclesLeft -= nCycles;\n                if (timer.nCyclesLeft <= 0) {\n                    timer.nCyclesLeft = -1; // zero is technically an \"active\" value, so ensure the timer is dormant now\n                    timer.callBack();       // safe to invoke the callback function now\n                    if (timer.msAuto >= 0) {\n                        this.setTimer(iTimer, timer.msAuto);\n                    }\n                }\n            }\n        }\n    }\n}\n\nTime.BINDING = {\n    RUN:        \"run\",\n    SPEED:      \"speed\",\n    STEP:       \"step\",\n    THROTTLE:   \"throttle\"\n};\n\n/*\n * We yield more often now (120 times per second instead of 60), to help ensure that requestAnimationFrame()\n * callbacks can be called as timely as possible.  And we still only want to perform DOM-related status updates\n * no more than twice per second, so the required number of yields before each update has been increased as well.\n */\nTime.YIELDS_PER_SECOND = 120;\nTime.YIELDS_PER_UPDATE = 60;\n\nTime.VERSION    = 1.11;\n\n/**\n * @copyright http://pcjs.org/modules/devices/ledctrl.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), wrap: (boolean|undefined), rule: (string|undefined), pattern: (string|undefined), patterns: (Object|undefined), message: (string|undefined), toggleColor: (boolean|undefined), colors: (Object|undefined) }} */\nvar LCConfig;\n\n/**\n * LED Controller Chip\n *\n * @class {Chip}\n * @unrestricted\n * @property {boolean} fWrap\n * @property {string} sRule\n * @property {string} sPattern\n * @property {string} sMessage\n * @property {boolean} fToggleColor\n * @property {LED} leds\n * @property {Object} colorPalette\n * @property {string} colorDefault (obtained from the leds)\n * @property {string} colorSelected (set by updateColorSelection())\n * @property {Array.<string>} colors\n */\nclass Chip extends Device {\n    /**\n     * Chip(idMachine, idDevice, config)\n     *\n     * @this {Chip}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {LCConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, Chip.VERSION, config);\n\n        /*\n         * These are grid \"behavior\" properties.  If 'wrap' is true, then any off-grid neighbor cell\n         * locations are mapped to the opposite edge; otherwise, they are mapped to the LEDs \"scratch\" row.\n         */\n        this.fWrap = this.getDefaultBoolean('wrap', false);\n        this.sRule = this.getDefaultString('rule', \"\");\n        this.sPattern = this.getDefaultString('pattern', \"\");\n        this.setMessage(this.getDefaultString('message', \"\"));\n        \n        /*\n         * The 'toggleColor' property currently affects only grids that have a color palette: if true,\n         * then only an LED's color is toggled; otherwise, only its state (ie, ON or OFF) is toggled.\n         */\n        this.fToggleColor = this.getDefaultBoolean('toggleColor', false);\n        \n        /*\n         * Since all bindings should have been completed by super(), we can make a preliminary call\n         * to getCounts() to determine how many counts are stored per LED, to preallocate a count buffer.\n         */\n        this.countBuffer = new Array(this.getCounts().length);\n\n        /*\n         * Get access to the LED device, so we can update its display.\n         */\n        let leds = /** @type {LED} */ (this.findDeviceByClass(Machine.CLASS.LED));\n        if (leds) {\n            this.leds = leds;\n\n            /*\n             * If loadPattern() didn't load anything into the LED array, then call\n             * clearBuffer(true), which performs a combination of clearBuffer() and drawBuffer().\n             */\n            if (!this.loadPattern()) leds.clearBuffer(true);\n\n            /*\n             * Get access to the Input device, so we can add our click functions.\n             */\n            this.input = /** @type {Input} */ (this.findDeviceByClass(Machine.CLASS.INPUT));\n            if (this.input) {\n                this.input.addClick(this.onPower.bind(this), this.onReset.bind(this));\n            }\n\n            let configInput = {\n                \"class\":        \"Input\",\n                \"location\":     [0, 0, leds.widthView, leds.heightView, leds.colsView, leds.rowsView],\n                \"drag\":         !!(this.input && this.input.fDrag),\n                \"scroll\":       !!(this.input && this.input.fScroll),\n                \"hexagonal\":    leds.fHexagonal,\n                \"bindings\":     {\"surface\": leds.getBindingID(LED.BINDING.CONTAINER)}\n            };\n\n            let chip = this;\n            this.ledInput = new Input(idMachine, idDevice + \"Input\", configInput);\n            this.ledInput.addInput(function onLEDInput(col, row) {\n                chip.onInput(col, row);\n            });\n\n            this.colors = [];\n            this.colorDefault = leds.getDefaultColor();\n            this.updateColorSelection(this.colorDefault);\n            this.updateColorSwatches();\n            this.updateBackgroundImage(this.config[Chip.BINDING.IMAGE_SELECTION]);\n\n            /*\n             * Get access to the Time device, so we can give it our clocker() function.\n             */\n            this.time = /** @type {Time} */ (this.findDeviceByClass(Machine.CLASS.TIME));\n            if (this.time) {\n                this.time.addClocker(this.clocker.bind(this));\n                this.time.addUpdater(this.updateStatus.bind(this));\n            }\n\n            /*\n             * Establish an onCommand() handler.\n             */\n            this.addHandler(Device.HANDLER.COMMAND, this.onCommand.bind(this));\n        }\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Chip}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let chip = this;\n\n        switch(binding) {\n        case Chip.BINDING.COLOR_PALETTE:\n        case Chip.BINDING.COLOR_SELECTION:\n            element.onchange = function onSelectChange() {\n                chip.updateColorPalette(binding);\n            };\n            this.updateColorPalette();\n            break;\n\n        case Chip.BINDING.IMAGE_SELECTION:\n            element.onchange = function onImageChange() {\n                chip.updateBackgroundImage();\n            };\n            break;\n\n        case Chip.BINDING.PATTERN_SELECTION:\n            this.addBindingOptions(element, this.buildPatternOptions(this.config[Chip.BINDING.PATTERN_SELECTION]), false, this.config['pattern']);\n            element.onchange = function onPatternChange() {\n                chip.updatePattern();\n            };\n            break;\n\n        case Chip.BINDING.SAVE:\n            element.onclick = function onClickSave() {\n                let sPattern = chip.savePattern(true);\n                let elementSymbol = chip.bindings[Chip.BINDING.SYMBOL_INPUT];\n                if (elementSymbol) {\n                    sPattern = '\"' + elementSymbol.value + '\":\"' + sPattern.replace(/^([0-9]+\\/)*/, \"\") + '\",';\n                }\n                chip.println(sPattern);\n            };\n            break;\n\n        case Chip.BINDING.SAVE_TO_URL:\n            element.onclick = function onClickSaveToURL() {\n                let sPattern = chip.savePattern();\n                chip.println(sPattern);\n                let href = window.location.href;\n                if (href.indexOf('pattern=') >= 0) {\n                    href = href.replace(/(pattern=)[^&]*/, \"$1\" + sPattern.replace(/\\$/g, \"$$$$\"));\n                } else {\n                    href += ((href.indexOf('?') < 0)? '?' : '&') + \"pattern=\" + sPattern;\n                }\n                window.location = href;\n            };\n            break;\n\n        case Chip.BINDING.SYMBOL_INPUT:\n            element.onkeypress = function onChangeSymbol(event) {\n                element.value = String.fromCharCode(event.charCode);\n                let elementPreview = chip.bindings[Chip.BINDING.SYMBOL_PREVIEW];\n                if (elementPreview) elementPreview.textContent = element.value;\n                event.preventDefault();\n            };\n            break;\n\n        default:\n            if (binding.startsWith(Chip.BINDING.COLOR_SWATCH)) {\n                element.onclick = function onClickColorSwatch() {\n                    chip.updateColorSwatches(binding);\n                };\n                break;\n            }\n            /*\n             * This code allows you to bind a specific control (ie, a button) to a specific pattern;\n             * however, it's preferable to use the PATTERN_SELECTION binding above, and use a single list.\n             */\n            let patterns = this.config[Chip.BINDING.PATTERN_SELECTION];\n            if (patterns && patterns[binding]) {\n                element.onclick = function onClickPattern() {\n                    chip.loadPattern(binding);\n                };\n            }\n        }\n        super.addBinding(binding, element);\n    }\n\n    /**\n     * buildPatternOptions(patterns)\n     *\n     * @this {Chip}\n     * @param {Object} patterns\n     * @returns {Object}\n     */\n    buildPatternOptions(patterns)\n    {\n        let options = {};\n        for (let id in patterns) {\n            let name = id;\n            let lines = patterns[id];\n            for (let i = 0; i < lines.length; i++) {\n                if (lines[i].indexOf(\"#N\") == 0) {\n                    name = lines[i].substr(2).trim();\n                    break;\n                }\n            }\n            options[name] = id;\n        }\n        return options;\n    }\n\n    /**\n     * clocker(nCyclesTarget)\n     *\n     * @this {Chip}\n     * @param {number} nCyclesTarget (0 to single-step)\n     * @returns {number} (number of cycles actually \"clocked\")\n     */\n    clocker(nCyclesTarget = 0)\n    {\n        let nCyclesClocked = 0;\n        if (nCyclesTarget >= 0) {\n            let nActive;\n            do {\n                switch(this.sRule) {\n                case Chip.RULES.ANIM4:\n                    nActive = this.doCycling();\n                    break;\n                case Chip.RULES.LEFT1:\n                    nActive = this.doShifting(1);\n                    break;\n                case Chip.RULES.LIFE1:\n                    nActive = this.doCounting();\n                    break;\n                }\n                if (!nCyclesTarget) this.println(\"active cells: \" + nActive);\n                nCyclesClocked += 1;\n            } while (nCyclesClocked < nCyclesTarget);\n        }\n        return nCyclesClocked;\n    }\n\n    /**\n     * doCounting()\n     *\n     * Implements rule LIFE1 (straight-forward implementation of Conway's Game of Life rule \"B3/S23\").\n     * \n     * This iterates row-by-row and column-by-column.  It takes advantage of the one-dimensional LED\n     * buffer layout to move through the entire grid with a \"master\" cell index (iCell) and corresponding\n     * indexes for all 8 \"neighboring\" cells (iNO, iNE, iEA, iSE, iSO, iSW, iWE, and iNW), incrementing\n     * them all in unison.\n     *\n     * The row and col variables are used only to detect when we are at the \"edges\" of the grid, and whether\n     * (depending on the wrap setting) any north, east, south, or west indexes that are now \"off the grid\"\n     * should be adjusted to the other side of the grid (or set to the dead \"scratch\" row at the end of the\n     * grid if wrap is disabled).  Similarly, when we leave an \"edge\", those same indexes must be restored\n     * to their normal positions, relative to the \"master\" index (iCell).\n     *\n     * The inline tests for whether iCell is at an edge are unavoidable, unless we break the logic up into\n     * 5 discrete steps: one for the rectangle just inside the edges, and then four for each of the north,\n     * east, south, and west edge strips.  But unless we really need that (presumably tiny) speed boost,\n     * I'm inclined to keep the logic simple.\n     *\n     * The logic is still a bit cluttered by the all the edge detection checks (and the wrap checks within\n     * each edge case), and perhaps I should have written two versions of this function (with and without wrap),\n     * but again, that would produce more repetition of the rest of the game logic, so I'm still inclined to\n     * leave it as-is.\n     *\n     * @this {Chip}\n     * @returns {number}\n     */\n    doCounting()\n    {\n        let cActive = 0;\n        let leds = this.leds;\n        let buffer = leds.getBuffer();\n        let bufferClone = leds.getBufferClone();\n        let nCols = leds.colsView;\n        let nRows = leds.rows;\n        /*\n         * The number of LED buffer elements per cell is an LED implementation detail that should not be\n         * assumed, so we obtain it from the LED object, and use it to calculate the per-cell increment,\n         * per-row increment, and per-grid increment; the latter gives us the offset of the LED buffer's\n         * scratch row, which we rely upon when wrap is turned off.\n         * \n         * NOTE: Since we're only processing colsView, not cols, we must include nBufferIncExtra in nIncPerRow.\n         */\n        let nInc = leds.nBufferInc;\n        let nIncPerRow = nCols * nInc + leds.nBufferIncExtra;\n        let nIncPerGrid = nRows * nIncPerRow;\n\n        let iCell = 0;\n        let iCellDummy = nIncPerGrid;\n        let iNO = iCell - nIncPerRow;\n        let iNW = iNO - nInc;\n        let iNE = iNO + nInc;\n        let iWE = iCell - nInc;\n        let iEA = iCell + nInc;\n        let iSO = iCell + nIncPerRow;\n        let iSW = iSO - nInc;\n        let iSE = iSO + nInc;\n\n        for (let row = 0; row < nRows; row++) {\n            if (!row) {                         // at top (north) edge; restore will be done after the col loop ends\n                if (!this.fWrap) {\n                    iNO = iNW = iNE = iCellDummy;\n                } else {\n                    iNO += nIncPerGrid; iNW += nIncPerGrid; iNE += nIncPerGrid;\n                }\n            } else if (row == nRows - 1) {      // at bottom (south) edge\n                if (!this.fWrap) {\n                    iSO = iSW = iSE = iCellDummy;\n                } else {\n                    iSO -= nIncPerGrid; iSW -= nIncPerGrid; iSE -= nIncPerGrid;\n                }\n            }\n            for (let col = 0; col < nCols; col++) {\n                if (!col) {                     // at left (west) edge\n                    if (!this.fWrap) {\n                        iWE = iNW = iSW = iCellDummy;\n                    } else {\n                        iWE += nIncPerRow; iNW += nIncPerRow; iSW += nIncPerRow;\n                    }\n                } else if (col == 1) {          // just finished left edge, restore west indexes\n                    if (!this.fWrap) {\n                        iWE = iCell - nInc; iNW = iNO - nInc; iSW = iSO - nInc;\n                    } else {\n                        iWE -= nIncPerRow; iNW -= nIncPerRow; iSW -= nIncPerRow;\n                    }\n                } else if (col == nCols - 1) {  // at right (east) edge; restore will be done after the col loop ends\n                    if (!this.fWrap) {\n                        iEA = iNE = iSE = iCellDummy;\n                    } else {\n                        iEA -= nIncPerRow; iNE -= nIncPerRow; iSE -= nIncPerRow;\n                    }\n                }\n                let state = buffer[iCell];\n                let nNeighbors = buffer[iNW]+buffer[iNO]+buffer[iNE]+buffer[iEA]+buffer[iSE]+buffer[iSO]+buffer[iSW]+buffer[iWE];\n\n                if (nNeighbors == 3) {\n                    state = LED.STATE.ON;\n                } else if (nNeighbors != 2) {\n                    state = LED.STATE.OFF;\n                }\n                bufferClone[iCell] = state;\n                bufferClone[iCell+1] = buffer[iCell+1];\n                bufferClone[iCell+2] = buffer[iCell+2];\n                bufferClone[iCell+3] = buffer[iCell+3] | ((buffer[iCell] !== state)? LED.FLAGS.MODIFIED : 0);\n                iCell += nInc; iNW += nInc; iNO += nInc; iNE += nInc; iEA += nInc; iSE += nInc; iSO += nInc; iSW += nInc; iWE += nInc;\n                if (state == LED.STATE.ON) cActive++;\n            }\n            if (!this.fWrap) {\n                if (!row) {\n                    iNO = iCell - nIncPerRow; iNW = iNO - nInc; iNE = iNO + nInc;\n                }\n                iEA = iCell + nInc; iNE = iNO + nInc; iSE = iSO + nInc;\n            } else {\n                if (!row) {\n                    iNO -= nIncPerGrid; iNW -= nIncPerGrid; iNE -= nIncPerGrid;\n                }\n                iEA += nIncPerRow; iNE += nIncPerRow; iSE += nIncPerRow;\n            }\n        }\n\n        /*\n         * swapBuffers() takes care of setting the buffer-wide modified flags (leds.fBufferModified), so we don't have to.\n         */\n        leds.swapBuffers();\n        return cActive;\n    }\n\n    /**\n     * doCycling()\n     *\n     * Implements rule ANIM4 (animation using 4-bit counters for state/color cycling).\n     *\n     * @this {Chip}\n     * @returns {number}\n     */\n    doCycling()\n    {\n        let cActive = 0;\n        let leds = this.leds;\n        let nCols = leds.colsView, nRows = leds.rows;\n        let counts = this.countBuffer;\n        for (let row = 0; row < nRows; row++) {\n            for (let col = 0; col < nCols; col++) {\n                if (!leds.getLEDCounts(col, row, counts)) continue;\n                cActive++;\n                /*\n                 * Here's the layout of each cell's counts (which mirrors the Chip.COUNTS layout):\n                 *\n                 *      [0] is the \"working\" count\n                 *      [1] is the ON count\n                 *      [2] is the OFF count\n                 *      [3] is the color-cycle count\n                 *\n                 * Whenever the working count is zero, we examine the cell's state and advance it to\n                 * the next state: if it was ON, it goes to OFF (and the OFF count is loaded into\n                 * the working count); if it was OFF, then color-cycle count (if any) is applied, and\n                 * the state goes to ON (and the ON count is loaded).\n                 */\n                if (counts[0]) {\n                    counts[0]--;\n                }\n                else {\n                    let state = leds.getLEDState(col, row), stateNew = state || 0;\n                    switch(state) {\n                    case LED.STATE.ON:\n                        stateNew = LED.STATE.OFF;\n                        counts[0] = counts[2];\n                        if (counts[0]) {\n                            counts[0]--;\n                            break;\n                        }\n                        /* falls through */\n                    case LED.STATE.OFF:\n                        if (counts[3]) {\n                            let color = leds.getLEDColor(col, row);\n                            let iColor = this.colors.indexOf(color);\n                            if (iColor >= 0) {\n                                iColor = (iColor + counts[3]);\n                                while (iColor >= this.colors.length) iColor -= this.colors.length;\n                                leds.setLEDColor(col, row, this.colors[iColor]);\n                            }\n                        }\n                        stateNew = LED.STATE.ON;\n                        counts[0] = counts[1];\n                        if (counts[0]) {\n                            counts[0]--;\n                        }\n                        break;\n                    }\n                    if (stateNew !== state) leds.setLEDState(col, row, stateNew);\n                }\n                leds.setLEDCounts(col, row, counts);\n            }\n        }\n        return cActive;\n    }\n\n    /**\n     * doShifting()\n     *\n     * Implements rule LEFT1 (shift left one cell).\n     * \n     * Some of the state we maintain outside of the LED array includes the number of columns of data remaining\n     * in the \"offscreen\" portion of the array (nMessageCount).  Whenever we see that it's zero, we load it with the\n     * next chuck of data (ie, the LED pattern for the next symbol in sMessage).\n     * \n     * @this {Chip}\n     * @param {number} [shift] (default is 1, for a leftward shift of one cell)\n     * @returns {number}\n     */\n    doShifting(shift = 1)\n    {\n        let cActive = 0;\n        let leds = this.leds;\n        let nCols = leds.cols, nRows = leds.rows;\n\n        if (!this.processMessageCmd()) return 0;\n\n        //\n        // This is a very slow and simple shift-and-exchange loop, which through a series of exchanges,\n        // also migrates the left-most column to the right-most column.  Good for testing but not much else.\n        //\n        // for (let row = 0; row < nRows; row++) {\n        //     for (let col = 0; col < nCols - shift; col++) {\n        //         let stateLeft = leds.getLEDState(col, row) || LED.STATE.OFF;\n        //         let stateRight = leds.getLEDState(col + 1, row) || LED.STATE.OFF;\n        //         if (stateRight) cActive++;\n        //         leds.setLEDState(col, row, stateRight);\n        //         leds.setLEDState(col + 1, row, stateLeft);\n        //     }\n        // }\n        // leds.fShiftedLeft = true;\n        //\n\n        let iCell = 0;\n        let buffer = leds.getBuffer();\n        let nInc = leds.nBufferInc;\n        let nIncPerRow = nCols * nInc;\n        \n        let nEmptyCols = 0;\n        this.nLeftEmpty = this.nRightEmpty = -1;\n        for (let col = 0; col < nCols - shift; col++) {\n            let isEmptyCol = 1;\n            let iCellOrig = iCell;\n            for (let row = 0; row < nRows; row++) {\n                let stateOld = buffer[iCell];\n                let stateNew = (buffer[iCell] = buffer[iCell + nInc]);\n                let flagsNew = ((stateNew !== stateOld)? LED.FLAGS.MODIFIED : 0);\n                buffer[iCell + 1] = buffer[iCell + nInc + 1];\n                buffer[iCell + 2] = buffer[iCell + nInc + 2];\n                buffer[iCell + 3] = buffer[iCell + nInc + 3] | flagsNew;\n                if (stateNew) {\n                    cActive++;\n                    isEmptyCol = 0;\n                }\n                iCell += nIncPerRow;\n            }\n            iCell = iCellOrig + nInc;\n            if (isEmptyCol) {\n                nEmptyCols++;\n            } else {\n                if (this.nLeftEmpty < 0) this.nLeftEmpty = nEmptyCols;\n                nEmptyCols = 0;\n            }\n        }\n        if (this.nLeftEmpty < 0) this.nLeftEmpty = nEmptyCols;\n        this.nRightEmpty = nEmptyCols;\n\n        for (let row = 0; row < nRows; row++) {\n            leds.initCell(buffer, iCell);\n            iCell += nIncPerRow;\n        }\n\n        leds.fShiftedLeft = leds.fBufferModified = true;\n        \n        return cActive;\n    }\n\n    /**\n     * getCount(binding)\n     * \n     * @this {Chip}\n     * @param {string} binding \n     * @returns {number}\n     */\n    getCount(binding)\n    {\n        let count = 0;\n        let element = this.bindings[binding];\n        if (element && element.options) {\n            let option = element.options[element.selectedIndex];\n            count = option && +option.value || 0;\n        }\n        return count;\n    }\n    \n    /**\n     * getCounts()\n     *\n     * @this {Chip}\n     * @param {boolean} [fAdvance]\n     * @returns {Array.<number>}\n     */\n    getCounts(fAdvance)\n    {\n        let init = 0;\n        if (fAdvance) {\n            let element = this.bindings[Chip.BINDING.COUNT_INIT];\n            if (element && element.options) {\n                let option = element.options[element.selectedIndex];\n                if (option) {\n                    init = +option.value || 0;\n                    /*\n                     * A more regular pattern results if we stick to a range of counts equal to the\n                     * sum of the ON and OFF counts.  Let's get that sum now.  However, this assumes\n                     * that the user is starting with an initial count of ZERO.  Also, we're only going\n                     * to do this if the sum of ON and OFF counts is EVEN; if it's odd, then we'll let\n                     * the user do their thing.\n                     */\n                    element.selectedIndex++;\n                    let range = this.getCount(Chip.BINDING.COUNT_ON) + this.getCount(Chip.BINDING.COUNT_OFF);\n                    let fReset = (!(range & 1) && init == range - 1);\n                    if (fReset || element.selectedIndex < 0 || element.selectedIndex >= element.options.length) {\n                        element.selectedIndex = 0;\n                    }\n                }\n            }\n        }\n        let counts = [init];\n        for (let i = 1; i < Chip.COUNTS.length; i++) {\n            counts.push(this.getCount(Chip.COUNTS[i]));\n        }\n        return counts;\n    }\n\n    /**\n     * loadPattern(id)\n     *\n     * If no id is specified, load the initialization pattern, if any, set via the LCConfig\n     * \"pattern\" property (which, in turn, can be set as URL override, if desired).\n     *\n     * NOTE: Our initialization pattern is a extended single-string version of the RLE pattern\n     * file format: \"col/row/width/height/tokens\".  The default rule is assumed.\n     *\n     * @this {Chip}\n     * @param {string} [id]\n     * @returns {boolean}\n     */\n    loadPattern(id)\n    {\n        let leds = this.leds;\n        let iCol = -1, iRow = -1, width, height, rule, sPattern = \"\";\n\n        if (!id) {\n            /*\n             * If no id is provided, then we fallback to sPattern, which can be either an\n             * id (if it doesn't start with a digit) or one of our own extended pattern strings.\n             */\n            if (!this.sPattern.match(/^[0-9]/)) id = /** @type {string} */ (this.sPattern);\n        }\n\n        if (!id) {\n            if (!this.sPattern) {\n                return false;\n            }\n            let i = 0;\n            let aParts = this.sPattern.split('/');\n            if (aParts.length == 5) {           // extended pattern string\n                iCol = +aParts[i++];\n                iRow = +aParts[i++];\n            }\n            if (aParts.length == 3 || aParts.length == 5) {\n                width = +aParts[i++];           // conventional pattern string\n                height = +aParts[i++];\n                sPattern = aParts[i];\n            }\n            else {\n                this.println(\"unrecognized pattern: \" + this.sPattern);\n                return false;\n            }\n            rule = this.sRule;  // TODO: If we ever support multiple rules, then allow rule overrides, too\n        }\n        else {\n            let patterns = this.config[Chip.BINDING.PATTERN_SELECTION];\n            let lines = patterns && patterns[id];\n            if (!lines) {\n                this.println(\"unknown pattern: \" + id);\n                return false;\n            }\n            this.println(\"loading pattern '\" + id + \"'\");\n            for (let i = 0, n = 0; i < lines.length; i++) {\n                let sLine = lines[i];\n                if (sLine[0] == '#') {\n                    this.println(sLine);\n                    continue;\n                }\n                if (!n++) {\n                    let match = sLine.match(/x\\s*=\\s*([0-9]+)\\s*,\\s*y\\s*=\\s*([0-9]+)\\s*(?:,\\s*rule\\s*=\\s*(\\S+)|)/i);\n                    if (!match) {\n                        this.println(\"unrecognized header line\");\n                        return false;\n                    }\n                    width = +match[1];\n                    height = +match[2];\n                    rule = match[3];\n                    continue;\n                }\n                let end = sLine.indexOf('!');\n                if (end >= 0) {\n                    sPattern += sLine.substr(0, end);\n                    break;\n                }\n                sPattern += sLine;\n            }\n        }\n\n        if (rule != this.sRule) {\n            this.println(\"unsupported rule: \" + rule);\n            return false;\n        }\n\n        if (iCol < 0) iCol = (leds.cols - width) >> 1;\n        if (iRow < 0) iRow = (leds.rows - height) >> 1;\n\n        if (iCol < 0 || iCol + width > leds.cols || iRow < 0 || iRow + height > leds.rows) {\n            this.printf(\"pattern too large (%d,%d)\\n\", width, height);\n            return false;\n        }\n\n        return this.loadPatternString(iCol, iRow, sPattern) > 0;\n    }\n\n    /**\n     * loadPatternString(col, row, sPattern, fOverwrite)\n     *\n     * @this {Chip}\n     * @param {number} col\n     * @param {number} row\n     * @param {string} sPattern\n     * @param {boolean} [fOverwrite]\n     * @returns {number} (number of columns changed, 0 if none)\n     */\n    loadPatternString(col, row, sPattern, fOverwrite = false)\n    {\n        let leds = this.leds;\n        let rgb = [0, 0, 0, 1], counts = 0;\n        let fColors = false, fCounts = false;\n\n        /*\n         * TODO: Cache these pattern splits.\n         */\n        let aTokens = sPattern.split(/([a-z$])/i);\n        \n        if (!fOverwrite) leds.clearBuffer();\n        \n        /*\n         * We could add checks that verify that col and row stay within the bounds of the specified\n         * width and height of the pattern, but it's possible that there are some legit patterns out\n         * there that didn't get their bounds quite right.  And in any case, no harm can come of it,\n         * because setLEDState() will ignore any parameters outside the LED's array bounds.\n         */\n        let i = 0, iCol = col, colMax = 0;\n        while (i < aTokens.length - 1) {\n            let n = aTokens[i++];\n            let token = aTokens[i++];\n            let v = +n, nRepeat = (n === \"\"? 1 : v);\n            while (nRepeat--) {\n                let nAdvance = 0, fModified = false;\n                switch(token) {\n                case '$':\n                    fColors = fCounts = false;\n                    col = iCol;\n                    row++;\n                    break;\n                case 'C':\n                    counts = v;\n                    fCounts = true;\n                    break;\n                case 'R':\n                    rgb[0] = v;\n                    fColors = true;\n                    break;\n                case 'G':\n                    rgb[1] = v;\n                    fColors = true;\n                    break;\n                case 'B':\n                    rgb[2] = v;\n                    fColors = true;\n                    break;\n                case 'A':\n                    rgb[3] = v;\n                    fColors = true;\n                    break;\n                case 'b':\n                    fModified = leds.setLEDState(col, row, LED.STATE.OFF);\n                    nAdvance++;\n                    break;\n                case 'o':\n                    fModified = leds.setLEDState(col, row, LED.STATE.ON);\n                    nAdvance++;\n                    break;\n                default:\n                    this.printf(\"unrecognized pattern token: %s\\n\", token);\n                    break;\n                }\n                if (fModified == null) {\n                    this.printf(\"invalid pattern position (%d,%d)\\n\", col, row);\n                } else {\n                    if (fColors) {\n                        let color = leds.getRGBColorString(rgb);\n                        leds.setLEDColor(col, row, color);\n                    }\n                    if (fCounts) {\n                        leds.setLEDCountsPacked(col, row, counts);\n                    }\n                    if (colMax < col) colMax = col;\n                    col += nAdvance;\n                }\n            }\n        }\n\n        if (!fOverwrite) leds.drawBuffer(true);\n\n        return ((colMax -= (iCol - 1)) < 0? 0 : colMax);\n    }\n    \n    /**\n     * loadState(state)\n     *\n     * If any saved values don't match (possibly overridden), abandon the given state and return false.\n     * \n     * @this {Chip}\n     * @param {Object|Array|null} state\n     * @returns {boolean}\n     */\n    loadState(state)\n    {\n        if (state) {\n            let stateChip = state['stateChip'] || state[0];\n            if (!stateChip || !stateChip.length) {\n                this.println(\"Invalid saved state\");\n                return false;\n            }\n            let version = stateChip.shift();\n            if ((version|0) !== (Chip.VERSION|0)) {\n                this.printf(\"Saved state version mismatch: %3.2f\\n\", version);\n                return false;\n            }\n            // try {\n            // } catch(err) {\n            //     this.println(\"Chip state error: \" + err.message);\n            //     return false;\n            // }\n            if (!Device.getURLParms()['pattern'] && !Device.getURLParms()[Chip.BINDING.IMAGE_SELECTION]) {\n                let stateLEDs = state['stateLEDs'] || state[1];\n                if (stateLEDs && this.leds && !this.sMessage) {\n                    if (!this.leds.loadState(stateLEDs)) return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * onCommand(aTokens, machine)\n     *\n     * Processes commands for our \"mini-debugger\".\n     *\n     * @this {Chip}\n     * @param {Array.<string>} aTokens\n     * @param {Device} [machine]\n     * @returns {boolean} (true if processed, false if not)\n     */\n    onCommand(aTokens, machine)\n    {\n        let sResult = \"\";\n        let s = aTokens.shift();\n        let c = aTokens.shift();\n\n        switch(c[0]) {\n        case 's':\n            this.setMessage(aTokens.join(' '));\n            break;\n\n        case '?':\n            sResult = \"\";\n            Chip.COMMANDS.forEach(cmd => {sResult += '\\n' + cmd;});\n            if (sResult) sResult = \"additional commands:\" + sResult;\n            break;\n\n        default:\n            if (s) sResult = \"unrecognized command '\" + s + \"' (try '?')\";\n            break;\n        }\n        if (sResult) this.println(sResult.trim());\n        return true;\n    }\n\n    /**\n     * onInput(col, row)\n     *\n     * @this {Chip}\n     * @param {number} col\n     * @param {number} row\n     */\n    onInput(col, row)\n    {\n        let leds = this.leds;\n        if (col >= 0 && row >= 0) {\n            if (this.colorSelected) {\n                if (!leds.setLEDColor(col, row, this.colorSelected)) {\n                    if (this.fToggleColor) {\n                        leds.setLEDColor(col, row);\n                    } else {\n                        leds.setLEDState(col, row, LED.STATE.ON - leds.getLEDState(col, row));\n                    }\n                } else {\n                    leds.setLEDState(col, row, LED.STATE.ON);\n                }\n            }\n            else {\n                leds.setLEDState(col, row, LED.STATE.ON - leds.getLEDState(col, row));\n            }\n            let fAdvance = !!leds.getLEDState(col, row);\n            leds.setLEDCounts(col, row, this.getCounts(fAdvance));\n            leds.drawBuffer();\n        }\n    }\n    \n    /**\n     * onPower(fOn)\n     *\n     * Automatically called by the Machine device after all other devices have been powered up (eg, after\n     * a page load event), as well as when all devices are being powered down (eg, before a page unload event).\n     *\n     * May subsequently be called by the Input device to provide notification of a user-initiated power event\n     * (eg, toggling a power button); in this case, fOn should NOT be set, so that no state is loaded or saved.\n     *\n     * @this {Chip}\n     * @param {boolean} [fOn] (true to power on, false to power off; otherwise, toggle it)\n     */\n    onPower(fOn)\n    {\n        if (this.time) {\n            if (fOn) {\n                this.time.start();\n            } else {\n                this.time.stop();\n            }\n        }\n    }\n\n    /**\n     * onReset()\n     *\n     * Called by the Input device to provide notification of a reset event.\n     *\n     * @this {Chip}\n     */\n    onReset()\n    {\n        this.println(\"reset\");\n        this.leds.clearBuffer(true);\n    }\n\n    /**\n     * onRestore()\n     *\n     * @this {Chip}\n     */\n    onRestore()\n    {\n        this.loadState(this.loadLocalStorage());\n    }\n\n    /**\n     * onSave()\n     *\n     * @this {Chip}\n     */\n    onSave()\n    {\n        this.saveLocalStorage(this.saveState());\n    }\n\n    /**\n     * processMessageCmd(cmd, count)\n     * \n     * @this {Chip}\n     * @param {number} [cmd]\n     * @param {number} [count]\n     * @returns {boolean} (true to shift another cell, false if not)\n     */\n    processMessageCmd(cmd, count = 0)\n    {\n        if (cmd) {\n            this.nMessageCmd = cmd;\n            this.nMessageCount = count;\n        }\n\n        switch(this.nMessageCmd) {\n\n        case Chip.MESSAGE_CMD.HALT:\n            return false;\n\n        case Chip.MESSAGE_CMD.SHIFT:\n            if (this.nMessageCount) {\n                this.nMessageCount--;\n                return true;\n            }\n            break;\n\n        case Chip.MESSAGE_CMD.SLEEP:\n            if (this.nMessageCount) {\n                this.nMessageCount--;\n                return false;\n            }\n            break;\n\n        case Chip.MESSAGE_CMD.LOAD:\n            break;\n\n        case Chip.MESSAGE_CMD.CENTER:\n            if (this.nLeftEmpty > this.nRightEmpty) return true;\n            break;\n\n        case Chip.MESSAGE_CMD.OFF:\n            this.leds.setDisplayOff(true);\n            this.nMessageCmd = Chip.MESSAGE_CMD.SLEEP;\n            break;\n\n        case Chip.MESSAGE_CMD.ON:\n            this.leds.setDisplayOff(false);\n            this.nMessageCmd = Chip.MESSAGE_CMD.SLEEP;\n            break;\n\n        case Chip.MESSAGE_CMD.RELOAD:\n            this.setMessage(this.sMessage);\n            return true;\n\n        default:\n\n            return false;\n        }\n\n        if (!cmd) return this.processMessageSymbol();\n        return false;\n    }\n    \n    /**\n     * processMessageSymbol()\n     * \n     * @this {Chip}\n     * @returns {boolean} (true if another message symbol loaded)\n     */\n    processMessageSymbol()\n    {\n        if (this.sMessage) {\n            if (this.iMessageNext >= this.sMessage.length) {\n                this.iMessageNext = 0;\n            }\n            let chMessage = this.sMessage[this.iMessageNext++];\n            if (chMessage == '$') {\n                let cols = 0;\n                let i = this.iMessageNext;\n                while (i < this.sMessage.length) {\n                    let d = this.sMessage.charCodeAt(i) - 0x30;\n                    if (d < 0 || d > 9) break;\n                    cols = cols * 10 + d;\n                    i++;\n                }\n                if (i < this.sMessage.length) {\n                    let ch = this.sMessage[i++];\n                    if (ch == '$') {\n                        this.iMessageNext = i;\n                    } else {\n                        let cmd = Chip.MESSAGE_CODE[ch];\n                        if (cmd) {\n                            this.iMessageNext = i;\n                            return this.processMessageCmd(cmd, cols);\n                        }\n                        this.println(\"unrecognized message code: $\" + ch);\n                    }\n                }\n            }\n            if (chMessage == ' ') {\n                this.nMessageCount += 2;\n            } else {\n                let sPattern = Chip.SYMBOLS[chMessage];\n                if (sPattern) this.nMessageCount = this.loadPatternString(this.leds.colsView + 1, 0, sPattern, true);\n                this.nMessageCount += 1;\n            }\n            this.nMessageCmd = Chip.MESSAGE_CMD.SHIFT;\n            return true;\n        }\n        this.nMessageCmd = Chip.MESSAGE_CMD.HALT;\n        return false;\n    }\n    \n    /**\n     * savePattern(fMinWidth, fMinHeight)\n     *\n     * We save our patterns as a string that is largely compatible with the \"Game of Life RLE Format\"\n     * (refer to http://www.conwaylife.com/w/index.php?title=Run_Length_Encoded), which uses <repetition><tag>\n     * pairs to describes runs of identical cells; the <tag> is either 'o' for \"active\" cells, 'b' for \"inactive\"\n     * cells, or '$' for end of line.\n     *\n     * We say \"largely\" compatible because it's not really a goal for our pattern strings to be compatible\n     * with any other RLE reader.  For example, we don't break our string into lines of 70 characters or less,\n     * so that's already one incompatibility.  Also, we don't attempt to determine the minimum bounding\n     * rectangle for the current pattern, because we use these strings to save/restore the entire grid as it\n     * originally appeared, not just the pattern within the grid.  Both of those differences can be dealt with\n     * in the future with a special RLE-compatibility flag, if we ever care.\n     *\n     * Moreover, we must deal with grids containing multi-color cells and additional state (eg, internal counters)\n     * not found in typical \"Game of Life\" grids, so we may precede each <repetition><tag> pair with zero or more\n     * <value><modifier> pairs, where <modifier> can be:\n     *\n     *      'R':    red color value (assumed zero if not present)\n     *      'G':    green color value (assumed zero if not present)\n     *      'B':    blue color value (assumed zero if not present)\n     *      'C':    packed count value (ie, internal counts packed into a single unsigned 32-bit number)\n     *\n     * If we use any of the above modifiers, they are always preceded with a value unless the value is zero\n     * (unlike the <repetition><tag> pairs, where a repetition of 1 is assumed if omitted).\n     *\n     * Also, a modifier remains in effect until modified by another modifier, reducing the amount of\n     * \"modifier noise\" in the pattern string.\n     *\n     * @this {Chip}\n     * @param {boolean} [fMinWidth] (set to true to determine the minimum width)\n     * @param {boolean} [fMinHeight] (set to true to determine the minimum height)\n     * @returns {string}\n     */\n    savePattern(fMinWidth, fMinHeight)\n    {\n        let leds = this.leds;\n\n        let sPattern = \"\";\n        let iCol = 0, iRow = 0;\n        let nCols = this.leds.cols, nRows = this.leds.rows;\n\n        let fColors = !!this.colors.length;\n        let state, rgb = [0, 0, 0], counts;\n        let stateLast = 0, rgbLast = [0, 0, 0, 1], countsLast = 0;\n        let statePrev = 0, rgbPrev = [0, 0, 0, 1], countsPrev = 0, nPrev = 0;\n\n        /**\n         * flushRun(fEndRow)\n         * \n         * @param {boolean} [fEndRow]\n         */\n        let flushRun = function(fEndRow) {\n            let fDelta = false;\n            if (rgb[3] == null) rgb[3] = 1;\n            if (nPrev) {\n                if (fColors) {\n                    if (rgb[0] !== rgbPrev[0] || rgb[1] !== rgbPrev[1] || rgb[2] !== rgbPrev[2] || rgb[3] !== rgbPrev[3]) {\n                        fDelta = true;\n                    }\n                    if (counts !== countsPrev) {\n                        fDelta = true;\n                    }\n                }\n                if (state !== statePrev) {\n                    fDelta = true;\n                }\n                if (fDelta || fEndRow && statePrev) {\n                    if (fColors) {\n                        if (rgbLast[0] !== rgbPrev[0]) {\n                            rgbLast[0] = rgbPrev[0];\n                            sPattern += (rgbPrev[0] || \"\") + 'R';\n                        }\n                        if (rgbLast[1] !== rgbPrev[1]) {\n                            rgbLast[1] = rgbPrev[1];\n                            sPattern += (rgbPrev[1] || \"\") + 'G';\n                        }\n                        if (rgbLast[2] !== rgbPrev[2]) {\n                            rgbLast[2] = rgbPrev[2];\n                            sPattern += (rgbPrev[2] || \"\") + 'B';\n                        }\n                        if (rgbLast[3] !== rgbPrev[3]) {\n                            rgbLast[3] = rgbPrev[3];\n                            sPattern += (rgbPrev[3] || \"\") + 'A';\n                        }\n                        if (countsLast !== countsPrev) {\n                            countsLast = countsPrev;\n                            sPattern += (countsPrev || \"\") + 'C';\n                        }\n                    }\n                    if (nPrev > 1) sPattern += nPrev;\n                    sPattern += (statePrev === LED.STATE.ON? 'o' : 'b');\n                    stateLast = statePrev;\n                    fDelta = true;\n                }\n            }\n            if (fEndRow) {\n                sPattern += '$';\n                nPrev = 0;\n            } else {\n                if (!fDelta) {\n                    nPrev++;\n                } else {\n                    nPrev = 1;\n                }\n                statePrev = state;\n                rgbPrev[0] = rgb[0];\n                rgbPrev[1] = rgb[1];\n                rgbPrev[2] = rgb[2];\n                rgbPrev[3] = rgb[3];\n                countsPrev = counts;\n            }\n        };\n\n        /*\n         * Before we begin, see if either fMinWidth or fMinHeight are set, requiring a bounds prescan.\n         */\n        let colMin = 0, colMax = leds.cols - 1;\n        let rowMin = 0, rowMax = leds.rows - 1;\n        if (fMinWidth || fMinHeight) {\n            if (fMinWidth) {\n                colMin = colMax; colMax = 0;\n            }\n            if (fMinHeight) {\n                rowMin = rowMax; rowMax = 0;\n            }\n            for (let row = 0; row < leds.rows; row++) {\n                for (let col = 0; col < leds.cols; col++) {\n                    state = leds.getLEDState(col, row);\n                    if (state) {\n                        if (fMinWidth) {\n                            if (colMin > col) colMin = col;\n                            if (colMax < col) colMax = col;\n                        }\n                        if (fMinHeight) {\n                            if (rowMin > row) rowMin = row;\n                            if (rowMax < row) rowMax = row;\n                        }\n                    }\n                }\n            }\n            nCols = colMax - colMin + 1;\n            nRows = rowMax - rowMin + 1;\n            if (nCols < 0) nCols = 0;\n            if (nRows < 0) nRows = 0;\n        }\n\n        /*\n         * Begin pattern generation.\n         */\n        for (let row = rowMin; row <= rowMax; row++) {\n            for (let col = colMin; col <= colMax; col++) {\n                state = leds.getLEDState(col, row);\n                leds.getLEDColorValues(col, row, rgb);\n                counts = leds.getLEDCountsPacked(col, row);\n                flushRun();\n            }\n            flushRun(true);\n        }\n\n        /*\n         * Remove all '$' at the beginning of the pattern, if we're asked for the minimum height (or no minimums at all)\n         */\n        if (fMinHeight || !fMinWidth) {\n            while (sPattern[0] == '$') {\n                iRow++; nRows--;\n                sPattern = sPattern.slice(1);\n            }\n        }\n\n        /*\n         * Similarly, remove all '$$' at the end of the pattern.\n         */\n        while (sPattern.slice(-2) == '$$') {\n            nRows--;\n            sPattern = sPattern.slice(0, -1);\n        }\n        if (sPattern == '$') nRows = 0;\n\n        /*\n         * If we were asked for either the minimum width or height, then don't bother including starting col and row (which\n         * we only want for patterns used to save/restore entire grids).\n         */\n        sPattern = ((fMinWidth || fMinHeight)? \"\" : (iCol + '/' + iRow + '/')) + nCols + '/' + nRows + '/' + sPattern.slice(0, -1);\n        sPattern = sPattern.replace(/\\$+$/, '');\n        return sPattern;\n    }\n\n    /**\n     * saveState()\n     *\n     * @this {Chip}\n     * @returns {Array}\n     */\n    saveState()\n    {\n        let state = [[],[]];\n        let stateChip = state[0];\n        let stateLEDs = state[1];\n        stateChip.push(Chip.VERSION);\n        if (this.leds) this.leds.saveState(stateLEDs);\n        return state;\n    }\n\n    /**\n     * setMessage(s)\n     *\n     * @this {Chip}\n     * @param {string} s\n     */\n    setMessage(s)\n    {\n        if (this.sMessage != s) {\n            if (s) this.println(\"new message: '\" + s + \"'\");\n            this.sMessage = s;\n        }\n        this.iMessageNext = this.nMessageCount = 0;\n        this.nMessageCmd = Chip.MESSAGE_CMD.LOAD;\n    }\n    \n    /**\n     * updateBackgroundImage(sImage)\n     *\n     * @this {Chip}\n     * @param {string} [sImage]\n     */\n    updateBackgroundImage(sImage)\n    {\n        let element = this.bindings[Chip.BINDING.IMAGE_SELECTION];\n        if (element && element.options.length) {\n            if (sImage) {\n                for (let i = 0; i < element.options.length; i++) {\n                    if (element.options[i].value == sImage) {\n                        element.selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n            sImage = element.options[element.selectedIndex].value;\n            this.leds.setContainerStyle('backgroundImage', sImage? (\"url('\" + sImage + \"')\") : \"none\");\n        }\n    }\n\n    /**\n     * updateColorPalette(binding)\n     *\n     * In addition to being called whenever the COLOR_PALETTE or COLOR_SELECTION onChange handler is\n     * called, this is also called when any of the color controls are initialized, because we don't know\n     * in what order the elements will be bound.\n     *\n     * @this {Chip}\n     * @param {string} [binding] (if set, the selection for the specified binding has changed)\n     */\n    updateColorPalette(binding)\n    {\n        let elementPalette = this.bindings[Chip.BINDING.COLOR_PALETTE];\n        let elementSelection = this.bindings[Chip.BINDING.COLOR_SELECTION];\n\n        let fPaletteChange = (binding === Chip.BINDING.COLOR_PALETTE);\n        if (elementPalette && !elementPalette.options.length) {\n            this.addBindingOptions(elementPalette, this.config['colors'], true);\n            fPaletteChange = true;\n        }\n\n        if (elementPalette && elementSelection && (!elementSelection.options.length || fPaletteChange)) {\n            let sPalette = elementPalette.options[elementPalette.selectedIndex].value;\n            this.colorPalette = this.config['colors'][sPalette];\n            for (let color in this.colorPalette) {\n                let sColorOverride = this.config[color.toLowerCase()];\n                if (sColorOverride) {\n                    if (sColorOverride[0] != '#') sColorOverride = '#' + sColorOverride;\n                    this.println(\"overriding color '\" + color + \"' with \" + sColorOverride + \" (formerly \" + this.colorPalette[color] + \")\");\n                    this.colorPalette[color] = sColorOverride;\n                }\n            }\n            this.addBindingOptions(elementSelection, this.colorPalette, true);\n        }\n\n        if (elementPalette && elementSelection && elementSelection.options.length) {\n            this.colorSelected = elementSelection.options[elementSelection.selectedIndex].value;\n            this.updateColorSwatches();\n        }\n    }\n\n    /**\n     * updateColorSelection(color)\n     *\n     * @this {Chip}\n     * @param {string} color\n     */\n    updateColorSelection(color)\n    {\n        let element = this.bindings[Chip.BINDING.COLOR_SELECTION];\n        if (element) {\n            let i;\n            for (i = 0; i < element.options.length; i++) {\n                if (element.options[i].value == color) {\n                    this.colorSelected = color;\n                    if (element.selectedIndex != i) {\n                        element.selectedIndex = i;\n                    }\n                    break;\n                }\n            }\n            if (i == element.options.length) element.selectedIndex = 0;\n        }\n    }\n\n    /**\n     * updateColorSwatches(binding)\n     *\n     * @this {Chip}\n     * @param {string} [binding] (set if a specific color swatch was just clicked)\n     */\n    updateColorSwatches(binding)\n    {\n        let i = 1, elementSwatch;\n        /*\n         * Some machines use a single swatch called COLOR_SWATCH_SELECTED; update as appropriate.\n         */\n        if (!binding) {\n            if (this.colorSelected) {\n                elementSwatch = this.bindings[Chip.BINDING.COLOR_SWATCH_SELECTED];\n                if (elementSwatch) {\n                    elementSwatch.style.backgroundColor = this.colorSelected;\n                }\n            }\n        }\n        /*\n         * Other machines use a series of swatches named COLOR_SWATCH + \"1\", COLOR_SWATCH + \"2\", etc;\n         * for each color in colorPalette, update the next available swatch.\n         */\n        if (this.colorPalette) {\n            // this.println(\"updateColorSwatches(\" + this.colorSelected + \")\");\n            for (let idColor in this.colorPalette) {\n                let color = this.colorPalette[idColor];\n                if (this.colors) this.colors[i-1] = color;\n                let idSwatch = Chip.BINDING.COLOR_SWATCH + i++;\n                elementSwatch = this.bindings[idSwatch];\n                if (!elementSwatch) break;\n                elementSwatch.style.display = \"inline-block\";\n                if (idSwatch == binding) {\n                    this.updateColorSelection(color);\n                }\n                if (binding && binding != idSwatch || color != this.colorSelected) {\n                    color = this.leds.getRGBAColor(color, 1.0, 0.50);\n                }\n                elementSwatch.style.backgroundColor = color;\n                // this.println(\"swatch '\" + idSwatch + \"' updated to color '\" + color + \"'\");\n            }\n        }\n        /*\n         * Finally, for any remaining swatches in the series (ie, because the current palette doesn't need\n         * them all), hide them.\n         */\n        while (true) {\n            let idSwatch = Chip.BINDING.COLOR_SWATCH + i++;\n            let elementSwatch = this.bindings[idSwatch];\n            if (!elementSwatch) break;\n            elementSwatch.style.display = \"none\";\n        }\n    }\n\n    /**\n     * updatePattern()\n     *\n     * @this {Chip}\n     */\n    updatePattern()\n    {\n        let element = this.bindings[Chip.BINDING.PATTERN_SELECTION];\n        if (element && element.options.length) {\n            let sPattern = element.options[element.selectedIndex].value;\n            if (!sPattern) {\n                this.onReset();\n            } else {\n                this.loadPattern(sPattern);\n            }\n        }\n    }\n\n    /**\n     * updateStatus(fTransition)\n     *\n     * Update the LEDs as needed.\n     *\n     * Called by Time's updateStatus() function whenever 1) its YIELDS_PER_UPDATE threshold is reached\n     * (default is twice per second), 2) a step() operation has just finished (ie, the device is being\n     * single-stepped), and 3) a start() or stop() transition has occurred.\n     *\n     * Of those, all we currently care about are step() and stop() notifications, because we want to make sure\n     * the LED display is in sync with the last LED buffer update.  In both of those cases, time has stopped.\n     * If time has NOT stopped, then the LED's normal animator function (ledAnimate()) takes care of updating\n     * the LED display.\n     *\n     * @this {Chip}\n     * @param {boolean} [fTransition]\n     */\n    updateStatus(fTransition)\n    {\n        if (!this.time.isRunning()) {\n            this.leds.drawBuffer();\n        }\n    }\n}\n\nChip.BINDING = {\n    COLOR_PALETTE:          \"colorPalette\",\n    COLOR_SELECTION:        \"colorSelection\",\n    COLOR_SWATCH:           \"colorSwatch\",\n    COLOR_SWATCH_SELECTED:  \"colorSwatchSelected\",\n    COUNT_INIT:             \"countInit\",\n    COUNT_ON:               \"countOn\",\n    COUNT_OFF:              \"countOff\",\n    COUNT_CYCLE:            \"countCycle\",\n    IMAGE_SELECTION:        \"backgroundImage\",\n    PATTERN_SELECTION:      \"patterns\",\n    SYMBOL_INPUT:           \"symbolInput\",\n    SYMBOL_PREVIEW:         \"symbolPreview\",\n    SAVE:                   \"save\",\n    SAVE_TO_URL:            \"saveToURL\"\n};\n\nChip.COUNTS = [null, Chip.BINDING.COUNT_ON, Chip.BINDING.COUNT_OFF, Chip.BINDING.COUNT_CYCLE];\n\nChip.COMMANDS = [\n    \"s\\tset string\"\n];\n\nChip.MESSAGE_CMD = {\n    HALT:       1,\n    LOAD:       2,\n    SHIFT:      3,\n    SLEEP:      4,\n    CENTER:     5,\n    OFF:        6,\n    ON:         7,\n    RELOAD:     8\n};\n\nChip.MESSAGE_CODE = {\n    'b':        Chip.MESSAGE_CMD.OFF,\n    'c':        Chip.MESSAGE_CMD.CENTER,\n    'h':        Chip.MESSAGE_CMD.HALT,\n    'o':        Chip.MESSAGE_CMD.ON,\n    'r':        Chip.MESSAGE_CMD.RELOAD,\n    's':        Chip.MESSAGE_CMD.SHIFT\n};\n\nChip.RULES = {\n    ANIM4:      \"A4\",       // animation using 4-bit counters for state/color cycling\n    LEFT1:      \"L1\",       // shift left one cell\n    LIFE1:      \"B3/S23\"    // Game of Life v1.0 (births require 3 neighbors, survivors require 2 or 3)\n};\n\n/*\n * Symbols can be formed with the following 16x16 grid patterns.\n */\nChip.SYMBOLS = {\n    \"0\":\"$2b2o$bo2bo$o4bo$o4bo$o4bo$o4bo$o4bo$o4bo$o4bo$bo2bo$2b2o\",\n    \"1\":\"$3bo$2b2o$4o$3bo$3bo$3bo$3bo$3bo$3bo$3bo$3bo\",\n    \"2\":\"$2b3o$bo3bo$o5bo$o5bo$6bo$5bo$3b2o$2bo$bo$o$7o\",\n    \"3\":\"$b4o$o4bo$o4bo$5bo$4bo$2b2o$4bo$5bo$o4bo$o4bo$b4o\",\n    \"4\":\"$5bo$4b2o$3bobo$2bo2bo$bo3bo$o4bo$o4bo$8o$5bo$5bo$5bo\",\n    \"5\":\"$6o$o$o$o$4o$4bo$5bo$5bo$5bo$o3bo$b3o\",\n    \"6\":\"$2b4o$bo4bo$o$o$o$ob4o$2o4bo$o5bo$o5bo$bo4bo$2b4o\",\n    \"7\":\"$8o$7bo$6bo$5bo$4bo$4bo$3bo$3bo$2bo$2bo$2bo\",\n    \"8\":\"$b4o$o4bo$o4bo$o4bo$bo2bo$2b2o$bo2bo$o4bo$o4bo$o4bo$b4o\",\n    \"9\":\"$b4o$o4bo$o5bo$o5bo$o4b2o$b4obo$6bo$6bo$6bo$o4bo$b4o\",\n    \"A\":\"$3b2o$2bo2bo$bo4bo$bo4bo$o6bo$o6bo$o6bo$8o$o6bo$o6bo$o6bo\",\n    \"B\":\"$6o$o5bo$o5bo$o5bo$o4bo$7o$o6bo$o6bo$o6bo$o6bo$7o\",\n    \"C\":\"$2b4o$bo4bo$o6bo$o$o$o$o$o$o6bo$bo4bo$2b4o\",\n    \"D\":\"$6o$o5bo$o6bo$o6bo$o6bo$o6bo$o6bo$o6bo$o6bo$o5bo$6o\",\n    \"E\":\"$7o$o$o$o$o$6o$o$o$o$o$7o\",\n    \"F\":\"$7o$o$o$o$o$6o$o$o$o$o$o\",\n    \"G\":\"$2b4o$bo4bo$o$o$o$o3b4o$o6bo$o6bo$o6bo$bo4bo$2b4o\",\n    \"H\":\"$o6bo$o6bo$o6bo$o6bo$o6bo$8o$o6bo$o6bo$o6bo$o6bo$o6bo\",\n    \"I\":\"$o$o$o$o$o$o$o$o$o$o$o\",\n    \"J\":\"$5bo$5bo$5bo$5bo$5bo$5bo$5bo$o4bo$o4bo$o4bo$b4o\",\n    \"K\":\"$o6bo$o5bo$o4bo$o3bo$o2bo$ob2o$2o2bo$o4bo$o5bo$o6bo$o7bo\",\n    \"L\":\"$o$o$o$o$o$o$o$o$o$o$7o\",\n    \"M\":\"$o8bo$2o6b2o$obo4bobo$obo4bobo$o2bo2bo2bo$o2bo2bo2bo$o3b2o3bo$o8bo$o8bo$o8bo$o8bo\",\n    \"N\":\"$2o5bo$obo4bo$obo4bo$o2bo3bo$o2bo3bo$o3bo2bo$o3bo2bo$o4bobo$o4bobo$o4bobo$o5b2o\",\n    \"O\":\"$3b4o$2bo4bo$bo6bo$o8bo$o8bo$o8bo$o8bo$o8bo$bo6bo$2bo4bo$3b4o\",\n    \"P\":\"$6o$o5bo$o6bo$o6bo$o6bo$o5bo$6o$o$o$o$o\",\n    \"Q\":\"$3b4o$2bo4bo$bo6bo$o8bo$o8bo$o8bo$o8bo$o8bo$bo4bobo$2bo4bo$3b4obo$9bo\",\n    \"R\":\"$6o$o5bo$o5bo$o5bo$o5bo$6o$o2bo$o3bo$o4bo$o5bo$o6bo\",\n    \"S\":\"$2b4o$bo4bo$o6bo$o$bo$2b4o$6bo$7bo$o6bo$bo4bo$2b4o\",\n    \"T\":\"$9o$4bo$4bo$4bo$4bo$4bo$4bo$4bo$4bo$4bo$4bo\",\n    \"U\":\"$o6bo$o6bo$o6bo$o6bo$o6bo$o6bo$o6bo$o6bo$o6bo$bo4bo$2b4o\",\n    \"V\":\"$o8bo$o8bo$bo6bo$bo6bo$bo6bo$2bo4bo$2bo4bo$2bo4bo$3bo2bo$3bo2bo$4b2o\",\n    \"W\":\"$o4b2o4bo$o4b2o4bo$o4b2o4bo$o3bo2bo3bo$bo2bo2bo2bo$bo2bo2bo2bo$bo2bo2bo2bo$bo2bo2bo2bo$2b2o4b2o$2b2o4b2o$2b2o4b2o\",\n    \"X\":\"$o8bo$bo6bo$2bo4bo$3bo2bo$4b2o$4b2o$4b2o$3bo2bo$2bo4bo$bo6bo$o8bo\",\n    \"Y\":\"$o5bo$o5bo$bo3bo$bo3bo$2bobo$2bobo$3bo$3bo$3bo$3bo$3bo\",\n    \"Z\":\"$9o$8bo$7bo$6bo$5bo$4bo$3bo$2bo$bo$o$9o\",\n    \"a\":\"$$$$b4o$o4bo$5bo$b5o$o4bo$o4bo$o3b2o$b3obo\",\n    \"b\":\"$o$o$o$ob3o$2o3bo$o5bo$o5bo$o5bo$o5bo$2o3bo$ob3o\",\n    \"c\":\"$$$$2b4o$bo4bo$o$o$o$o$bo4bo$2b4o\",\n    \"d\":\"$6bo$6bo$6bo$2b3obo$bo3b2o$o5bo$o5bo$o5bo$o5bo$bo3b2o$2b3obo\",\n    \"e\":\"$$$$2b3o$bo3bo$o5bo$7o$o$o$bo4bo$2b4o\",\n    \"f\":\"$2b2o$bo2bo$bo$bo$4o$bo$bo$bo$bo$bo$bo\",\n    \"g\":\"$$$$2b2obo$bo2b2o$o4bo$o4bo$o4bo$bo2b2o$2b2obo$5bo$5bo$o4bo$b4o\",\n    \"h\":\"$o$o$o$ob3o$2o3bo$o4bo$o4bo$o4bo$o4bo$o4bo$o4bo\",\n    \"i\":\"$$o$$o$o$o$o$o$o$o$o\",\n    \"j\":\"$$3bo$$3bo$3bo$3bo$3bo$3bo$3bo$3bo$3bo$3bo$o2bo$b2o\",\n    \"k\":\"$o$o$o$o4bo$o3bo$o2bo$obo$2obo$o3bo$o4bo$o5bo\",\n    \"l\":\"$o$o$o$o$o$o$o$o$o$o$o\",\n    \"m\":\"$$$$ob2o3b2o$2o2bobo2bo$o4bo4bo$o4bo4bo$o4bo4bo$o4bo4bo$o4bo4bo$o4bo4bo\",\n    \"n\":\"$$$$ob3o$2o3bo$o4bo$o4bo$o4bo$o4bo$o4bo$o4bo\",\n    \"o\":\"$$$$2b4o$bo4bo$o6bo$o6bo$o6bo$o6bo$bo4bo$2b4o\",\n    \"p\":\"$$$$ob3o$2o3bo$o5bo$o5bo$o5bo$o5bo$2o3bo$ob3o$o$o$o\",\n    \"q\":\"$$$$2b3obo$bo3b2o$o5bo$o5bo$o5bo$o5bo$bo3b2o$2b3obo$6bo$6bo$6bo\",\n    \"r\":\"$$$$ob2o$2o2bo$o$o$o$o$o$o\",\n    \"s\":\"$$$$b4o$o4bo$o$b4o$5bo$5bo$o4bo$b4o\",\n    \"t\":\"$$bo$bo$4o$bo$bo$bo$bo$bo$bo2bo$2b2o\",\n    \"u\":\"$$$$o4bo$o4bo$o4bo$o4bo$o4bo$o4bo$o3b2o$b3obo\",\n    \"v\":\"$$$$o5bo$o5bo$bo3bo$bo3bo$bo3bo$2bobo$2bobo$3bo\",\n    \"w\":\"$$$$o3b2o3bo$o3b2o3bo$o3b2o3bo$o3b2o3bo$bobo2bobo$bobo2bobo$bobo2bobo$2bo4bo\",\n    \"x\":\"$$$$$o5bo$bo3bo$2bobo$3bo$2bobo$bo3bo$o5bo\",\n    \"y\":\"$$$$o5bo$o5bo$bo3bo$bo3bo$2bobo$2bobo$3bo$3bo$3bo$2bo$2o\",\n    \"z\":\"$$$$6o$5bo$4bo$3bo$2bo$bo$o$6o\",\n    \"!\":\"$o$o$o$o$o$o$o$o$$o$o\",\n    \"\\\"\":\"$obo$obo$obo$obo\",\n    \"#\":\"$2bo2bo$2bo2bo$2bo2bo$8o$2bo2bo$2bo2bo$2bo2bo$8o$2bo2bo$2bo2bo$2bo2bo\",\n    \"$\":\"3bo$2b4o$bobo2bo$o2bo$o2bo$bobo$2b3o$3bobo$3bo2bo$3bo2bo$o2bobo$b4o$3bo\",\n    \"%\":\"$b2o7bo$o2bo5bo$o2bo4bo$o2bo3bo$o2bo2bo$b2o2bo2b2o$4bo2bo2bo$3bo3bo2bo$2bo4bo2bo$bo5bo2bo$o7b2o\",\n    \"&\":\"$b3o$o3bo$o3bo$o3bo$bobo$2bo$bobo$o3bobo$o4bo$o3bobo$b3o3bo\",\n    \"'\":\"$o$o$o$o\",\n    \"(\":\"$3bo$2bo$bo$bo$o$o$o$o$o$o$bo$bo$2bo$3bo\",\n    \")\":\"$o$bo$2bo$2bo$3bo$3bo$3bo$3bo$3bo$3bo$2bo$2bo$bo$o\",\n    \"*\":\"2bo$obobo$b3o$b3o$o3bo\",\n    \"+\":\"$$$$3bo$3bo$3bo$7o$3bo$3bo$3bo\",\n    \",\":\"$$$$$$$$$$2o$2o$bo$o\",\n    \".\":\"$$$$$$$$$$2o$2o\",\n    \"/\":\"$3bo$3bo$2bo$2bo$2bo$bo$bo$bo$o$o$o\",\n    \":\":\"$$$$2o$2o$$$$$2o$2o\",\n    \";\":\"$$$$2o$2o$$$$$2o$2o$bo$o\",\n    \"<\":\"$$$$6b2o$4b2o$2b2o$2o$2o$2b2o$4b2o$6b2o\",\n    \">\":\"$$$$2o$2b2o$4b2o$6b2o$6b2o$4b2o$2b2o$2o\",\n    \"=\":\"$$$$$$8o$$$8o\",\n    \"?\":\"$b4o$o4bo$o4bo$5bo$4bo$3bo$2bo$2bo$$2bo$2bo\",\n    \"@\":\"$3b4o$2bo4bo$bo6bo$o3b2o3bo$o2bo2bo2bo$o2bo2bo2bo$o3b2o3bo$o5b3o$bo$2bo5bo$3b5o\",\n    \"[\":\"$3o$o$o$o$o$o$o$o$o$o$o$o$o$3o\",\n    \"]\":\"$3o$2bo$2bo$2bo$2bo$2bo$2bo$2bo$2bo$2bo$2bo$2bo$2bo$3o\",\n    \"\\\\\":\"$o$o$bo$bo$bo$2bo$2bo$2bo$3bo$3bo$3bo\",\n    \"^\":\"$2b2o$2b2o$bo2bo$bo2bo$o4bo$o4bo\",\n    \"_\":\"$$$$$$$$$$$$$8o\",\n    \"`\":\"o$bo$2bo\",\n    \"{\":\"$2b2o$bo$bo$bo$bo$bo$bo$o$bo$bo$bo$bo$bo$2b2o\",\n    \"}\":\"$2o$2bo$2bo$2bo$2bo$2bo$2bo$3bo$2bo$2bo$2bo$2bo$2bo$2o\",\n    \"|\":\"o$o$o$o$o$o$o$o$o$o$o$o$o$o$o\",\n    \"~\":\"$$$$$$b3o3bo$o3b3o\"\n};\n\nChip.VERSION    = 1.11;\n\nMACHINE = \"LEDs\";\n\n/**\n * @copyright http://pcjs.org/modules/devices/machine.js (C) Jeff Parsons 2012-2017\n */\n\n/**\n * @class {Machine}\n * @unrestricted\n */\nclass Machine extends Device {\n    /**\n     * Machine(idMachine, sConfig)\n     *\n     * Sample config:\n     *\n     *    {\n     *      \"ti57\": {\n     *        \"class\": \"Machine\",\n     *        \"type\": \"TI57\",\n     *        \"name\": \"TI-57 Programmable Calculator Simulation\",\n     *        \"version\": 1.10,\n     *        \"autoPower\": true,\n     *        \"bindings\": {\n     *          \"clear\": \"clearTI57\",\n     *          \"print\": \"printTI57\"\n     *        }\n     *      },\n     *      \"chip\": {\n     *        \"class\": \"Chip\",\n     *        \"type\": \"TMS-1500\",\n     *        \"input\": \"buttons\",\n     *        \"output\": \"display\"\n     *      },\n     *      \"clock\": {\n     *        \"class\": \"Time\",\n     *        \"cyclesPerSecond\": 650000\n     *        \"bindings\": {\n     *          \"run\": \"runTI57\",\n     *          \"speed\": \"speedTI57\",\n     *          \"step\": \"stepTI57\"\n     *        },\n     *        \"overrides\": [\"cyclesPerSecond\"]\n     *      },\n     *      \"display\": {\n     *        \"class\": \"LED\",\n     *        \"type\": 3,\n     *        \"cols\": 12,\n     *        \"rows\": 1,\n     *        \"color\": \"red\",\n     *        \"bindings\": {\n     *          \"container\": \"displayTI57\"\n     *        },\n     *        \"overrides\": [\"color\",\"backgroundColor\"]\n     *      },\n     *      \"buttons\": {\n     *        \"class\": \"Input\",\n     *        \"map\": [\n     *          [\"2nd\",  \"inv\",  \"lnx\",  \"\\\\b\",  \"clr\"],\n     *          [\"lrn\",  \"xchg\", \"sq\",   \"sqrt\", \"rcp\"],\n     *          [\"sst\",  \"sto\",  \"rcl\",  \"sum\",  \"exp\"],\n     *          [\"bst\",  \"ee\",   \"(\",    \")\",    \"/\"],\n     *          [\"gto\",  \"7\",    \"8\",    \"9\",    \"*\"],\n     *          [\"sbr\",  \"4\",    \"5\",    \"6\",    \"-\"],\n     *          [\"rst\",  \"1\",    \"2\",    \"3\",    \"+\"],\n     *          [\"r/s\",  \"0\",    \".\",    \"+/-\",  \"=|\\\\r\"]\n     *        ],\n     *        \"location\": [139, 325, 368, 478, 0.34, 0.5, 640, 853, 418, 180, 75, 36],\n     *        \"bindings\": {\n     *          \"surface\": \"imageTI57\",\n     *          \"power\": \"powerTI57\",\n     *          \"reset\": \"resetTI57\"\n     *        }\n     *      },\n     *      \"rom\": {\n     *        \"class\": \"ROM\",\n     *        \"wordSize\": 13,\n     *        \"valueSize\": 16,\n     *        \"valueTotal\": 2048,\n     *        \"littleEndian\": true,\n     *        \"file\": \"ti57le.bin\",\n     *        \"reference\": \"\",\n     *        \"values\": [\n     *        ]\n     *      }\n     *    }\n     *\n     * @this {Machine}\n     * @param {string} idMachine (of both the machine AND the <div> to contain it)\n     * @param {string} sConfig (JSON configuration for entire machine, including any static resources)\n     */\n    constructor(idMachine, sConfig)\n    {\n        super(idMachine, idMachine, Machine.VERSION);\n        try {\n            this.config = JSON.parse(sConfig);\n            let config = this.config[idMachine];\n            this.checkVersion(config);\n            this.checkOverrides(config);\n            this.addBindings(config['bindings']);\n            this.fAutoPower = (config['autoPower'] !== false);\n        } catch(err) {\n            let sError = err.message;\n            let match = sError.match(/position ([0-9]+)/);\n            if (match) {\n                sError += \" ('\" + sConfig.substr(+match[1], 40).replace(/\\s+/g, ' ') + \"...')\";\n            }\n            this.println(\"machine '\" + idMachine + \"' initialization error: \" + sError);\n        }\n        /*\n         * Device initialization is now deferred until after the page is fully loaded, for the benefit\n         * of devices (eg, Input) that may be dependent on page resources.\n         *\n         * Strangely, for these page events, I must use the window object rather than the document object.\n         */\n        let machine = this, chip = null;\n        window.addEventListener('load', function onLoad(event) {\n            chip = machine.initDevices();\n            if (chip) {\n                if (chip.onRestore) chip.onRestore();\n                if (chip.onPower && machine.fAutoPower) chip.onPower(true);\n            }\n        });\n        let sEvent = this.isUserAgent(\"iOS\")? 'pagehide' : (this.isUserAgent(\"Opera\")? 'unload' : undefined);\n        window.addEventListener(sEvent || 'beforeunload', function onUnload(event) {\n            if (chip) {\n                if (chip.onSave) chip.onSave();\n                if (chip.onPower) chip.onPower(false);\n            }\n        });\n    }\n\n    /**\n     * initDevices()\n     *\n     * Initializes devices in the proper order.  For example, any Time devices should be initialized first,\n     * to ensure that their timer services are available to other devices.\n     *\n     * @this {Machine}\n     * @returns {Chip|undefined}\n     */\n    initDevices()\n    {\n        let idDevice, sClass, device, chip;\n        for (let iClass = 0; iClass < Machine.CLASSORDER.length; iClass++) {\n            for (idDevice in this.config) {\n                try {\n                    let config = this.config[idDevice], sStatus = \"\";\n                    sClass = config['class'];\n                    if (sClass != Machine.CLASSORDER[iClass]) continue;\n                    switch (sClass) {\n                    case Machine.CLASS.CHIP:\n                        device = new Chip(this.idMachine, idDevice, config);\n                        chip = device;\n                        break;\n                    case Machine.CLASS.INPUT:\n                        device = new Input(this.idMachine, idDevice, config);\n                        break;\n                    case Machine.CLASS.LED:\n                        device = new LED(this.idMachine, idDevice, config);\n                        break;\n                    case Machine.CLASS.ROM:\n                        device = new ROM(this.idMachine, idDevice, config);\n                        if (device.config['revision']) sStatus = \"revision \" + device.config['revision'];\n                        break;\n                    case Machine.CLASS.TIME:\n                        device = new Time(this.idMachine, idDevice, config);\n                        break;\n                    case Machine.CLASS.MACHINE:\n                        this.printf(\"PCjs %s v%3.2f\\n\", config['name'], Machine.VERSION);\n                        this.println(Machine.COPYRIGHT);\n                        this.println(Machine.LICENSE);\n                        continue;\n                    default:\n                        this.println(\"unrecognized device class: \" + sClass);\n                        continue;\n                    }\n                    this.println(sClass + \" device initialized\" + (sStatus? \" (\" + sStatus + \")\" : \"\"));\n                }\n                catch(err) {\n                    this.println(\"error initializing \" + sClass + \" device '\" + idDevice + \"':\\n\" + err.message);\n                    this.removeDevice(idDevice);\n                }\n            }\n        }\n        return chip;\n    }\n}\n\nMachine.CLASS = {\n    CHIP:       \"Chip\",\n    INPUT:      \"Input\",\n    LED:        \"LED\",\n    MACHINE:    \"Machine\",\n    ROM:        \"ROM\",\n    TIME:       \"Time\"\n};\n\nMachine.CLASSORDER = [\n    Machine.CLASS.MACHINE,\n    Machine.CLASS.TIME,\n    Machine.CLASS.LED,\n    Machine.CLASS.INPUT,\n    Machine.CLASS.ROM,\n    Machine.CLASS.CHIP\n];\n\nMachine.COPYRIGHT = \"Copyright © 2012-2017 Jeff Parsons <Jeff@pcjs.org>\";\nMachine.LICENSE = \"License: GPL version 3 or later <http://gnu.org/licenses/gpl.html>\";\n\nMachine.VERSION = 1.11;\n\nwindow[MACHINE] = Machine;\n"]}