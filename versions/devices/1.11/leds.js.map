{"version":3,"file":"leds.js","lineCount":95,"mappings":"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","sources":["tmp/devices/1.11/leds.js"," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:es6/util/arrayfromiterator] "," [synthetic:util/polyfill] "," [synthetic:es6/number/parseint] "," [synthetic:es6/math/trunc] "," [synthetic:es6/array/fill] "," [synthetic:es6/math/log2] "," [synthetic:es6/string/startswith] "," [synthetic:util/checkstringargs] "," [synthetic:es6/util/arrayfromiterable] "],"names":["$jscomp.objectCreate","$jscomp.setPrototypeOf","$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.iteratorPrototype","$jscomp.polyfill","MACHINE","constructor","Device","idMachine","idDevice","version","config","bindings","Device.Machines","addDevice","push","checkVersion","checkOverrides","addBindings","addBinding","binding","element","device","Device.BINDING.CLEAR","onclick","element.onclick","findBinding","value","Device.BINDING.PRINT","addEventListener","onKeyPress","event","window","keyCode","which","sText","setSelectionRange","length","stopPropagation","sType","afn","Device.HANDLER.COMMAND","Device.Handlers","preventDefault","i","blur","focus","sCommand","slice","lastIndexOf","fDirectBindings","Array","isArray","id","document","getElementById","println","addBindingOptions","options","fReset","sDefault","prop","option","createElement","text","appendChild","selectedIndex","addHandler","fn","parms","Device.getURLParms","indexOf","s","match","Number","parseInt","sVersion","devices","findDevice","machine","sprintf","sError","class","type","Device.Alerts.Version","Device.Alerts.list.indexOf","alert","Device.Alerts.list.push","name","undefined","findDeviceByClass","idClass","getBindingID","getBindingText","ROM.BINDING.CELLDESC","textContent","getBounded","n","min","max","getDefault","idConfig","defaultValue","hasLocalStorage","Device.LocalStorage.Available","f","localStorage","setItem","Device.LocalStorage.Test","getItem","removeItem","err","message","isUserAgent","userAgent","navigator","print","Device.Category","Device.Category.indexOf","Device.CATEGORY.BUFFER","Device.PrintBuffer","substr","scrollTop","scrollHeight","console","log","printf","format","args","$jscomp.arrayFromIterator","$jscomp.makeIterator","setBindingText","setCategory","category","cPrev","fFlush","sBuffer","buffer","aParts","split","iArg","iPart","arg","flags","minimum","precision","conversion","ach","Math","trunc","abs","pow","Device.HexUpperCase","Device.HexLowerCase","getURLParms","sParms","Device.URLParms","location","search","pl","exec","decodeURIComponent","replace","trim","CLEAR","PRINT","BUFFER","COMMAND","list","Version","Available","Test","Input","Input.VERSION","time","Machine.CLASS.TIME","onHover","onReset","onPower","onInput","fDrag","getDefaultBoolean","fScroll","fTouch","Input.BINDING.SURFACE","xInput","yInput","cxInput","cyInput","hGap","vGap","cxSurface","naturalWidth","cySurface","naturalHeight","xPower","yPower","cxPower","cyPower","map","nRows","nCols","fHexagonal","buttonDelay","getDefaultNumber","cxButton","cyButton","cxGap","cyGap","xStart","yStart","captureMouse","captureTouch","input","timerInputRelease","addTimer","onInputRelease","setPosition","timerKeyRelease","onKeyRelease","onKeyTimer","keyState","keysPressed","captureKeys","col","row","$jscomp.inherits","Input.BINDING.POWER","Input.BINDING.RESET","addClick","addHover","addInput","advanceKeyState","setTimer","onKeyDown","activeElement","ch","Input.KEYCODE","String","fromCharCode","charCode","onMouseDown","button","x","scrollX","y","scrollY","scrollTo","processEvent","Input.ACTION.PRESS","onMouseMove","Input.ACTION.MOVE","onMouseUp","Input.ACTION.RELEASE","onMouseOut","onTouchStart","onTouchMove","onTouchEnd","rowMap","charCodeAt","shift","action","fMultiTouch","fButton","targetTouches","pageX","pageY","yOffset","xOffset","elementNext","isNaN","offsetLeft","offsetTop","offsetParent","offsetWidth","offsetHeight","fInput","fPower","cxCol","cyCol","colInput","rowInput","yCol","fRunning","iTimer","aTimers","timer","nCyclesLeft","PRESS","MOVE","RELEASE","POWER","RESET","SURFACE","LED","LED.VERSION","container","LED.BINDING.CONTAINER","Error","canvasView","getContext","innerHTML","LED.TYPE.ROUND","LED.TYPE.DIGIT","widthCell","LED.SIZES","heightCell","width","height","colsView","cols","rowsView","rows","widthView","heightView","colorTransparent","getRGBAColor","colorOn","getRGBColor","colorOff","colorHighlight","colorBackground","fFixed","style","fHighlight","fPersistent","setAttribute","toString","backgroundColor","contextView","canvasGrid","widthGrid","heightGrid","contextGrid","nBufferCells","nBufferInc","bufferClone","nBufferSkip","fBufferModified","fTickled","iBufferRecent","led","addAnimator","ledAnimate","drawBuffer","clearBuffer","fDraw","initBuffer","clearGrid","fillStyle","fillRect","clearRect","fForced","drawGrid","state","color","LED.FLAGS.MODIFIED","xBias","clearGridCell","yBias","fTransparent","coords","LED.SHAPES","beginPath","arc","PI","globalCompositeOperation","fill","LED.FLAGS.PERIOD","drawString","segments","LED.SYMBOL_SEGMENTS","drawGridSegment","LED.SEGMENTS","seg","lineTo","moveTo","closePath","drawImage","getLEDCountsPacked","getLEDState","colorDefault","LED.COLORS","alpha","brightness","rgb","parseRGBValues","round","LED.STATE.OFF","base","setLEDColor","fModified","colorNew","setLEDCounts","counts","bits","c","setLEDState","LED.FLAGS.SET","ROUND","DIGIT","CONTAINER","OFF","SET","PERIOD","MODIFIED","SQUARE","ROM","ROM.VERSION","data","ROM.BINDING.ARRAY","rom","addrLines","log2","ceil","floor","ledArray","configLEDs","getDefaultString","clearArray","ledInput","configInput","sCellDesc","onROMHover","chip","sDesc","addr","disassemble","opCode","ARRAY","CELLDESC","Time","Time.VERSION","nCyclesMinimum","nCyclesMaximum","nCyclesPerSecond","nYieldsPerSecond","Time.YIELDS_PER_SECOND","nYieldsPerUpdate","Time.YIELDS_PER_UPDATE","fRequestAnimationFrame","nBaseMultiplier","nCurrentMultiplier","nTargetMultiplier","mhzBase","mhzCurrent","mhzTarget","nYields","msYield","aAnimators","aClockers","aUpdaters","fYield","fThrottling","idRunTimeout","nStepping","onRunTimeout","run","bind","onAnimationFrame","animate","requestAnimationFrame","webkitRequestAnimationFrame","setTimeout","onYield","getCycles","updateStatus","resetSpeed","nCyclesRun","nCyclesBurst","nCyclesRemain","setSpeedThrottle","setSpeed","callBack","Time.BINDING.RUN","stop","start","Time.BINDING.STEP","step","nRepeat","Time.BINDING.THROTTLE","onThrottleStart","onThrottleStop","onThrottleChange","msAuto","calcCycles","nMultiplier","nCyclesPerYield","doBurst","nCycles","fStep","iClocker","endBurst","nCyclesThisRun","ms","getSpeed","mhz","toFixed","hz","snapStart","msOutsideThisRun","msStartThisRun","Date","now","msStartRun","msEndRun","msDelta","getCyclesPerBurst","updateTimers","snapStop","msRemainsThisRun","msElapsed","TIME","elementInput","Time.BINDING.SPEED","getSpeedTarget","resetTimers","clearTimeout","onStepTimeout","fTransition","getSpeedCurrent","RUN","SPEED","STEP","THROTTLE","Chip","Chip.VERSION","fWrap","sRule","sPattern","sSymbols","fToggleColor","countBuffer","getCounts","leds","Machine.CLASS.LED","loadPattern","Machine.CLASS.INPUT","onLEDInput","colorSelected","ON","fAdvance","colors","updateColorSelection","updateColorSwatches","updateBackgroundImage","Chip.BINDING.IMAGE_SELECTION","clocker","sCommandPrev","onCommand","iSymbolNext","nColsRemaining","Chip.prototype","?.prototype","Chip.BINDING.COLOR_PALETTE","Chip.BINDING.COLOR_SELECTION","onchange","element.onchange","updateColorPalette","Chip.BINDING.PATTERN_SELECTION","buildPatternOptions","Chip.BINDING.SAVE","savePattern","elementSymbol","Chip.BINDING.SYMBOL_INPUT","Chip.BINDING.SAVE_TO_URL","href","onkeypress","element.onkeypress","elementPreview","Chip.BINDING.SYMBOL_PREVIEW","startsWith","Chip.BINDING.COLOR_SWATCH","patterns","lines","nCyclesTarget","nCyclesClocked","Chip.RULES.ANIM4","cAlive","doCycling","fSuccess","stateNew","iColor","Chip.RULES.LEFT1","doShifting","loadPatternString","Chip.SYMBOLS","stateLeft","Chip.RULES.LIFE1","doCounting","nIncPerRow","nIncPerGrid","iCell","iNO","iNW","iNE","iWE","iEA","iSO","iSW","iSE","nNeighbors","nAlive","getCount","count","init","Chip.BINDING.COUNT_INIT","range","Chip.BINDING.COUNT_ON","Chip.BINDING.COUNT_OFF","Chip.COUNTS.length","Chip.COUNTS","iCol","iRow","sLine","end","rule","fOverwrite","fColors","fCounts","aTokens","colMax","token","v","nAdvance","sResult","aCommands","Chip.COMMANDS.forEach","forEach","cmd","Chip_prototype$onPower","fOn","Chip_prototype$onReset","onRestore","loadLocalStorage","sValue","JSON","parse","stateChip","loadState","stateLEDs","onSave","saveState","saveLocalStorage","stringify","fMinWidth","flushRun","fEndRow","fDelta","nPrev","rgbPrev","countsPrev","statePrev","rgbLast","countsLast","colMin","rowMax","rowMin","sImage","elementPalette","elementSelection","fPaletteChange","colorPalette","sColorOverride","toLowerCase","elementSwatch","Chip.BINDING.COLOR_SWATCH_SELECTED","idColor","idSwatch","display","Chip_prototype$updateStatus","COLOR_PALETTE","COLOR_SELECTION","COLOR_SWATCH","COLOR_SWATCH_SELECTED","COUNT_INIT","COUNT_ON","COUNT_OFF","IMAGE_SELECTION","PATTERN_SELECTION","SYMBOL_INPUT","SYMBOL_PREVIEW","SAVE","SAVE_TO_URL","COUNT_CYCLE","Chip.COMMANDS","ANIM4","LEFT1","LIFE1","Machine","sConfig","Machine.VERSION","fAutoPower","onLoad","sClass","iClass","Machine.CLASSORDER.length","sStatus","Machine.CLASSORDER","Machine.CLASS.CHIP","Machine.CLASS.ROM","Machine.CLASS.MACHINE","Machine.COPYRIGHT","Machine.LICENSE","splice","sEvent","onUnload","CHIP","INPUT"],"sourcesContent":["\"use strict\";\n\n/**\n * @copyright http://pcjs.org/modules/devices/device.js (C) Jeff Parsons 2012-2017\n */\n\n/**\n * @define {boolean}\n */\nvar COMPILED = false;\n\n/**\n * @define {boolean}\n */\nvar DEBUG = false;  // (window.location.hostname == \"pcjs\" || window.location.hostname == \"jeffpar.local\");\n\n/**\n * @type {string}\n */\nvar MACHINE = \"Machine\";\n\n/** @typedef {{ class: (string|undefined), bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined) }} */\nvar Config;\n\n/**\n * @class {Device}\n * @unrestricted\n * @property {string} idMachine\n * @property {string} idDevice\n * @property {Config} config\n * @property {Object} bindings [added by addBindings()]\n */\nclass Device {\n    /**\n     * Device()\n     *\n     * Supported config properties:\n     *\n     *      \"bindings\": object containing name/value pairs, where name is the generic name\n     *      of a element, and value is the ID of the DOM element that should be mapped to it\n     *\n     * The properties in the \"bindings\" object are copied to our own bindings object in addBindings(),\n     * but only for DOM elements that actually exist, and it is the elements themselves (rather than\n     * their IDs) that we store.\n     *\n     * Also, URL parameters can be used to override config properties.  For example, the URL:\n     *\n     *      http://pcjs:8088/devices/ti57/machine/?cyclesPerSecond=100000\n     *\n     * will set the Time device's cyclesPerSecond config property to 100000.  In general, the values\n     * will be treated as strings, unless they contain all digits (number), or equal \"true\" or \"false\"\n     * (boolean).\n     *\n     * @this {Device}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {number} [version]\n     * @param {Config} [config]\n     */\n    constructor(idMachine, idDevice, version, config)\n    {\n        this.config = config || {};\n        this.idMachine = idMachine;\n        this.idDevice = idDevice;\n        this.version = version || 0;\n        this.bindings = {};\n        this.addDevice();\n        this.checkVersion(this.config);\n        this.checkOverrides(this.config);\n        this.addBindings(this.config['bindings']);\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Device}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let device = this;\n\n        switch (binding) {\n\n        case Device.BINDING.CLEAR:\n            element.onclick = function onClickClear() {\n                device.clear();\n            };\n            break;\n\n        case Device.BINDING.PRINT:\n            let elementTextArea = /** @type {HTMLTextAreaElement} */ (element);\n            /*\n             * This was added for Firefox (Safari will clear the <textarea> on a page reload, but Firefox does not).\n             */\n            elementTextArea.value = \"\";\n            /*\n             * An onKeyPress handler has been added to this element simply to stop event propagation, so that if the\n             * element has been explicitly given focus, any key presses won't be picked up by the Input device (which,\n             * as that device's constructor explains, is monitoring key presses for the entire document).\n             */\n            elementTextArea.addEventListener(\n                'keypress',\n                function onKeyPress(event) {\n                    event = event || window.event;\n                    let keyCode = event.which || event.keyCode;\n                    if (keyCode) {\n                        /*\n                         * Move the caret to the end of any text in the textarea.\n                         */\n                        let sText = elementTextArea.value;\n                        elementTextArea.setSelectionRange(sText.length, sText.length);\n\n                        /*\n                         * Don't let the Input device's document-based keypress handler see any key presses\n                         * that came to this element first.\n                         */\n                        event.stopPropagation();\n\n                        /*\n                         * On the ENTER key, look for any COMMAND handlers and invoke them until one of them\n                         * returns true.\n                         */\n                        if (keyCode == 13) {\n                            let afn = device.findHandlers(Device.HANDLER.COMMAND);\n                            if (afn) {\n                                /*\n                                 * At the time we call any command handlers, a linefeed will not yet have been\n                                 * appended to the text, so for consistency, we prevent the default behavior and\n                                 * add the linefeed ourselves.  Unfortunately, one side-effect is that we must\n                                 * go to some extra effort to ensure the cursor remains in view; hence the stupid\n                                 * blur() and focus() calls.\n                                 */\n                                event.preventDefault();\n                                sText = (elementTextArea.value += '\\n');\n                                elementTextArea.blur();\n                                elementTextArea.focus();\n\n                                let i = sText.lastIndexOf('\\n', sText.length - 2);\n                                let sCommand = sText.slice(i + 1, -1);\n                                for (let i = 0; i < afn.length; i++) {\n                                    if (afn[i](sCommand)) break;\n                                }\n                            }\n                        }\n                    }\n                }\n            );\n            break;\n        }\n    }\n\n    /**\n     * addBindings(bindings)\n     *\n     * Builds the set of ACTUAL bindings (this.bindings) from the set of DESIRED bindings (this.config['bindings']),\n     * using either a \"bindings\" object map OR an array of \"direct bindings\".\n     *\n     * @this {Device}\n     * @param {Object} bindings\n     */\n    addBindings(bindings)\n    {\n        let fDirectBindings = Array.isArray(bindings);\n        for (let binding in bindings) {\n            let id = bindings[binding];\n            if (fDirectBindings) binding = id;\n            let element = document.getElementById(id);\n            if (element) {\n                this.bindings[binding] = element;\n                this.addBinding(binding, element);\n            } else {\n                if (!fDirectBindings) this.println(\"unable to find device ID: \" + id);\n            }\n        }\n    }\n\n    /**\n     * addBindingOptions(element, options, fReset, sDefault)\n     *\n     * @this {Device}\n     * @param {Element|HTMLSelectElement} element\n     * @param {Object} options (eg, key/value pairs for a series of \"option\" elements)\n     * @param {boolean} [fReset]\n     * @param {string} [sDefault]\n     */\n    addBindingOptions(element, options, fReset, sDefault)\n    {\n        if (fReset) {\n            element.options.length = 0;\n        }\n        if (options) {\n            for (let prop in options) {\n                let option = document.createElement(\"option\");\n                option.text = prop;\n                option.value = (typeof options[prop] == \"string\"? options[prop] : prop);\n                element.appendChild(option);\n                if (option.value == sDefault) element.selectedIndex = element.options.length - 1;\n            }\n        }\n    }\n\n    /**\n     * addDevice()\n     *\n     * Adds this Device to the global set of Devices, so that findDevice(), findBinding(), etc, will work.\n     *\n     * @this {Device}\n     */\n    addDevice()\n    {\n        if (!Device.Machines[this.idMachine]) Device.Machines[this.idMachine] = [];\n        Device.Machines[this.idMachine].push(this);\n    }\n\n    /**\n     * addHandler(sType, fn)\n     *\n     * @this {Device}\n     * @param {string} sType\n     * @param {function(string)} fn\n     */\n    addHandler(sType, fn)\n    {\n        if (!Device.Handlers[this.idMachine]) Device.Handlers[this.idMachine] = {};\n        if (!Device.Handlers[this.idMachine][sType]) Device.Handlers[this.idMachine][sType] = [];\n        Device.Handlers[this.idMachine][sType].push(fn);\n    }\n\n    /**\n     * alert(s, type)\n     *\n     * @this {Device}\n     * @param {string} s\n     * @param {string} [type]\n     */\n    alert(s, type)\n    {\n        if (type && Device.Alerts.list.indexOf(type) < 0) {\n            alert(s);\n            Device.Alerts.list.push(type);\n        }\n        this.println(s);\n    }\n\n    /**\n     * assert(f, s)\n     *\n     * Verifies conditions that must be true (for DEBUG builds only).\n     *\n     * The Closure Compiler should automatically remove all references to assert() in non-DEBUG builds.\n     * TODO: Add a task to the build process that \"asserts\" there are no instances of \"assertion failure\" in RELEASE builds.\n     *\n     * @this {Device}\n     * @param {*} f is the expression asserted to be true\n     * @param {string} [s] is description of the assertion on failure\n     */\n    assert(f, s)\n    {\n        if (DEBUG) {\n            if (!f) {\n                throw new Error(s || \"assertion failure\");\n            }\n        }\n    }\n\n    /**\n     * checkOverrides(config)\n     *\n     * @this {Device}\n     * @param {Config} config\n     */\n    checkOverrides(config)\n    {\n        /*\n         * If this device's config contains an \"overrides\" array, then any of the properties listed in\n         * that array may be overridden with a URL parameter.  We don't impose any checks on the overriding\n         * value, so it is the responsibility of the component with overridable properties to validate them.\n         */\n        if (config['overrides']) {\n            let parms = Device.getURLParms();\n            for (let prop in parms) {\n                if (config['overrides'].indexOf(prop) >= 0) {\n                    let value;\n                    let s = parms[prop];\n                    /*\n                     * You might think we could simply call parseInt() and check isNaN(), but parseInt() has\n                     * some annoying quirks, like stopping at the first non-numeric character.  If the ENTIRE\n                     * string isn't a number, then we don't want to treat ANY part of it as a number.\n                     */\n                    if (s.match(/^[+-]?[0-9.]+$/)) {\n                        value = Number.parseInt(s, 10);\n                    } else if (s == \"true\") {\n                        value = true;\n                    } else if (s == \"false\") {\n                        value = false;\n                    } else {\n                        value = s;\n                        s = '\"' + s + '\"';\n                    }\n                    config[prop] = value;\n                    this.println(\"overriding \" + this.idDevice + \" property '\" + prop + \"' with \" + s);\n                }\n            }\n        }\n    }\n\n    /**\n     * checkVersion(config)\n     *\n     * Verify that device's version matches the machine's version, and also that the config version stored in\n     * the JSON (if any) matches the device's version.\n     *\n     * This is normally performed by the constructor, but the Machine device cannot be fully initialized in the\n     * constructor, so it calls this separately.\n     *\n     * @this {Device}\n     * @param {Config} config\n     */\n    checkVersion(config)\n    {\n        if (this.version) {\n            let sVersion = \"\", version;\n            let machine = this.findDevice(this.idMachine);\n            if (machine.version != this.version) {\n                sVersion = \"Machine\";\n                version = machine.version;\n            }\n            else if (config.version && config.version > this.version) {\n                sVersion = \"Config\";\n                version = config.version;\n            }\n            if (sVersion) {\n                let sError = this.sprintf(\"%s Device version (%3.2f) incompatible with %s version (%3.2f)\", config.class, this.version, sVersion, version);\n                this.alert(\"Error: \" + sError + '\\n\\n' + \"Clearing your browser's cache may resolve the issue.\", Device.Alerts.Version);\n            }\n        }\n    }\n\n    /**\n     * clear()\n     *\n     * @this {Device}\n     */\n    clear()\n    {\n        let element = this.findBinding(Device.BINDING.PRINT, true);\n        if (element) element.value = \"\";\n    }\n\n    /**\n     * findBinding(name, fAll)\n     *\n     * This will search the current device's bindings, and optionally all the device bindings within the\n     * machine.  If the binding is found in another device, that binding is recorded in this device as well.\n     *\n     * @this {Device}\n     * @param {string} name\n     * @param {boolean} [fAll]\n     * @returns {Element|null|undefined}\n     */\n    findBinding(name, fAll = false)\n    {\n        let element = this.bindings[name];\n        if (element === undefined && fAll) {\n            let devices = Device.Machines[this.idMachine];\n            for (let i in devices) {\n                element = devices[i].bindings[name];\n                if (element) break;\n            }\n            if (!element) element = null;\n            this.bindings[name] = element;\n        }\n        return element;\n    }\n\n    /**\n     * findDevice(idDevice)\n     *\n     * @this {Device}\n     * @param {string} idDevice\n     * @returns {Device|undefined}\n     */\n    findDevice(idDevice)\n    {\n        let device;\n        let devices = Device.Machines[this.idMachine];\n        if (devices) {\n            for (let i in devices) {\n                if (devices[i].idDevice == idDevice) {\n                    device = devices[i];\n                    break;\n                }\n            }\n        }\n        return device;\n    }\n\n    /**\n     * findDeviceByClass(idClass)\n     *\n     * @this {Device}\n     * @param {string} idClass\n     * @returns {Device|undefined}\n     */\n    findDeviceByClass(idClass)\n    {\n        let device;\n        let devices = Device.Machines[this.idMachine];\n        if (devices) {\n            for (let i in devices) {\n                if (devices[i].config['class'] == idClass) {\n                    device = devices[i];\n                    break;\n                }\n            }\n        }\n        return device;\n    }\n\n    /**\n     * findHandlers(sType)\n     *\n     * @this {Device}\n     * @param {string} sType\n     * @returns {Array.<function(string)>|undefined}\n     */\n    findHandlers(sType)\n    {\n        return Device.Handlers[this.idMachine] && Device.Handlers[this.idMachine][sType];\n    }\n\n    /**\n     * getBindingID(name)\n     * \n     * Since this.bindings contains the actual elements, not their original IDs, we must delve back into\n     * the original this.config['bindings'] to determine the original ID.\n     * \n     * @this {Device}\n     * @param {string} name \n     * @returns {string|undefined}\n     */\n    getBindingID(name)\n    {\n        return this.config['bindings'] && this.config['bindings'][name];\n    }\n    \n    /**\n     * getBindingText(name)\n     *\n     * @this {Device}\n     * @param {string} name\n     * @return {string|undefined}\n     */\n    getBindingText(name)\n    {\n        let sText;\n        let element = this.bindings[name];\n        if (element) sText = element.textContent;\n        return sText;\n    }\n\n    /**\n     * getBounded(n, min, max)\n     *\n     * Restricts n to the bounds defined by min and max.  A side-effect is ensuring that the return\n     * value is ALWAYS a number, even n is not.\n     *\n     * @this {Device}\n     * @param {number} n\n     * @param {number} min\n     * @param {number} max\n     * @returns {number} (updated n)\n     */\n    getBounded(n, min, max)\n    {\n\n        n = +n || 0;\n        if (n < min) n = min;\n        if (n > max) n = max;\n        return n;\n    }\n\n    /**\n     * getDefault(idConfig, defaultValue)\n     *\n     * @this {Device}\n     * @param {string} idConfig\n     * @param {*} defaultValue\n     * @returns {*}\n     */\n    getDefault(idConfig, defaultValue)\n    {\n        let value = this.config[idConfig];\n        if (value === undefined) {\n            value = defaultValue;\n        } else {\n            let type = typeof defaultValue;\n            if (typeof value != type) {\n\n                if (type == \"boolean\") {\n                    value = !!value;\n                } else if (typeof defaultValue == \"number\") {\n                    value = +value;\n                }\n            }\n        }\n        return value;\n    }\n\n    /**\n     * getDefaultBoolean(idConfig, defaultValue)\n     *\n     * @this {Device}\n     * @param {string} idConfig\n     * @param {boolean} defaultValue\n     * @returns {boolean}\n     */\n    getDefaultBoolean(idConfig, defaultValue)\n    {\n        return /** @type {boolean} */ (this.getDefault(idConfig, defaultValue));\n    }\n\n    /**\n     * getDefaultNumber(idConfig, defaultValue)\n     *\n     * @this {Device}\n     * @param {string} idConfig\n     * @param {number} defaultValue\n     * @returns {number}\n     */\n    getDefaultNumber(idConfig, defaultValue)\n    {\n        return /** @type {number} */ (this.getDefault(idConfig, defaultValue));\n    }\n\n    /**\n     * getDefaultString(idConfig, defaultValue)\n     *\n     * @this {Device}\n     * @param {string} idConfig\n     * @param {string} defaultValue\n     * @returns {string}\n     */\n    getDefaultString(idConfig, defaultValue)\n    {\n        return /** @type {string} */ (this.getDefault(idConfig, defaultValue));\n    }\n\n    /**\n     * hasLocalStorage\n     *\n     * If localStorage support exists, is enabled, and works, return true.\n     *\n     * @this {Device}\n     * @returns {boolean}\n     */\n    hasLocalStorage()\n    {\n        if (Device.LocalStorage.Available === undefined) {\n            let f = false;\n            if (window) {\n                try {\n                    window.localStorage.setItem(Device.LocalStorage.Test, Device.LocalStorage.Test);\n                    f = (window.localStorage.getItem(Device.LocalStorage.Test) == Device.LocalStorage.Test);\n                    window.localStorage.removeItem(Device.LocalStorage.Test);\n                } catch(err) {\n                    this.println(err.message);\n                    f = false;\n                }\n            }\n            Device.LocalStorage.Available = f;\n        }\n        return !!Device.LocalStorage.Available;\n    }\n\n    /**\n     * hex(n)\n     *\n     * This is a helper function intended for use in a debugging console, allowing you to display\n     * numbers as hex by evaluating the expression \"this.hex(n)\".  Technically, this should be a static\n     * method, since there's nothing instance-specific about it, but \"this.hex()\" is easier to type than\n     * \"Device.hex()\".\n     *\n     * @this {Device}\n     * @param {number} n\n     */\n    hex(n)\n    {\n        return this.sprintf(\"%x\", n);\n    }\n\n    /**\n     * isCategory(category)\n     *\n     * Use this function to enable/disable any code (eg, print() calls) based on 1) whether specific\n     * categories are required, and 2) whether the specified category is one of them.\n     *\n     * @this {Device}\n     * @param {string} category\n     */\n    isCategoryOn(category)\n    {\n        return (Device.Category && Device.Category.indexOf(category) >= 0);\n    }\n\n    /**\n     * isUserAgent(s)\n     *\n     * Check the browser's user-agent string for the given substring; \"iOS\" and \"MSIE\" are special values you can\n     * use that will match any iOS or MSIE browser, respectively (even IE11, in the case of \"MSIE\").\n     *\n     * 2013-11-06: In a questionable move, MSFT changed the user-agent reported by IE11 on Windows 8.1, eliminating\n     * the \"MSIE\" string (which MSDN calls a \"version token\"; see http://msdn.microsoft.com/library/ms537503.aspx);\n     * they say \"public websites should rely on feature detection, rather than browser detection, in order to design\n     * their sites for browsers that don't support the features used by the website.\" So, in IE11, we get a user-agent\n     * that tries to fool apps into thinking the browser is more like WebKit or Gecko:\n     *\n     *      Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\n     *\n     * @this {Device}\n     * @param {string} s is a substring to search for in the user-agent; as noted above, \"iOS\" and \"MSIE\" are special values\n     * @returns {boolean} is true if the string was found, false if not\n     */\n    isUserAgent(s)\n    {\n        if (window) {\n            let userAgent = window.navigator.userAgent;\n            return s == \"iOS\" && !!userAgent.match(/(iPod|iPhone|iPad)/) && !!userAgent.match(/AppleWebKit/) || s == \"MSIE\" && !!userAgent.match(/(MSIE|Trident)/) || (userAgent.indexOf(s) >= 0);\n        }\n        return false;\n    }\n\n    /**\n     * loadLocalStorage()\n     *\n     * @this {Device}\n     * @returns {Array|null}\n     */\n    loadLocalStorage()\n    {\n        let state = null;\n        if (this.hasLocalStorage()) {\n            let sValue;\n            if (window) {\n                try {\n                    sValue = window.localStorage.getItem(this.idMachine);\n                    if (sValue) state = /** @type {Array} */ (JSON.parse(sValue));\n                } catch (err) {\n                    this.println(err.message);\n                }\n            }\n        }\n        return state;\n    }\n\n    /**\n     * print(s)\n     *\n     * @this {Device}\n     * @param {string} s\n     */\n    print(s)\n    {\n        if (this.isCategoryOn(Device.CATEGORY.BUFFER)) {\n            Device.PrintBuffer += s;\n            return;\n        }\n        let element = this.findBinding(Device.BINDING.PRINT, true);\n        if (element) {\n            element.value += s;\n            /*\n             * Prevent the <textarea> from getting too large; otherwise, printing becomes slower and slower.\n             */\n            if (!DEBUG && element.value.length > 8192) {\n                element.value = element.value.substr(element.value.length - 4096);\n            }\n            element.scrollTop = element.scrollHeight;\n        }\n        if (DEBUG || !element) {\n            let i = s.lastIndexOf('\\n');\n            if (i >= 0) {\n                console.log(Device.PrintBuffer + s.substr(0, i));\n                Device.PrintBuffer = \"\";\n                s = s.substr(i + 1);\n            }\n            Device.PrintBuffer += s;\n        }\n    }\n\n    /**\n     * println(s)\n     *\n     * @this {Device}\n     * @param {string} s\n     */\n    println(s)\n    {\n        this.print(s + '\\n');\n    }\n\n    /**\n     * printf(format, ...args)\n     *\n     * @this {Device}\n     * @param {string} format\n     * @param {...} args\n     */\n    printf(format, ...args)\n    {\n        this.print(this.sprintf(format, ...args));\n    }\n\n    /**\n     * removeDevice(idDevice)\n     *\n     * @this {Device}\n     * @param {string} idDevice\n     * @returns {boolean} (true if successfully removed, false if not)\n     */\n    removeDevice(idDevice)\n    {\n        let device;\n        let devices = Device.Machines[this.idMachine];\n        if (devices) {\n            for (let i in devices) {\n                if (devices[i].idDevice == idDevice) {\n                    devices.splice(i, 1);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * saveLocalStorage(state)\n     *\n     * @this {Device}\n     * @param {Array} state\n     * @returns {boolean} true if successful, false if error\n     */\n    saveLocalStorage(state)\n    {\n        if (this.hasLocalStorage()) {\n            let sValue = JSON.stringify(state);\n            try {\n                window.localStorage.setItem(this.idMachine, sValue);\n                return true;\n            } catch(err) {\n                this.println(err.message);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * setBindingText(name, text)\n     *\n     * @this {Device}\n     * @param {string} name\n     * @param {string} text\n     */\n    setBindingText(name, text)\n    {\n        let element = this.bindings[name];\n        if (element) element.textContent = text;\n    }\n\n    /**\n     * setCategory(category)\n     *\n     * Use this function to set/clear categories.  Generally, these are thought of as print categories,\n     * allowing code to use isCategoryOn() to decide whether to print a certain category of messages, but\n     * it can be used to control any functionality related to a given category, not just printing.\n     *\n     * You usually want to use one of the predefined category strings in Device.CATEGORIES, but in reality,\n     * the category string can be anything you want.\n     *\n     * If you want to enable multiple categories, specify them all in a single string (eg, \"time|buffer\",\n     * or Device.CATEGORY.TIME + Device.CATEGORY.BUFFER).\n     *\n     * Device.CATEGORY.BUFFER is special, causing all print calls to be buffered; the print buffer will be\n     * dumped as soon as setCategory() clears Device.CATEGORY.BUFFER.\n     *\n     * @this {Device}\n     * @param {string} [category] (if undefined, clear previous category)\n     * @returns {string}\n     */\n    setCategory(category = \"\")\n    {\n        let cPrev = Device.Category;\n        let fFlush = (!category && this.isCategoryOn(Device.CATEGORY.BUFFER));\n        Device.Category = category;\n        if (fFlush) {\n            let sBuffer = Device.PrintBuffer;\n            Device.PrintBuffer = \"\";\n            this.print(sBuffer);\n        }\n        return cPrev;\n    }\n\n    /**\n     * sprintf(format, ...args)\n     *\n     * Copied from the CCjs project (https://github.com/jeffpar/ccjs/blob/master/lib/stdio.js) and extended.\n     *\n     * Far from complete, let alone sprintf-compatible, but it's adequate for the handful of sprintf-style format\n     * specifiers that I use.\n     *\n     * @this {Device}\n     * @param {string} format\n     * @param {...} args\n     * @returns {string}\n     */\n    sprintf(format, ...args)\n    {\n        let buffer = \"\";\n        let aParts = format.split(/%([-+ 0#]?)([0-9]*)(\\.?)([0-9]*)([hlL]?)([A-Za-z%])/);\n\n        let iArg = 0, iPart;\n        for (iPart = 0; iPart < aParts.length - 7; iPart += 7) {\n\n            buffer += aParts[iPart];\n\n            let arg = args[iArg++];\n            let flags = aParts[iPart+1];\n            let minimum = +aParts[iPart+2] || 0;\n            let precision = +aParts[iPart+4] || 0;\n            let conversion = aParts[iPart+6];\n            let ach = null, s;\n\n            switch(conversion) {\n            case 'd':\n                /*\n                 * We could use \"arg |= 0\", but there may be some value to supporting integers > 32 bits.\n                 */\n                arg = Math.trunc(arg);\n                /* falls through */\n\n            case 'f':\n                s = Math.trunc(arg) + \"\";\n                if (precision) {\n                    minimum -= (precision + 1);\n                }\n                if (s.length < minimum) {\n                    if (flags == '0') {\n                        if (arg < 0) minimum--;\n                        s = (\"0000000000\" + Math.abs(arg)).slice(-minimum);\n                        if (arg < 0) s = '-' + s;\n                    } else {\n                        s = (\"          \" + s).slice(-minimum);\n                    }\n                }\n                if (precision) {\n                    arg = Math.trunc((arg - Math.trunc(arg)) * Math.pow(10, precision));\n                    s += '.' + (\"0000000000\" + Math.abs(arg)).slice(-precision);\n                }\n                buffer += s;\n                break;\n\n            case 's':\n                while (arg.length < minimum) {\n                    if (flags == '-') {\n                        arg += ' ';\n                    } else {\n                        arg = ' ' + arg;\n                    }\n                }\n                buffer += arg;\n                break;\n\n            case 'X':\n                ach = Device.HexUpperCase;\n                /* falls through */\n\n            case 'x':\n                if (!ach) ach = Device.HexLowerCase;\n                s = \"\";\n                do {\n                    s = ach[arg & 0xf] + s;\n                    arg >>>= 4;\n                } while (--minimum > 0 || arg);\n                buffer += s;\n                break;\n\n            default:\n                /*\n                 * The supported ANSI C set of conversions: \"dioxXucsfeEgGpn%\"\n                 */\n                buffer += \"(unrecognized printf conversion %\" + conversion + \")\";\n                break;\n            }\n        }\n\n        buffer += aParts[iPart];\n        return buffer;\n    }\n\n    /**\n     * getURLParms(sParms)\n     *\n     * @param {string} [sParms] containing the parameter portion of a URL (ie, after the '?')\n     * @returns {Object} containing properties for each parameter found\n     */\n    static getURLParms(sParms)\n    {\n        let parms = Device.URLParms;\n        if (!parms) {\n            parms = {};\n            if (window) {\n                if (!sParms) {\n                    /*\n                     * Note that window.location.href returns the entire URL, whereas window.location.search\n                     * returns only the parameters, if any (starting with the '?', which we skip over with a substr() call).\n                     */\n                    sParms = window.location.search.substr(1);\n                }\n                let match;\n                let pl = /\\+/g; // RegExp for replacing addition symbol with a space\n                let search = /([^&=]+)=?([^&]*)/g;\n                let decode = function decodeParameter(s) {\n                    return decodeURIComponent(s.replace(pl, \" \")).trim();\n                };\n\n                while ((match = search.exec(sParms))) {\n                    parms[decode(match[1])] = decode(match[2]);\n                }\n            }\n            Device.URLParms = parms;\n        }\n        return parms;\n    }\n}\n\nDevice.BINDING = {\n    CLEAR:      \"clear\",\n    PRINT:      \"print\"\n};\n\n/*\n * List of standard categories.\n *\n * Device.CATEGORY.BUFFER is special, causing all print calls to be buffered; the print buffer will be\n * dumped as soon as setCategory() clears Device.CATEGORY.BUFFER.\n */\nDevice.CATEGORY = {\n    TIME:       \"time\",\n    BUFFER:     \"buffer\"\n};\n\nDevice.HANDLER = {\n    COMMAND:    \"command\"\n};\n\nDevice.Alerts = {\n    list:       [],\n    Version:    \"version\"\n};\n\nDevice.LocalStorage = {\n    Available:  undefined,\n    Test:       \"PCjs.localStorage\"\n};\n\n/**\n * Handlers is a global object whose properties are machine IDs, each of which contains zero or more\n * handler IDs, each of which contains an arrays of functions.\n *\n * @type {Object}\n */\nDevice.Handlers = {};\n\n/**\n * Machines is a global object whose properties are machine IDs and whose values are arrays of Devices.\n *\n * @type {Object}\n */\nDevice.Machines = {};\n\n/**\n * Category is a global string that contains zero or more Device.CATEGORY strings; see setCategory().\n *\n * @type {string}\n */\nDevice.Category = \"\";\n\n/**\n * PrintBuffer is a global string that buffers partial lines for our print services when using console.log().\n *\n * @type {string}\n */\nDevice.PrintBuffer = \"\";\n\n/*\n * Handy global constants\n */\nDevice.HexLowerCase = \"0123456789abcdef\";\nDevice.HexUpperCase = \"0123456789ABCDEF\";\n\n/**\n * @copyright http://pcjs.org/modules/devices/input.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), location: Array.<number>, map: (Array.<Array.<number>>|undefined), drag: (boolean|undefined), scroll: (boolean|undefined), hexagonal: (boolean|undefined), buttonDelay: (number|undefined) }} */\nvar InputConfig;\n\n/**\n * @class {Input}\n * @unrestricted\n * @property {InputConfig} config\n * @property {Array.<number>} location\n * @property {Array.<Array.<number>>} map\n * @property {boolean} fDrag\n * @property {boolean} fScroll\n * @property {boolean} fHexagonal\n * @property {number} buttonDelay\n * @property {{\n *  surface: HTMLImageElement|undefined\n * }} bindings\n */\nclass Input extends Device {\n    /**\n     * Input(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"input\": {\n     *        \"class\": \"Input\",\n     *        \"location\": [139, 325, 368, 478, 0.34, 0.5, 640, 853],\n     *        \"map\": [\n     *          [\"2nd\",  \"inv\",  \"lnx\",  \"\\\\b\",  \"clr\"],\n     *          [\"lrn\",  \"xchg\", \"sq\",   \"sqrt\", \"rcp\"],\n     *          [\"sst\",  \"sto\",  \"rcl\",  \"sum\",  \"exp\"],\n     *          [\"bst\",  \"ee\",   \"(\",    \")\",    \"/\"],\n     *          [\"gto\",  \"7\",    \"8\",    \"9\",    \"*\"],\n     *          [\"sbr\",  \"4\",    \"5\",    \"6\",    \"-\"],\n     *          [\"rst\",  \"1\",    \"2\",    \"3\",    \"+\"],\n     *          [\"r/s\",  \"0\",    \".\",    \"+/-\",  \"=|\\\\r\"]\n     *        ],\n     *        \"drag\": false,\n     *        \"bindings\": {\n     *          \"surface\": \"imageTI57\",\n     *          \"power\": \"powerTI57\",\n     *          \"reset\": \"resetTI57\"\n     *        }\n     *      }\n     *\n     * A word about the \"power\" button: the page will likely use absolute positioning to overlay the HTML button\n     * onto the image of the physical button, and the temptation might be to use the style \"display:none\" to hide\n     * it, but \"opacity:0\" should be used instead, because otherwise our efforts to use it as focusable element\n     * may fail.\n     *\n     * @this {Input}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {InputConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, Input.VERSION, config);\n\n        this.time = /** @type {Time} */ (this.findDeviceByClass(Machine.CLASS.TIME));\n\n        this.onInput = null;\n        this.onPower = null;\n        this.onReset = null;\n        this.onHover = null;\n\n        /*\n         * If 'drag' is true, then the onInput() handler will be called whenever the current col and/or row\n         * changes, even if the mouse hasn't been released since the previous onInput() call.\n         *\n         * The default is false, because in general, allowing drag is a bad idea for calculator buttons.  But\n         * I've made this an option for other input surfaces, like LED arrays, where you might want to turn a\n         * series of LEDs on or off.\n         */\n        this.fDrag = this.getDefaultBoolean('drag', false);\n\n        /*\n         * If 'scroll' is true, then we do NOT call preventDefault() on touch events; this permits the input\n         * surface to be scrolled like any other part of the page.  The default is false, because this has other\n         * side-effects (eg, inadvertent zooms).\n         */\n        this.fScroll = this.getDefaultBoolean('scroll', false);\n\n        /*\n         * This is set on receipt of the first 'touch' event of any kind, and is used by the 'mouse' event\n         * handlers to disregard mouse events if set.\n         */\n        this.fTouch = false;\n\n        let element = this.bindings[Input.BINDING.SURFACE];\n        if (element) {\n            /*\n             * The location array, eg:\n             *\n             *      \"location\": [139, 325, 368, 478, 0.34, 0.5, 640, 853, 180, 418, 75, 36],\n             *\n             * contains the top left corner (xInput, yInput) and dimensions (cxInput, cyInput)\n             * of the input rectangle where the buttons described in the map are located, relative\n             * to the surface image.  It also describes the average amount of horizontal and vertical\n             * space between buttons, as fractions of the average button width and height (hGap, vGap).\n             *\n             * With all that, we can now calculate the center lines for each column and row.  This\n             * obviously assumes that all the buttons are evenly laid out in a perfect grid.  For\n             * devices that don't have such a nice layout, a different location array format will\n             * have to be defined.\n             *\n             * NOTE: While element.naturalWidth and element.naturalHeight should, for all modern\n             * browsers, contain the surface image's dimensions as well, those values still might not\n             * be available if our constructor is called before the page's onload event has fired,\n             * so we allow them to be stored in the next two elements of the location array, too.\n             *\n             * Finally, the position and size of the device's power button may be stored in the array\n             * as well, in case some browsers refuse to generate onClickPower() events (eg, if they\n             * think the button is inaccessible/not visible).\n             */\n            let location = this.config['location'];\n            this.xInput = location[0];\n            this.yInput = location[1];\n            this.cxInput = location[2];\n            this.cyInput = location[3];\n            this.hGap = location[4] || 1.0;\n            this.vGap = location[5] || 1.0;\n            this.cxSurface = location[6] || element.naturalWidth || this.cxInput;\n            this.cySurface = location[7] || element.naturalHeight || this.cyInput;\n            this.xPower = location[8] || 0;\n            this.yPower = location[9] || 0;\n            this.cxPower = location[10] || 0;\n            this.cyPower = location[11] || 0;\n            this.map = this.config['map'];\n            if (this.map) {\n                this.nRows = this.map.length;\n                this.nCols = this.map[0].length;\n            } else {\n                this.nCols = this.hGap;\n                this.nRows = this.vGap;\n                this.hGap = this.vGap = 0;\n            }\n\n            /*\n             * If 'hexagonal' is true, then we treat the input grid as hexagonal, where even rows of the associated\n             * display are offset.\n             */\n            this.fHexagonal = this.getDefaultBoolean('hexagonal', false);\n            \n            /*\n             * The 'buttonDelay' setting is only necessary for devices (ie, old calculator chips) that are either slow\n             * to respond and/or have debouncing logic that would otherwise be defeated.\n             */\n            this.buttonDelay = this.getDefaultNumber('buttonDelay', 0);\n\n            /*\n             * To calculate the average button width (cxButton), we know that the overall width\n             * must equal the sum of all the button widths + the sum of all the button gaps:\n             *\n             *      cxInput = nCols * cxButton + nCols * (cxButton * hGap)\n             *\n             * The number of gaps would normally be (nCols - 1), but we require that cxInput include\n             * only 1/2 the gap at the edges, too.  Solving for cxButton:\n             *\n             *      cxButton = cxInput / (nCols + nCols * hGap)\n             */\n            this.cxButton = (this.cxInput / (this.nCols + this.nCols * this.hGap))|0;\n            this.cyButton = (this.cyInput / (this.nRows + this.nRows * this.vGap))|0;\n            this.cxGap = (this.cxButton * this.hGap)|0;\n            this.cyGap = (this.cyButton * this.vGap)|0;\n\n            /*\n             * xStart and yStart record the last 'touchstart' or 'mousedown' position on the surface\n             * image; they will be reset to -1 when movement has ended (eg, 'touchend' or 'mouseup').\n             */\n            this.xStart = this.yStart = -1;\n\n            this.captureMouse(element);\n            this.captureTouch(element);\n\n            if (this.time) {\n                /*\n                 * We use a timer for the touch/mouse release events, to ensure that the machine had\n                 * enough time to notice the input before releasing it.\n                 */\n                let input = this;\n                if (this.buttonDelay) {\n                    this.timerInputRelease = this.time.addTimer(\"timerInputRelease\", function onInputRelease() {\n                        if (input.xStart < 0 && input.yStart < 0) { // auto-release ONLY if it's REALLY released\n                            input.setPosition(-1, -1);\n                        }\n                    });\n                }\n                if (this.map) {\n                    /*\n                     * This auto-releases the last key reported after an appropriate delay, to ensure that\n                     * the machine had enough time to notice the corresponding button was pressed.\n                     */\n                    if (this.buttonDelay) {\n                        this.timerKeyRelease = this.time.addTimer(\"timerKeyRelease\", function onKeyRelease() {\n                            input.onKeyTimer();\n                        });\n                    }\n                    /*\n                     * I used to maintain a single-key buffer (this.keyPressed) and would immediately release\n                     * that key as soon as another key was pressed, but it appears that the ROM wants a minimum\n                     * delay between release and the next press -- probably for de-bouncing purposes.  So we\n                     * maintain a key state: 0 means no key has gone down or up recently, 1 means a key just went\n                     * down, and 2 means a key just went up.  keysPressed maintains a queue of keys (up to 16)\n                     * received while key state is non-zero.\n                     */\n                    this.keyState = 0;\n                    this.keysPressed = [];\n                    /*\n                     * I'm attaching my 'keypress' handlers to the document object, since image elements are\n                     * not focusable.  I'm disinclined to do what I've done with other machines (ie, create an\n                     * invisible <textarea> overlay), because in this case, I don't really want a soft keyboard\n                     * popping up and obscuring part of the display.\n                     *\n                     * A side-effect, however, is that if the user attempts to explicitly give the image\n                     * focus, we don't have anything for focus to attach to.  We address that in onMouseDown(),\n                     * by redirecting focus to the \"power\" button, if any, not because we want that or any other\n                     * button to have focus, but simply to remove focus from any other input element on the page.\n                     */\n                    this.captureKeys(document);\n                }\n            }\n\n            /*\n             * Finally, the active input state.  If there is no active input, col and row are -1.  After\n             * this point, these variables will be updated by setPosition().\n             */\n            this.col = this.row = -1;\n        }\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Input}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let input = this;\n\n        switch(binding) {\n\n        case Input.BINDING.POWER:\n            element.onclick = function onClickPower() {\n                if (input.onPower) input.onPower();\n            };\n            break;\n\n        case Input.BINDING.RESET:\n            element.onclick = function onClickReset() {\n                if (input.onReset) input.onReset();\n            };\n            break;\n        }\n        super.addBinding(binding, element);\n    }\n\n    /**\n     * addClick(onPower, onReset)\n     *\n     * Called by the Chip device to set up power and reset notifications.\n     *\n     * @this {Input}\n     * @param {function()} [onPower] (called when the \"power\" button, if any, is clicked)\n     * @param {function()} [onReset] (called when the \"reset\" button, if any, is clicked)\n     */\n    addClick(onPower, onReset)\n    {\n        this.onPower = onPower;\n        this.onReset = onReset;\n    }\n\n    /**\n     * addHover(onHover)\n     *\n     * @this {Input}\n     * @param {function(number, number)} onHover\n     */\n    addHover(onHover)\n    {\n        this.onHover = onHover;\n    }\n\n    /**\n     * addInput(onInput)\n     *\n     * Called by the Chip device to set up input notifications.\n     *\n     * @this {Input}\n     * @param {function(number,number)} onInput\n     */\n    addInput(onInput)\n    {\n        this.onInput = onInput;\n    }\n\n    /**\n     * advanceKeyState()\n     *\n     * @this {Input}\n     */\n    advanceKeyState()\n    {\n        if (!this.buttonDelay) {\n            this.onKeyTimer();\n        } else {\n            this.time.setTimer(this.timerKeyRelease, this.buttonDelay);\n        }\n    }\n\n    /**\n     * captureKeys(element)\n     *\n     * @this {Input}\n     * @param {Document|HTMLElement} element\n     */\n    captureKeys(element)\n    {\n        let input = this;\n        element.addEventListener(\n            'keydown',\n            function onKeyDown(event) {\n                event = event || window.event;\n                let activeElement = document.activeElement;\n                if (activeElement == input.bindings[Input.BINDING.POWER]) {\n                    let keyCode = event.which || event.keyCode;\n                    let ch = Input.KEYCODE[keyCode];\n                    if (ch && input.onKeyPress(ch)) event.preventDefault();\n                }\n            }\n        );\n        element.addEventListener(\n            'keypress',\n            function onKeyPress(event) {\n                event = event || window.event;\n                let charCode = event.which || event.charCode;\n                let ch = String.fromCharCode(charCode);\n                if (ch && input.onKeyPress(ch)) event.preventDefault();\n            }\n        );\n    }\n\n    /**\n     * captureMouse(element)\n     *\n     * @this {Input}\n     * @param {HTMLImageElement} element\n     */\n    captureMouse(element)\n    {\n        let input = this;\n\n        element.addEventListener(\n            'mousedown',\n            function onMouseDown(event) {\n                if (input.fTouch) return;\n                /*\n                 * If there are any text input elements on the page that might currently have focus,\n                 * this is a good time to divert focus to a focusable element of our own (eg, a \"power\"\n                 * button).  Otherwise, key presses could be confusingly processed in two places.\n                 *\n                 * Unfortunately, setting focus on an element can cause the browser to scroll the element\n                 * into view, so to avoid that, we use the following scrollTo() work-around.\n                 */\n                let button = input.bindings[Input.BINDING.POWER];\n                if (button) {\n                    let x = window.scrollX, y = window.scrollY;\n                    button.focus();\n                    window.scrollTo(x, y);\n                }\n                if (!event.button) {\n                    input.processEvent(element, Input.ACTION.PRESS, event);\n                }\n            }\n        );\n\n        element.addEventListener(\n            'mousemove',\n            function onMouseMove(event) {\n                if (input.fTouch) return;\n                input.processEvent(element, Input.ACTION.MOVE, event);\n            }\n        );\n\n        element.addEventListener(\n            'mouseup',\n            function onMouseUp(event) {\n                if (input.fTouch) return;\n                if (!event.button) {\n                    input.processEvent(element, Input.ACTION.RELEASE, event);\n                }\n            }\n        );\n\n        element.addEventListener(\n            'mouseout',\n            function onMouseOut(event) {\n                if (input.fTouch) return;\n                if (input.xStart < 0) {\n                    input.processEvent(element, Input.ACTION.MOVE, event);\n                } else {\n                    input.processEvent(element, Input.ACTION.RELEASE, event);\n                }\n            }\n        );\n    }\n\n    /**\n     * captureTouch(element)\n     *\n     * @this {Input}\n     * @param {HTMLImageElement} element\n     */\n    captureTouch(element)\n    {\n        let input = this;\n\n        /*\n         * NOTE: The mouse event handlers below deal only with events where the left button is involved\n         * (ie, left button is pressed, down, or released).\n         */\n        element.addEventListener(\n            'touchstart',\n            function onTouchStart(event) {\n                /*\n                 * Under normal circumstances (ie, when fScroll is false), when any touch events arrive,\n                 * processEvent() calls preventDefault(), which prevents a variety of potentially annoying\n                 * behaviors (ie, zooming, scrolling, fake mouse events, etc).  Under non-normal circumstances,\n                 * (ie, when fScroll is true), we set fTouch on receipt of a 'touchstart' event, which will\n                 * help our mouse event handlers avoid any redundant actions due to fake mouse events.\n                 */\n                if (input.fScroll) input.fTouch = true;\n                input.processEvent(element, Input.ACTION.PRESS, event);\n            }\n        );\n\n        element.addEventListener(\n            'touchmove',\n            function onTouchMove(event) {\n                input.processEvent(element, Input.ACTION.MOVE, event);\n            }\n        );\n\n        element.addEventListener(\n            'touchend',\n            function onTouchEnd(event) {\n                input.processEvent(element, Input.ACTION.RELEASE, event);\n            }\n        );\n    }\n\n    /**\n     * onKeyPress(ch)\n     *\n     * @this {Input}\n     * @param {string} ch\n     * @returns {boolean} (true if processed, false if not)\n     */\n    onKeyPress(ch)\n    {\n        for (let row = 0; row < this.map.length; row++) {\n            let rowMap = this.map[row];\n            for (let col = 0; col < rowMap.length; col++) {\n                let aParts = rowMap[col].split('|');\n                if (aParts.indexOf(ch) >= 0) {\n                    if (this.keyState) {\n                        if (this.keysPressed.length < 16) {\n                            this.keysPressed.push(ch);\n                        }\n                    } else {\n                        this.keyState = 1;\n                        this.setPosition(col, row);\n                        this.advanceKeyState();\n                    }\n                    return true;\n                }\n            }\n        }\n        this.printf(\"unrecognized key '%s' (0x%02x)\\n\", ch, ch.charCodeAt(0));\n        return false;\n    }\n\n    /**\n     * onKeyTimer()\n     *\n     * @this {Input}\n     */\n    onKeyTimer()\n    {\n\n        if (this.keyState == 1) {\n            this.keyState++;\n            this.setPosition(-1, -1);\n            this.advanceKeyState();\n        } else {\n            this.keyState = 0;\n            if (this.keysPressed.length) {\n                this.onKeyPress(this.keysPressed.shift());\n            }\n        }\n    }\n\n    /**\n     * processEvent(element, action, event)\n     *\n     * @this {Input}\n     * @param {HTMLImageElement} element\n     * @param {number} action\n     * @param {Event|MouseEvent|TouchEvent} [event] (eg, the object from a 'touch' or 'mouse' event)\n     */\n    processEvent(element, action, event)\n    {\n        let col = -1, row = -1;\n        let fMultiTouch = false;\n        let x, y, xInput, yInput, fButton, fInput, fPower;\n\n        if (action < Input.ACTION.RELEASE) {\n\n            /**\n             * @name Event\n             * @property {Array} targetTouches\n             */\n            event = event || window.event;\n\n            if (!event.targetTouches || !event.targetTouches.length) {\n                x = event.pageX;\n                y = event.pageY;\n            } else {\n                x = event.targetTouches[0].pageX;\n                y = event.targetTouches[0].pageY;\n                fMultiTouch = (event.targetTouches.length > 1);\n            }\n\n            /*\n             * Touch coordinates (that is, the pageX and pageY properties) are relative to the page, so to make\n             * them relative to the element, we must subtract the element's left and top positions.  This Apple web page:\n             *\n             *      https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/AddingMouseandTouchControlstoCanvas/AddingMouseandTouchControlstoCanvas.html\n             *\n             * makes it sound simple, but it turns out we have to walk the element's entire \"parentage\" of DOM elements\n             * to get the exact offsets.\n             */\n            let xOffset = 0;\n            let yOffset = 0;\n            let elementNext = element;\n            do {\n                if (!isNaN(elementNext.offsetLeft)) {\n                    xOffset += elementNext.offsetLeft;\n                    yOffset += elementNext.offsetTop;\n                }\n            } while ((elementNext = elementNext.offsetParent));\n\n            /*\n             * Due to the responsive nature of our pages, the displayed size of the surface image may be smaller than\n             * the original size, and the coordinates we receive from events are based on the currently displayed size.\n             */\n            x = ((x - xOffset) * (this.cxSurface / element.offsetWidth))|0;\n            y = ((y - yOffset) * (this.cySurface / element.offsetHeight))|0;\n\n            xInput = x - this.xInput;\n            yInput = y - this.yInput;\n\n            /*\n             * fInput is set if the event occurred somewhere within the input region (ie, the calculator keypad),\n             * either on a button or between buttons, whereas fButton is set if the event occurred squarely (rectangularly?)\n             * on a button.  fPower deals separately with the power button; it is set if the event occurred on the\n             * power button.\n             */\n            fInput = fButton = false;\n            fPower = (x >= this.xPower && x < this.xPower + this.cxPower && y >= this.yPower && y < this.yPower + this.cyPower);\n\n            /*\n             * I use the top of the input region, less some gap, to calculate a dividing line, above which\n             * default actions should be allowed, and below which they should not.  Ditto for any event inside\n             * the power button.\n             */\n            if (xInput >= 0 && xInput < this.cxInput && yInput + this.cyGap >= 0 || fPower) {\n                /*\n                 * If we allow touch events to be processed, they will generate mouse events as well, causing\n                 * confusion and delays.  We can sidestep that problem by preventing default actions on any event\n                 * that occurs within the input region.  One downside is that you can no longer scroll or zoom the\n                 * image using touch, but that may be just as well, because you probably don't want sloppy touches\n                 * moving your display around (or worse, a rapid double-tap zooming the display).  I do try to\n                 * make one small concession for two-finger zoom operations (see fMultiTouch), but that's a bit\n                 * fiddly, because it depends on both fingers hitting the surface at the same instant.\n                 */\n                if (!fMultiTouch && !this.fScroll) event.preventDefault();\n\n                if (xInput >= 0 && xInput < this.cxInput && yInput >= 0 && yInput < this.cyInput) {\n                    fInput = true;\n                    /*\n                     * The width and height of each column and row could be determined by computing cxGap + cxButton\n                     * and cyGap + cyButton, respectively, but those gap and button sizes are merely estimates, and should\n                     * only be used to help with the final button coordinate checks farther down.\n                     */\n                    let cxCol = (this.cxInput / this.nCols) | 0;\n                    let cyCol = (this.cyInput / this.nRows) | 0;\n                    let colInput = (xInput / cxCol) | 0;\n                    let rowInput = (yInput / cyCol) | 0;\n\n                    /*\n                     * If the grid is hexagonal (aka \"Lite-Brite\" mode), then the cells of even-numbered rows are\n                     * offset horizontally by 1/2 cell.  In addition, the last cell in those rows is unused, so if\n                     * after compensating by 1/2 cell, the target column is the last cell, we set xInput to -1,\n                     * effectively ignoring input on that cell.\n                     */\n                    if (this.fHexagonal && !(rowInput & 0x1)) {\n                        xInput -= (cxCol >> 1);\n                        colInput = (xInput / cxCol) | 0;\n                        if (colInput == this.nCols - 1) xInput = -1;\n                    }\n\n                    /*\n                     * (xCol,yCol) will be the top left corner of the button closest to the point of input.  However, that's\n                     * based on our gap estimate.  If things seem \"too tight\", shrink the gap estimates, which will automatically\n                     * increase the button size estimates.\n                     */\n                    let xCol = colInput * cxCol + (this.cxGap >> 1);\n                    let yCol = rowInput * cyCol + (this.cyGap >> 1);\n\n                    xInput -= xCol;\n                    yInput -= yCol;\n                    if (xInput >= 0 && xInput < this.cxButton && yInput >= 0 && yInput < this.cyButton) {\n                        col = colInput;\n                        row = rowInput;\n                        fButton = true;\n                    }\n                }\n            }\n        }\n\n        if (fMultiTouch) return;\n\n        if (action == Input.ACTION.PRESS) {\n            /*\n             * Record the position of the event, transitioning xStart and yStart to non-negative values.\n             */\n            this.xStart = x;\n            this.yStart = y;\n            if (fInput) {\n                /*\n                 * The event occurred in the input region, so we call setPosition() regardless of whether\n                 * it hit or missed a button.\n                 */\n                this.setPosition(col, row);\n                /*\n                 * On the other hand, if it DID hit a button, then we arm the auto-release timer, to ensure\n                 * a minimum amount of time (ie, BUTTON_DELAY).\n                 */\n                if (fButton && this.buttonDelay) {\n                    this.time.setTimer(this.timerInputRelease, this.buttonDelay, true);\n                }\n            } else if (fPower && this.onPower) {\n                this.onPower();\n            }\n        }\n        else if (action == Input.ACTION.MOVE) {\n            if (this.xStart >= 0 && this.yStart >= 0 && this.fDrag) {\n                this.setPosition(col, row);\n            }\n            else if (this.onHover) {\n                this.onHover(col, row);\n            }\n        }\n        else if (action == Input.ACTION.RELEASE) {\n            /*\n             * Don't immediately signal the release if the release timer is active (let the timer take care of it).\n             */\n            if (!this.buttonDelay || !this.time.isTimerSet(this.timerInputRelease)) {\n                this.setPosition(-1, -1);\n            }\n            this.xStart = this.yStart = -1;\n        }\n        else {\n            this.println(\"unrecognized action: \" + action);\n        }\n    }\n\n    /**\n     * setPosition(col, row)\n     *\n     * @this {Input}\n     * @param {number} col\n     * @param {number} row\n     */\n    setPosition(col, row)\n    {\n        if (col != this.col || row != this.row) {\n            this.col = col;\n            this.row = row;\n            if (this.onInput) this.onInput(col, row);\n        }\n    }\n}\n\nInput.ACTION = {\n    PRESS:      1,              // eg, an action triggered by a 'mousedown' or 'touchstart' event\n    MOVE:       2,              // eg, an action triggered by a 'mousemove' or 'touchmove' event\n    RELEASE:    3               // eg, an action triggered by a 'mouseup' (or 'mouseout') or 'touchend' event\n};\n\nInput.BINDING = {\n    POWER:      \"power\",\n    RESET:      \"reset\",\n    SURFACE:    \"surface\"\n};\n\nInput.KEYCODE = {               // keyCode from keydown/keyup events\n    0x08:       \"\\b\"            // backspace\n};\n\nInput.BUTTON_DELAY = 50;        // minimum number of milliseconds to ensure between button presses and releases\n\nInput.VERSION   = 1.11;\n\n/**\n * @copyright http://pcjs.org/modules/devices/led.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), type: number, width: (number|undefined), height: (number|undefined), cols: (number|undefined), colsExtra: (number|undefined), rows: (number|undefined), rowsExtra: (number|undefined), color: (string|undefined), backgroundColor: (string|undefined), fixed: (boolean|undefined), hexagonal: (boolean|undefined), highlight: (boolean|undefined), persistent: (boolean|undefined) }} */\nvar LEDConfig;\n\n/**\n * The ultimate goal is to provide support for a variety of LED types, such as:\n *\n * 1) LED Light (single light)\n * 2) LED Digit (7-segment digit)\n *\n * The initial goal is to manage a 12-element array of 7-segment LED digits for the TI-57.\n *\n * We create a \"view\" canvas element inside the specified \"container\" element, along with a \"grid\" canvas\n * where all the real drawing occurs; drawView() then renders the \"grid\" canvas onto the \"view\" canvas.\n *\n * Internally, our LED digits have a width and height of 96 and 128.  Those are \"grid\" dimensions which\n * cannot be changed, because our table of drawing coordinates in LED.SEGMENTS are hard-coded for those\n * dimensions.  The cell width and height that are specified as part of the LEDConfig are \"view\" dimensions,\n * which usually match the grid dimensions, but you're welcome to scale them up or down; the browser's\n * drawImage() function takes care of that.\n *\n * There is a low-level function, drawGridSegment(), for drawing specific LED segments of specific digits;\n * generally, you start with clearGrid(), draw all the segments for a given update, and then call drawView()\n * to make them visible.\n *\n * However, our Chip devices operate at a higher level.  They use setLEDState() to modify the state,\n * character, etc, that each of the LED cells should display, which updates our internal LED buffer.  Then\n * at whatever display refresh rate is set (typically 60Hz), drawBuffer() is called to see if the buffer\n * contents have been modified since the last refresh, and if so, it converts the contents of the buffer to\n * a string and calls drawString().\n *\n * This buffering strategy, combined with the buffer \"tickled\" flag (see below), not only makes life\n * simple for the Chip device, but also simulates how the display goes blank for short periods of time while\n * the Chip is busy performing calculations.\n *\n * @class {LED}\n * @unrestricted\n * @property {LEDConfig} config\n * @property {number} type (one of the LED.TYPE values)\n * @property {number} width (default is 96 for LED.TYPE.DIGIT, 32 otherwise; see LED.SIZES)\n * @property {number} height (default is 128 for LED.TYPE.DIGIT, 32 otherwise; see LED.SIZES)\n * @property {number} cols (default is 1)\n * @property {number} rows (default is 1)\n * @property {number} colsView (default is cols)\n * @property {number} rowsView (default is rows)\n * @property {string} color (default is none; ie, transparent foreground)\n * @property {string} colorBackground (default is none; ie, transparent background)\n * @property {boolean} fFixed (default is false, meaning the view may fill the container to its maximum size)\n * @property {boolean} fHexagonal (default is false)\n * @property {boolean} fHighlight (default is true)\n * @property {boolean} fPersistent (default is false for LED.TYPE.DIGIT, meaning the view will be blanked if not refreshed)\n * @property {number} widthView (computed)\n * @property {number} heightView (computed)\n * @property {number} widthGrid (computed)\n * @property {number} heightGrid (computed)\n * @property {HTMLCanvasElement} canvasView\n * @property {CanvasRenderingContext2D} contextView\n * @property {HTMLCanvasElement} canvasGrid\n * @property {CanvasRenderingContext2D} contextGrid\n * @property {{\n *  container: HTMLElement|undefined\n * }} bindings\n * @property {Array.<string|number>} buffer\n * @property {Array.<string|number>|null} bufferClone\n * @property {boolean} fBufferModified\n * @property {boolean} fTickled\n */\nclass LED extends Device {\n    /**\n     * LED(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"display\": {\n     *        \"class\": \"LED\",\n     *        \"type\": 3,\n     *        \"cols\": 12,\n     *        \"rows\": 1,\n     *        \"color\": \"red\",\n     *        \"bindings\": {\n     *          \"container\": \"displayTI57\"\n     *        }\n     *      }\n     *\n     * @this {LED}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {LEDConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, LED.VERSION, config);\n\n        let container = this.bindings[LED.BINDING.CONTAINER];\n        if (!container) {\n            let sError = \"LED binding for '\" + LED.BINDING.CONTAINER + \"' missing: '\" + this.config.bindings[LED.BINDING.CONTAINER] + \"'\";\n            throw new Error(sError);\n        }\n\n        let canvasView = /** @type {HTMLCanvasElement} */ (document.createElement(\"canvas\"));\n        if (!canvasView || !canvasView.getContext) {\n            let sError = \"LED device requires HTML5 canvas support\";\n            container.innerHTML = sError;\n            throw new Error(sError);\n        }\n\n        this.container = container;\n        this.canvasView = canvasView;\n\n        this.type = this.getBounded(this.config['type'] || LED.TYPE.ROUND, LED.TYPE.ROUND, LED.TYPE.DIGIT);\n        this.widthCell = LED.SIZES[this.type][0];\n        this.heightCell = LED.SIZES[this.type][1];\n        this.width = this.getDefaultNumber('width', this.widthCell);\n        this.height = this.getDefaultNumber('height', this.heightCell);\n        this.colsView = this.getDefaultNumber('cols',  1);\n        this.cols = this.colsView + this.getDefaultNumber('colsExtra', 0);\n        this.rowsView = this.getDefaultNumber('rows',  1);\n        this.rows = this.rowsView + this.getDefaultNumber('rowsExtra', 0);\n        this.widthView = this.width * this.colsView;\n        this.heightView = this.height * this.rowsView;\n\n        this.colorTransparent = this.getRGBAColor(\"black\", 0);\n        this.colorOn = this.getRGBColor(this.config['color']) || this.colorTransparent;\n        this.colorOff = this.getRGBAColor(this.colorOn, 1.0, 0.25);\n        this.colorHighlight = this.getRGBAColor(this.colorOn, 1.0, 2.0);\n        this.colorBackground = this.getRGBColor(this.config['backgroundColor']);\n\n        /*\n         * We generally want our view canvas to be \"responsive\", not \"fixed\" (ie, to automatically resize\n         * with changes to the overall window size), so we apply the following style attributes (formerly\n         * applied with the \"pcjs-canvas\" style in /modules/shared/templates/components.css):\n         *\n         *      width: 100%;\n         *      height: auto;\n         *\n         * But, if you really don't want that feature, then set the LED config's \"fixed\" property to true.\n         */\n        this.fFixed = this.getDefaultBoolean('fixed', false);\n        if (!this.fFixed) {\n            canvasView.style.width = \"100%\";\n            canvasView.style.height = \"auto\";\n        }\n\n        /*\n         * Hexagonal (aka \"Lite-Brite\" mode) and highlighting options\n         */\n        this.fHexagonal = this.getDefaultBoolean('hexagonal', false);\n        this.fHighlight = this.getDefaultBoolean('highlight', true);\n\n        /*\n         * Persistent LEDS are the default, except for LED.TYPE.DIGIT, which is used with calculator displays\n         * whose underlying hardware must constantly \"refresh\" the LEDs to prevent them from going dark.\n         */\n        this.fPersistent = this.getDefaultBoolean('persistent', (this.type < LED.TYPE.DIGIT));\n\n        canvasView.setAttribute(\"width\", this.widthView.toString());\n        canvasView.setAttribute(\"height\", this.heightView.toString());\n        canvasView.style.backgroundColor = this.colorTransparent;\n        container.appendChild(canvasView);\n        this.contextView = /** @type {CanvasRenderingContext2D} */ (canvasView.getContext(\"2d\"));\n\n        /*\n         * canvasGrid is where all LED segments are composited; then they're drawn onto canvasView.\n         */\n        this.canvasGrid = /** @type {HTMLCanvasElement} */ (document.createElement(\"canvas\"));\n        if (this.canvasGrid) {\n            this.canvasGrid.width = this.widthGrid = this.widthCell * this.colsView;\n            this.canvasGrid.height = this.heightGrid = this.heightCell * this.rowsView;\n            this.contextGrid = this.canvasGrid.getContext(\"2d\");\n        }\n\n        /*\n         * Time to allocate our internal LED buffer.  Other devices access the buffer through interfaces\n         * like setLEDState() and getLEDState().  The LED buffer contains four per elements per LED cell:\n         *\n         *      [0]:    state (eg, ON or OFF or a digit)\n         *      [1]:    color\n         *      [2]:    count(s) (eg, 0 to 8  4-bit counts)\n         *      [3]:    flags (eg, PERIOD, MODIFIED, etc)\n         *\n         * The LED buffer also contains an extra (scratch) row at the end.  This extra row, along with the\n         * dynamically allocated \"clone\" buffer, is used by the LED Controller for direct buffer manipulation;\n         * see the low-level getBuffer(), getBufferClone(), and swapBuffers() interfaces.\n         */\n        this.nBufferInc = 4;\n        this.nBufferCells = ((this.rows + 1) * this.cols) * this.nBufferInc;\n        this.buffer = new Array(this.nBufferCells);\n        this.bufferClone = null;\n        this.nBufferSkip = (this.colsView < this.cols? (this.cols - this.colsView) * 4 : 0);\n\n        /*\n         * fBufferModified is straightforward: set to true by any setLEDState() call that actually\n         * changed something in the LED buffer, set to false after every drawBuffer() call, periodic\n         * or otherwise.\n         *\n         * fTickled is a flag which, under normal (idle) circumstances, will constantly be set to\n         * true by periodic display operations that call setLEDState(); we clear it after every\n         * periodic drawBuffer(), so if the machine fails to execute a setBuffer() in a timely manner,\n         * we will see that fTickled hasn't been \"tickled\", and automatically blank the display.\n         */\n        this.fBufferModified = this.fTickled = false;\n\n        /*\n         * This records the location of the most recent LED buffer location updated via setLEDState(),\n         * in case we want to highlight it.\n         */\n        this.iBufferRecent = -1;\n\n        let led = this;\n        this.time = /** @type {Time} */ (this.findDeviceByClass(Machine.CLASS.TIME));\n        if (this.time) {\n            this.time.addAnimator(function ledAnimate() {\n                led.drawBuffer();\n            });\n        }\n    }\n\n    /**\n     * clearBuffer(fDraw)\n     *\n     * @this {LED}\n     * @param {boolean} [fDraw]\n     */\n    clearBuffer(fDraw)\n    {\n        this.initBuffer(this.buffer);\n        this.fBufferModified = this.fTickled = true;\n        if (fDraw) this.drawBuffer(true);\n    }\n\n    /**\n     * clearGrid()\n     *\n     * @this {LED}\n     */\n    clearGrid()\n    {\n        if (this.colorBackground) {\n            this.contextGrid.fillStyle = this.colorBackground;\n            this.contextGrid.fillRect(0, 0, this.widthGrid, this.heightGrid);\n        } else {\n            this.contextGrid.clearRect(0, 0, this.widthGrid, this.heightGrid);\n        }\n    }\n\n    /**\n     * clearGridCell(col, row, xOffset)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {number} xOffset\n     */\n    clearGridCell(col, row, xOffset)\n    {\n        let xBias = col * this.widthCell + xOffset;\n        let yBias = row * this.heightCell;\n        if (this.colorBackground) {\n            this.contextGrid.fillStyle = this.colorBackground;\n            this.contextGrid.fillRect(xBias, yBias, this.widthCell, this.heightCell);\n        } else {\n            this.contextGrid.clearRect(xBias, yBias, this.widthCell, this.heightCell);\n        }\n    }\n\n    /**\n     * drawBuffer(fForced)\n     *\n     * This is our periodic (60Hz) redraw function; however, it can also be called synchronously\n     * (eg, see clearBuffer()).  The other important periodic side-effect of this function is clearing\n     * fTickled, so that if no other setLEDState() calls occur between now and the next drawBuffer(),\n     * an automatic clearBuffer() will be triggered.  This simulates the normal blanking of the display\n     * whenever the machine performs lengthy calculations, because for an LED display to remain lit,\n     * the machine must perform a display operation (\"refresh\") at least 30-60 times per second.\n     *\n     * @this {LED}\n     * @param {boolean} [fForced]\n     */\n    drawBuffer(fForced = false)\n    {\n        if (this.fBufferModified || fForced) {\n            if (this.type < LED.TYPE.DIGIT) {\n                this.drawGrid(fForced);\n            } else {\n                let s = \"\";\n                for (let i = 0; i < this.buffer.length; i += this.nBufferInc) {\n                    s += this.buffer[i] || ' ';\n                    if (this.buffer[i+3] & LED.FLAGS.PERIOD) s += '.';\n                }\n                this.drawString(s);\n            }\n            this.fBufferModified = false;\n            this.iBufferRecent = -1;\n        }\n        else if (!this.fPersistent && !this.fTickled) {\n            this.clearBuffer(true);\n        }\n        this.fTickled = false;\n    }\n\n    /**\n     * drawGrid(fForced)\n     *\n     * Used by drawBuffer() for LED.TYPE.ROUND and LED.TYPE.SQUARE.\n     *\n     * @this {LED}\n     * @param {boolean} fForced\n     */\n    drawGrid(fForced)\n    {\n        if (!this.fPersistent || fForced) {\n            this.clearGrid();\n        }\n        let i = 0;\n        for (let row = 0; row < this.rows; row++) {\n            for (let col = 0; col < this.colsView; col++) {\n                let state = this.buffer[i];\n                let color = this.buffer[i+1] || this.colorTransparent;\n                let fModified = !!(this.buffer[i+3] & LED.FLAGS.MODIFIED);\n                let fHighlight = (this.fHighlight && i == this.iBufferRecent);\n                if (fModified || fHighlight || fForced) {\n                    this.drawGridCell(state, color, col, row, fHighlight);\n                    this.buffer[i+3] &= ~LED.FLAGS.MODIFIED;\n                    if (fHighlight) this.buffer[i+3] |= LED.FLAGS.MODIFIED;\n                }\n                i += this.nBufferInc;\n            }\n            i += this.nBufferSkip;\n        }\n        this.drawView();\n    }\n\n    /**\n     * drawGridCell(state, color, col, row, fHighlight)\n     *\n     * Used by drawGrid() for LED.TYPE.ROUND and LED.TYPE.SQUARE.\n     *\n     * @this {LED}\n     * @param {string} state (eg, LED.STATE.ON or LED.STATE.OFF)\n     * @param {string} [color]\n     * @param {number} [col] (default is zero)\n     * @param {number} [row] (default is zero)\n     * @param {boolean} [fHighlight] (true if the cell should be highlighted; default is false)\n     */\n    drawGridCell(state, color, col = 0, row = 0, fHighlight = false)\n    {\n        let xOffset = 0;\n        if (this.fHexagonal) {\n            if (!(row & 0x1)) {\n                xOffset = (this.widthCell >> 1);\n                if (col == this.colsView - 1) return;\n            }\n        }\n\n        /*\n         * If this is NOT a persistent LED display, then drawGrid() will have done a preliminary clearGrid(),\n         * eliminating the need to clear individual cells.  Whereas if this IS a persistent LED display, then\n         * we need to clear cells on an as-drawn basis.  If we don't, there could be residual \"bleed over\"\n         * around the edges of the shape we drew here previously.\n         */\n        if (this.fPersistent) {\n            this.clearGridCell(col, row, xOffset);\n        }\n\n        let colorOn, colorOff;\n        if (!color || color == this.colorOn) {\n            colorOn = fHighlight? this.colorHighlight : this.colorOn;\n            colorOff = this.colorOff;\n        } else {\n            colorOn = fHighlight? this.getRGBAColor(color, 1.0, 2.0) : color;\n            colorOff = this.getRGBAColor(color, 1.0, 0.25);\n        }\n\n        let fTransparent = false;\n        color = (state? colorOn : colorOff);\n        if (colorOn == this.colorTransparent) {\n            color = this.colorBackground;\n            fTransparent = true;\n        }\n\n        this.contextGrid.fillStyle = color;\n\n        let xBias = col * this.widthCell + xOffset;\n        let yBias = row * this.heightCell;\n        let coords = LED.SHAPES[this.type];\n        if (coords.length == 3) {\n            this.contextGrid.beginPath();\n            this.contextGrid.arc(coords[0] + xBias, coords[1] + yBias, coords[2], 0, Math.PI * 2);\n            if (fTransparent) {\n                /*\n                 * The following code works as well:\n                 *\n                 *      this.contextGrid.save();\n                 *      this.contextGrid.clip();\n                 *      this.contextGrid.clearRect(xBias, yBias, this.widthCell, this.heightCell);\n                 *      this.contextGrid.restore();\n                 *\n                 * but I assume it's not as efficient.\n                 */\n                this.contextGrid.globalCompositeOperation = \"destination-out\";\n                this.contextGrid.fill();\n                this.contextGrid.globalCompositeOperation = \"source-over\";\n            } else {\n                this.contextGrid.fill();\n            }\n        } else {\n            this.contextGrid.fillRect(coords[0] + xBias, coords[1] + yBias, coords[2], coords[3]);\n        }\n    }\n\n    /**\n     * drawGridSegment(seg, col, row)\n     *\n     * Used by drawSymbol() for LED.TYPE.DIGIT.\n     *\n     * @this {LED}\n     * @param {string} seg (eg, \"A\")\n     * @param {number} [col] (default is zero)\n     * @param {number} [row] (default is zero)\n     */\n    drawGridSegment(seg, col = 0, row = 0)\n    {\n        let coords = LED.SEGMENTS[seg];\n        if (coords) {\n            let xBias = col * this.widthCell;\n            let yBias = row * this.heightCell;\n            this.contextGrid.fillStyle = this.colorOn;\n            this.contextGrid.beginPath();\n            if (coords.length == 3) {\n                this.contextGrid.arc(coords[0] + xBias, coords[1] + yBias, coords[2], 0, Math.PI * 2);\n            } else {\n                for (let i = 0; i < coords.length; i += 2) {\n                    if (!i) {\n                        this.contextGrid.moveTo(coords[i] + xBias, coords[i + 1] + yBias);\n                    } else {\n                        this.contextGrid.lineTo(coords[i] + xBias, coords[i + 1] + yBias);\n                    }\n                }\n            }\n            this.contextGrid.closePath();\n            this.contextGrid.fill();\n        }\n    }\n\n    /**\n     * drawString(s)\n     *\n     * Used by drawBuffer() for LED.TYPE.DIGIT.\n     *\n     * @this {LED}\n     * @param {string} s\n     */\n    drawString(s)\n    {\n        this.clearGrid();\n        for (let i = 0, col = 0, row = 0; i < s.length; i++) {\n            let ch = s[i];\n            if (ch == '.') {\n                if (col) col--;\n            }\n            this.drawSymbol(ch, col, row);\n            if (++col == this.colsView) {\n                col = 0;\n                if (++row == this.rows) {\n                    break;\n                }\n            }\n        }\n        this.drawView();\n    }\n\n    /**\n     * drawSymbol(symbol, col, row)\n     *\n     * Used by drawString() for LED.TYPE.DIGIT.\n     *\n     * If the symbol does not exist in LED.SYMBOL_SEGMENTS, then nothing is drawn.\n     *\n     * @this {LED}\n     * @param {string} symbol\n     * @param {number} [col] (default is zero)\n     * @param {number} [row] (default is zero)\n     */\n    drawSymbol(symbol, col = 0, row = 0)\n    {\n        let segments = LED.SYMBOL_SEGMENTS[symbol];\n        if (segments) {\n            for (let i = 0; i < segments.length; i++) {\n                this.drawGridSegment(segments[i], col, row)\n            }\n        }\n    }\n\n    /**\n     * drawView()\n     *\n     * @this {LED}\n     */\n    drawView()\n    {\n        /*\n         * Setting the 'globalCompositeOperation' property of a 2D context is something you rarely need to do,\n         * because the default draw behavior (\"source-over\") is fine for most cases.  One case where it is NOT\n         * fine is when we're using a transparent background color, because it doesn't copy over any transparent\n         * pixels, effectively making it impossible to \"turn off\" any previously drawn LED segments.  To force\n         * that behavior, we must select the \"copy\" behavior.\n         *\n         * Refer to: https://www.w3.org/TR/2dcontext/#dom-context-2d-globalcompositeoperation\n         */\n        this.contextView.globalCompositeOperation = (this.colorBackground && !this.fPersistent)? \"source-over\" : \"copy\";\n        this.contextView.drawImage(this.canvasGrid, 0, 0, this.widthGrid, this.heightGrid, 0, 0, this.widthView, this.heightView);\n    }\n\n    /**\n     * getBuffer()\n     *\n     * @this {LED}\n     * @returns {Array}\n     */\n    getBuffer()\n    {\n        return this.buffer;\n    }\n\n    /**\n     * getBufferClone()\n     *\n     * @this {LED}\n     * @returns {Array}\n     */\n    getBufferClone()\n    {\n        if (!this.bufferClone) {\n            this.bufferClone = new Array(this.nBufferCells);\n            this.initBuffer(this.bufferClone);\n        }\n        return this.bufferClone;\n    }\n\n    /**\n     * getLEDColor(col, row)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @returns {string}\n     */\n    getLEDColor(col, row)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        return this.buffer[i+1] || this.colorTransparent;\n    }\n\n    /**\n     * getLEDColorValues(col, row, rgb)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {Array.<number>} rgb\n     * @returns {boolean}\n     */\n    getLEDColorValues(col, row, rgb)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        return this.parseRGBValues(this.buffer[i+1] || this.colorTransparent, rgb);\n    }\n\n    /**\n     * getLEDCounts(col, row, counts)\n     *\n     * This function returns success (true) ONLY for cells that are not transparent.\n     *\n     * For a typical \"Lite-Brite\" grid, transparent cells are considered \"empty\", so we want to\n     * ignore them.\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {Array.<number>} counts\n     * @returns {boolean}\n     */\n    getLEDCounts(col, row, counts)\n    {\n        let fSuccess = false;\n        let i = (row * this.cols + col) * this.nBufferInc;\n        if (i <= this.buffer.length - this.nBufferInc && this.buffer[i+1]) {\n            fSuccess = true;\n            let bits = this.buffer[i+2];\n            for (let c = counts.length - 1; c >= 0; c--) {\n                counts[c] = bits & 0xf;\n                bits >>>= 4;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * getLEDCountsPacked(col, row)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @returns {number}\n     */\n    getLEDCountsPacked(col, row)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        return (i <= this.buffer.length - this.nBufferInc)? this.buffer[i+2] : 0;\n    }\n\n    /**\n     * getLEDState(col, row)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @returns {number|undefined}\n     */\n    getLEDState(col, row)\n    {\n        let state;\n        let i = (row * this.cols + col) * this.nBufferInc;\n\n        if (i >= 0 && i <= this.buffer.length - this.nBufferInc) {\n            state = this.buffer[i];\n        }\n        return state;\n    }\n\n    /**\n     * getDefaultColor()\n     *\n     * @this {LED}\n     * @returns {string}\n     */\n    getDefaultColor()\n    {\n        return this.colorOn;\n    }\n\n    /**\n     * getRGBColor(color, colorDefault)\n     *\n     * Returns a color string in the \"hex\" format that fillStyle recognizes (eg, \"#rrggbb\").\n     *\n     * The default is optional, allowing an undefined color to remain undefined if we want to use\n     * that to signal transparency (as in the case of colorBackground).\n     *\n     * @this {LED}\n     * @param {string|undefined} color\n     * @param {string} [colorDefault]\n     * @returns {string|undefined}\n     */\n    getRGBColor(color, colorDefault)\n    {\n        color = color || colorDefault;\n        return color && LED.COLORS[color] || color;\n    }\n\n    /**\n     * getRGBColorString(rgb)\n     *\n     * Returns a color string fillStyle recognizes (ie, \"#rrggbb\", or \"rgba(r,g,b,a)\" if an alpha value\n     * less than 1 is set).\n     *\n     * TODO: Cache frequently requested colors.\n     * \n     * @this {LED}\n     * @param {Array.<number>} rgb\n     * @returns {string}\n     */\n    getRGBColorString(rgb)\n    {\n        let s;\n        if (rgb.length < 4 || rgb[3] == 1) {\n            s = this.sprintf(\"#%02x%02x%02x\", rgb[0], rgb[1], rgb[2]);\n        } else {\n            s = this.sprintf(\"rgba(%d,%d,%d,%d)\", rgb[0], rgb[1], rgb[2], rgb[3]);\n        }\n        return s;\n    }\n\n    /**\n     * getRGBAColor(color, alpha, brightness)\n     *\n     * Returns a color string in the \"rgba\" format that fillStyle recognizes (eg, \"rgba(255, 255, 255, 0)\").\n     *\n     * I used to use \"alpha\" to adjust the brightness, but it's safer to use the \"brightness\" parameter,\n     * which simply scales all the RGB values.  That's because if any shapes are redrawn using a fillStyle\n     * with alpha < 1.0, the target alpha values will be added instead of replaced, resulting in progressively\n     * brighter shapes; probably not what you want.\n     *\n     * @this {LED}\n     * @param {string} color\n     * @param {number} [alpha]\n     * @param {number} [brightness]\n     * @returns {string}\n     */\n    getRGBAColor(color, alpha = 1.0, brightness = 1.0)\n    {\n        if (color) {\n            let rgb = [];\n            color = LED.COLORS[color] || color;\n            if (this.parseRGBValues(color, rgb)) {\n                color = \"rgba(\";\n                let i;\n                for (i = 0; i < 3; i++) {\n                    let n = Math.round(rgb[i] * brightness);\n                    n = (n < 0? 0 : (n > 255? 255 : n));\n                    color += n + \",\";\n                }\n                color += (i < rgb.length? rgb[i] : alpha) + \")\";\n            }\n        }\n        return color;\n    }\n\n    /**\n     * initBuffer(buffer)\n     *\n     * @this {LED}\n     * @param buffer\n     */\n    initBuffer(buffer)\n    {\n        for (let i = 0; i < buffer.length; i += this.nBufferInc) {\n            if (this.type < LED.TYPE.DIGIT) {\n                buffer[i] = LED.STATE.OFF;\n            } else {\n                buffer[i] = ' ';\n            }\n            buffer[i+1] = (this.colorOn == this.colorTransparent? null : this.colorOn);\n            buffer[i+2] = 0;\n            buffer[i+3] = LED.FLAGS.MODIFIED;\n        }\n    }\n\n    /**\n     * loadState(state)\n     *\n     * If any saved values don't match (possibly overridden), abandon the given state and return false.\n     *\n     * @this {LED}\n     * @param {Array} state\n     * @returns {boolean}\n     */\n    loadState(state)\n    {\n        let colorOn = state.shift();\n        let colorBackground = state.shift();\n        let buffer = state.shift();\n        if (colorOn == this.colorOn && colorBackground == this.colorBackground && buffer && buffer.length == this.buffer.length) {\n            this.buffer = buffer;\n            /*\n             * Loop over all the buffer colors to fix a legacy problem (ie, before we started storing null for colorTransparent)\n             */\n            for (let i = 0; i <= this.buffer.length - this.nBufferInc; i += this.nBufferInc) {\n                if (this.buffer[i+1] == this.colorTransparent) this.buffer[i+1] = null;\n            }\n            this.drawBuffer(true);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * parseRGBValues(color, rgb)\n     *\n     * @this {LED}\n     * @param {string} color\n     * @param {Array.<number>} rgb\n     * @returns {boolean}\n     */\n    parseRGBValues(color, rgb)\n    {\n        let base = 16;\n        let match = color.match(/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i);\n        if (!match) {\n            base = 10;\n            match = color.match(/^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,?\\s*(\\d+|)\\)$/i);\n        }\n        if (match) {\n            let i;\n            for (i = 1; i < match.length; i++) {\n                rgb[i-1] = Number.parseInt(match[i], base);\n            }\n            rgb.length = i-1;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * saveState(state)\n     *\n     * @this {LED}\n     * @param {Array} state\n     */\n    saveState(state)\n    {\n        if (this.buffer) {\n            state.push(this.colorOn);\n            state.push(this.colorBackground);\n            state.push(this.buffer);\n        }\n    }\n\n    /**\n     * setContainerStyle(sAttr, sValue)\n     * \n     * @this {LED}\n     * @param {string} sAttr \n     * @param {string} sValue \n     */\n    setContainerStyle(sAttr, sValue)\n    {\n        if (this.container) this.container.style[sAttr] = sValue;\n    }\n    \n    /**\n     * setLEDColor(col, row, color)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {string} [color]\n     * @returns {boolean|null} (true if this call modified the LED color, false if not, null if error)\n     */\n    setLEDColor(col, row, color)\n    {\n        let fModified = null;\n        if (row >= 0 && row < this.rows && col >= 0 && col < this.cols) {\n            fModified = false;\n            let colorNew = color || this.colorOn;\n            if (colorNew == this.colorTransparent) colorNew = null;\n            let i = (row * this.cols + col) * this.nBufferInc;\n            if (this.buffer[i+1] !== colorNew) {\n                this.buffer[i+1] = colorNew;\n                if (!colorNew) this.buffer[i] = LED.STATE.OFF;  // transparent LEDs are automatically turned off\n                this.buffer[i+3] |= LED.FLAGS.MODIFIED;\n                this.fBufferModified = fModified = true;\n            }\n            this.iBufferRecent = i;\n            this.fTickled = true;\n        }\n        return fModified;\n    }\n\n    /**\n     * setLEDCounts(col, row, counts)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {Array.<number>} counts\n     * @returns {boolean|null} (true if this call modified the LED color, false if not, null if error)\n     */\n    setLEDCounts(col, row, counts)\n    {\n        let fModified = null;\n        if (row >= 0 && row < this.rows && col >= 0 && col < this.cols) {\n            fModified = false;\n            let i = (row * this.cols + col) * this.nBufferInc;\n            let bits = 0;\n            if (this.buffer[i+1]) {                             // only non-transparent LEDs are allowed to set counters\n                for (let c = 0; c < counts.length; c++) {\n                    bits = (bits << 4) | (counts[c] & 0xf);\n                }\n            }\n            if (this.buffer[i+2] !== bits) {\n                this.buffer[i+2] = bits;\n                this.buffer[i+3] |= LED.FLAGS.MODIFIED;\n                this.fBufferModified = fModified = true;\n            }\n            this.iBufferRecent = i;\n            this.fTickled = true;\n        }\n        return fModified;\n    }\n\n    /**\n     * setLEDCountsPacked(col, row, counts)\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {number} counts\n     * @returns {boolean|null} (true if this call modified the LED state, false if not, null if error)\n     */\n    setLEDCountsPacked(col, row, counts)\n    {\n        let i = (row * this.cols + col) * this.nBufferInc;\n        if (i <= this.buffer.length - this.nBufferInc) {\n            if (this.buffer[i+2] != counts) {\n                this.buffer[i+2] = counts;\n                return true;\n            }\n            return false;\n        }\n        return null;\n    }\n\n    /**\n     * setLEDState(col, row, state, flags)\n     *\n     * For LED.TYPE.ROUND or LED.TYPE.SQUARE, the state parameter should be LED.STATE.OFF or LED.STATE.ON.\n     *\n     * @this {LED}\n     * @param {number} col\n     * @param {number} row\n     * @param {string|number} state (new state for the specified cell)\n     * @param {number} [flags] (may only be zero or more of the bits in LED.FLAGS.SET)\n     * @returns {boolean|null} (true if this call modified the LED state, false if not, null if error)\n     */\n    setLEDState(col, row, state, flags = 0)\n    {\n        let fModified = null;\n\n        if (row >= 0 && row < this.rows && col >= 0 && col < this.cols) {\n            fModified = false;\n            let i = (row * this.cols + col) * this.nBufferInc;\n            if (this.buffer[i] !== state || (this.buffer[i+3] & LED.FLAGS.SET) !== flags) {\n                this.buffer[i] = state;\n                this.buffer[i+3] = (this.buffer[i+3] & ~LED.FLAGS.SET) | flags | LED.FLAGS.MODIFIED;\n                this.fBufferModified = fModified = true;\n            }\n            this.iBufferRecent = i;\n            this.fTickled = true;\n        }\n        return fModified;\n    }\n\n    /**\n     * swapBuffers()\n     *\n     * @this {LED}\n     */\n    swapBuffers()\n    {\n        let buffer = this.buffer;\n        this.buffer = this.bufferClone;\n        this.bufferClone = buffer;\n        this.fBufferModified = true;\n    }\n}\n\nLED.TYPE = {\n    ROUND:      1,      // a single (round) LED\n    SQUARE:     2,      // a single (square) LED\n    DIGIT:      3       // a 7-segment (digit) LED, with a period as an 8th segment\n};\n\nLED.BINDING = {\n    CONTAINER:  \"container\"\n};\n\nLED.COLORS = {\n    \"aliceblue\":            \"#f0f8ff\",\n    \"antiquewhite\":         \"#faebd7\",\n    \"aqua\":                 \"#00ffff\",\n    \"aquamarine\":           \"#7fffd4\",\n    \"azure\":                \"#f0ffff\",\n    \"beige\":                \"#f5f5dc\",\n    \"bisque\":               \"#ffe4c4\",\n    \"black\":                \"#000000\",\n    \"blanchedalmond\":       \"#ffebcd\",\n    \"blue\":                 \"#0000ff\",\n    \"blueviolet\":           \"#8a2be2\",\n    \"brown\":                \"#a52a2a\",\n    \"burlywood\":            \"#deb887\",\n    \"cadetblue\":            \"#5f9ea0\",\n    \"chartreuse\":           \"#7fff00\",\n    \"chocolate\":            \"#d2691e\",\n    \"coral\":                \"#ff7f50\",\n    \"cornflowerblue\":       \"#6495ed\",\n    \"cornsilk\":             \"#fff8dc\",\n    \"crimson\":              \"#dc143c\",\n    \"cyan\":                 \"#00ffff\",\n    \"darkblue\":             \"#00008b\",\n    \"darkcyan\":             \"#008b8b\",\n    \"darkgoldenrod\":        \"#b8860b\",\n    \"darkgray\":             \"#a9a9a9\",\n    \"darkgreen\":            \"#006400\",\n    \"darkkhaki\":            \"#bdb76b\",\n    \"darkmagenta\":          \"#8b008b\",\n    \"darkolivegreen\":       \"#556b2f\",\n    \"darkorange\":           \"#ff8c00\",\n    \"darkorchid\":           \"#9932cc\",\n    \"darkred\":              \"#8b0000\",\n    \"darksalmon\":           \"#e9967a\",\n    \"darkseagreen\":         \"#8fbc8f\",\n    \"darkslateblue\":        \"#483d8b\",\n    \"darkslategray\":        \"#2f4f4f\",\n    \"darkturquoise\":        \"#00ced1\",\n    \"darkviolet\":           \"#9400d3\",\n    \"deeppink\":             \"#ff1493\",\n    \"deepskyblue\":          \"#00bfff\",\n    \"dimgray\":              \"#696969\",\n    \"dodgerblue\":           \"#1e90ff\",\n    \"firebrick\":            \"#b22222\",\n    \"floralwhite\":          \"#fffaf0\",\n    \"forestgreen\":          \"#228b22\",\n    \"fuchsia\":              \"#ff00ff\",\n    \"gainsboro\":            \"#dcdcdc\",\n    \"ghostwhite\":           \"#f8f8ff\",\n    \"gold\":                 \"#ffd700\",\n    \"goldenrod\":            \"#daa520\",\n    \"gray\":                 \"#808080\",\n    \"green\":                \"#008000\",\n    \"greenyellow\":          \"#adff2f\",\n    \"honeydew\":             \"#f0fff0\",\n    \"hotpink\":              \"#ff69b4\",\n    \"indianred \":           \"#cd5c5c\",\n    \"indigo\":               \"#4b0082\",\n    \"ivory\":                \"#fffff0\",\n    \"khaki\":                \"#f0e68c\",\n    \"lavender\":             \"#e6e6fa\",\n    \"lavenderblush\":        \"#fff0f5\",\n    \"lawngreen\":            \"#7cfc00\",\n    \"lemonchiffon\":         \"#fffacd\",\n    \"lightblue\":            \"#add8e6\",\n    \"lightcoral\":           \"#f08080\",\n    \"lightcyan\":            \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgrey\":            \"#d3d3d3\",\n    \"lightgreen\":           \"#90ee90\",\n    \"lightpink\":            \"#ffb6c1\",\n    \"lightsalmon\":          \"#ffa07a\",\n    \"lightseagreen\":        \"#20b2aa\",\n    \"lightskyblue\":         \"#87cefa\",\n    \"lightslategray\":       \"#778899\",\n    \"lightsteelblue\":       \"#b0c4de\",\n    \"lightyellow\":          \"#ffffe0\",\n    \"lime\":                 \"#00ff00\",\n    \"limegreen\":            \"#32cd32\",\n    \"linen\":                \"#faf0e6\",\n    \"magenta\":              \"#ff00ff\",\n    \"maroon\":               \"#800000\",\n    \"mediumaquamarine\":     \"#66cdaa\",\n    \"mediumblue\":           \"#0000cd\",\n    \"mediumorchid\":         \"#ba55d3\",\n    \"mediumpurple\":         \"#9370d8\",\n    \"mediumseagreen\":       \"#3cb371\",\n    \"mediumslateblue\":      \"#7b68ee\",\n    \"mediumspringgreen\":    \"#00fa9a\",\n    \"mediumturquoise\":      \"#48d1cc\",\n    \"mediumvioletred\":      \"#c71585\",\n    \"midnightblue\":         \"#191970\",\n    \"mintcream\":            \"#f5fffa\",\n    \"mistyrose\":            \"#ffe4e1\",\n    \"moccasin\":             \"#ffe4b5\",\n    \"navajowhite\":          \"#ffdead\",\n    \"navy\":                 \"#000080\",\n    \"oldlace\":              \"#fdf5e6\",\n    \"olive\":                \"#808000\",\n    \"olivedrab\":            \"#6b8e23\",\n    \"orange\":               \"#ffa500\",\n    \"orangered\":            \"#ff4500\",\n    \"orchid\":               \"#da70d6\",\n    \"palegoldenrod\":        \"#eee8aa\",\n    \"palegreen\":            \"#98fb98\",\n    \"paleturquoise\":        \"#afeeee\",\n    \"palevioletred\":        \"#d87093\",\n    \"papayawhip\":           \"#ffefd5\",\n    \"peachpuff\":            \"#ffdab9\",\n    \"peru\":                 \"#cd853f\",\n    \"pink\":                 \"#ffc0cb\",\n    \"plum\":                 \"#dda0dd\",\n    \"powderblue\":           \"#b0e0e6\",\n    \"purple\":               \"#800080\",\n    \"rebeccapurple\":        \"#663399\",\n    \"red\":                  \"#ff0000\",\n    \"rosybrown\":            \"#bc8f8f\",\n    \"royalblue\":            \"#4169e1\",\n    \"saddlebrown\":          \"#8b4513\",\n    \"salmon\":               \"#fa8072\",\n    \"sandybrown\":           \"#f4a460\",\n    \"seagreen\":             \"#2e8b57\",\n    \"seashell\":             \"#fff5ee\",\n    \"sienna\":               \"#a0522d\",\n    \"silver\":               \"#c0c0c0\",\n    \"skyblue\":              \"#87ceeb\",\n    \"slateblue\":            \"#6a5acd\",\n    \"slategray\":            \"#708090\",\n    \"snow\":                 \"#fffafa\",\n    \"springgreen\":          \"#00ff7f\",\n    \"steelblue\":            \"#4682b4\",\n    \"tan\":                  \"#d2b48c\",\n    \"teal\":                 \"#008080\",\n    \"thistle\":              \"#d8bfd8\",\n    \"tomato\":               \"#ff6347\",\n    \"turquoise\":            \"#40e0d0\",\n    \"violet\":               \"#ee82ee\",\n    \"wheat\":                \"#f5deb3\",\n    \"white\":                \"#ffffff\",\n    \"whitesmoke\":           \"#f5f5f5\",\n    \"yellow\":               \"#ffff00\",\n    \"yellowgreen\":          \"#9acd32\"\n};\n\nLED.STATE = {\n    OFF:        0,\n    ON:         1\n};\n\nLED.FLAGS = {\n    NONE:       0x00,\n    SET:        0x81,\n    PERIOD:     0x01,\n    MODIFIED:   0x80,\n};\n\nLED.SHAPES = {\n    [LED.TYPE.ROUND]:   [16, 16, 14],\n    [LED.TYPE.SQUARE]:  [2, 2, 28, 28]\n};\n\nLED.SIZES = [\n    [],\n    [32,  32],          // LED.TYPE.ROUND\n    [32,  32],          // LED.TYPE.SQUARE\n    [96, 128]           // LED.TYPE.DIGIT\n];\n\n/*\n * The segments are arranged roughly as follows, in a 96x128 grid:\n *\n *      AAAA\n *     F    B\n *     F    B\n *      GGGG\n *     E    C\n *     E    C\n *      DDDD P\n *\n * The following arrays specify pairs of moveTo()/lineTo() coordinates, used by drawGridSegment().  They all\n * assume the hard-coded width and height in LED.SIZES[LED.TYPE.DIGIT] specified above.  If there is a triplet\n * instead of one or more pairs (eg, the 'P' or period segment), then the coordinates are treated as arc()\n * parameters.\n */\nLED.SEGMENTS = {\n    'A':        [30,   8,  79,   8,  67,  19,  37,  19],\n    'B':        [83,  10,  77,  52,  67,  46,  70,  22],\n    'C':        [77,  59,  71, 100,  61,  89,  64,  64],\n    'D':        [28,  91,  58,  91,  69, 104,  15, 104],\n    'E':        [18,  59,  28,  64,  25,  88,  12, 100],\n    'F':        [24,  10,  34,  21,  31,  47,  18,  52],\n    'G':        [24,  56,  34,  50,  60,  50,  71,  56,  61,  61,  33,  61],\n    'P':        [80, 102,  8]\n};\n\n/*\n * Segmented symbols are formed with the following segments.\n */\nLED.SYMBOL_SEGMENTS = {\n    ' ':        [],\n    '0':        ['A','B','C','D','E','F'],\n    '1':        ['B','C'],\n    '2':        ['A','B','D','E','G'],\n    '3':        ['A','B','C','D','G'],\n    '4':        ['B','C','F','G'],\n    '5':        ['A','C','D','F','G'],\n    '6':        ['A','C','D','E','F','G'],\n    '7':        ['A','B','C'],\n    '8':        ['A','B','C','D','E','F','G'],\n    '9':        ['A','B','C','D','F','G'],\n    '-':        ['G'],\n    'E':        ['A','D','E','F','G'],\n    '.':        ['P']\n};\n\nLED.VERSION     = 1.11;\n\n/**\n * @copyright http://pcjs.org/modules/devices/rom.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), wordSize: number, valueSize: number, valueTotal: number, littleEndian: boolean, file: string, reference: string, chipID: string, revision: (number|undefined), colorROM: (string|undefined), backgroundColorROM: (string|undefined), values: Array.<number> }} */\nvar ROMConfig;\n\n/**\n * @class {ROM}\n * @unrestricted\n * @property {ROMConfig} config\n * @property {Array.<number>} data\n * @property {number} addrMask\n */\nclass ROM extends Device {\n    /**\n     * ROM(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"rom\": {\n     *        \"class\": \"ROM\",\n     *        \"wordSize\": 13,\n     *        \"valueSize\": 16,\n     *        \"valueTotal\": 2048,\n     *        \"littleEndian\": true,\n     *        \"file\": \"ti57le.bin\",\n     *        \"reference\": \"\",\n     *        \"chipID\": \"TMC1501NC DI 7741\",\n     *        \"revision\": \"0\",\n     *        \"bindings\": {\n     *          \"array\": \"romArrayTI57\",\n     *          \"cellDesc\": \"romCellTI57\"\n     *        },\n     *        \"overrides\": [\"colorROM\",\"backgroundColorROM\"],\n     *        \"values\": [\n     *          ...\n     *        ]\n     *      }\n     *\n     * @this {ROM}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {ROMConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, ROM.VERSION, config);\n\n        this.data = config['values'];\n\n        /*\n         * This addrMask calculation assumes that the data array length is a power-of-two (which we assert).\n         */\n        this.addrMask = this.data.length - 1;\n\n\n        /*\n         * If an \"array\" binding has been supplied, then create an LED array sufficiently large to represent the\n         * entire ROM.  If the power-of-two is odd, then we will favor a slightly wider array over a taller one,\n         * by virtue of using Math.ceil() for cols and Math.floor() for rows.\n         */\n        if (this.bindings[ROM.BINDING.ARRAY]) {\n            let rom = this;\n            let addrLines = Math.log2(this.data.length) / 2;\n            this.cols = Math.pow(2, Math.ceil(addrLines));\n            this.rows = Math.pow(2, Math.floor(addrLines));\n            let configLEDs = {\n                \"class\":            \"LED\",\n                \"bindings\":         {\"container\": this.getBindingID(ROM.BINDING.ARRAY)},\n                \"type\":             LED.TYPE.ROUND,\n                \"cols\":             this.cols,\n                \"rows\":             this.rows,\n                \"color\":            this.getDefaultString('colorROM', \"green\"),\n                \"backgroundColor\":  this.getDefaultString('backgroundColorROM', \"black\"),\n                \"persistent\":       true\n            };\n            this.ledArray = new LED(idMachine, idDevice + \"LEDs\", configLEDs);\n            this.clearArray();\n            let configInput = {\n                \"class\":        \"Input\",\n                \"location\":     [0, 0, this.ledArray.widthView, this.ledArray.heightView, this.cols, this.rows],\n                \"bindings\":     {\"surface\": this.getBindingID(ROM.BINDING.ARRAY)}\n            };\n            this.ledInput = new Input(idMachine, idDevice + \"Input\", configInput);\n            this.sCellDesc = this.getBindingText(ROM.BINDING.CELLDESC);\n            this.ledInput.addHover(function onROMHover(col, row) {\n                if (rom.chip) {\n                    let sDesc = rom.sCellDesc;\n                    if (col >= 0 && row >= 0) {\n                        let addr = row * rom.cols + col;\n\n                        let opCode = rom.data[addr];\n                        sDesc = rom.chip.disassemble(opCode, addr);\n                    }\n                    rom.setBindingText(ROM.BINDING.CELLDESC, sDesc);\n                }\n            });\n        }\n    }\n\n    /**\n     * clearArray()\n     *\n     * clearBuffer(true) performs a combination of clearBuffer() and drawBuffer().\n     *\n     * @this {ROM}\n     */\n    clearArray()\n    {\n        if (this.ledArray) this.ledArray.clearBuffer(true);\n    }\n\n    /**\n     * drawArray()\n     *\n     * This performs a simple drawBuffer(); intended for synchronous updates (eg, step operations);\n     * otherwise, you should allow the LED object's async animation handler take care of drawing updates.\n     *\n     * @this {ROM}\n     */\n    drawArray()\n    {\n        if (this.ledArray) this.ledArray.drawBuffer();\n    }\n\n    /**\n     * getData(addr, fInternal)\n     *\n     * Set fInternal to true if an internal caller (eg, the disassembler) is accessing the ROM, to avoid touching\n     * the ledArray.\n     *\n     * @this {ROM}\n     * @param {number} addr\n     * @param {boolean} [fInternal]\n     * @returns {number|undefined}\n     */\n    getData(addr, fInternal)\n    {\n        if (this.ledArray && !fInternal) {\n            this.ledArray.setLEDState(addr % this.cols, (addr / this.cols)|0, LED.STATE.ON, LED.FLAGS.MODIFIED);\n        }\n        return this.data[addr];\n    }\n\n    /**\n     * loadState(state)\n     *\n     * If any saved values don't match (presumably overridden), abandon the given state and return false.\n     * \n     * @this {ROM}\n     * @param {Array} state\n     * @returns {boolean}\n     */\n    loadState(state)\n    {\n        let buffer = state.shift();\n        if (buffer && this.ledArray) {\n\n            if (this.ledArray.buffer.length == buffer.length) {\n                this.ledArray.buffer = buffer;\n                this.ledArray.drawBuffer(true);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * saveState(state)\n     *\n     * @this {ROM}\n     * @param {Array} state\n     */\n    saveState(state)\n    {\n        if (this.ledArray) {\n            state.push(this.ledArray.buffer);\n        }\n    }\n\n    /**\n     * setChip()\n     *\n     * @this {ROM}\n     * @param {Chip} chip\n     */\n    setChip(chip)\n    {\n        this.chip = chip;\n    }\n}\n\nROM.BINDING = {\n    ARRAY:      \"array\",\n    CELLDESC:   \"cellDesc\"\n};\n\nROM.VERSION     = 1.11;\n\n/**\n * @copyright http://pcjs.org/modules/devices/time.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ id: string, callBack: function(), msAuto: number, nCyclesLeft: number }} */\nvar Timer;\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), cyclesMinimum: (number|undefined), cyclesMaximum: (number|undefined), cyclesPerSecond: (number|undefined), yieldsPerSecond: (number|undefined), yieldsPerUpdate: (number|undefined), requestAnimationFrame: (boolean|undefined) }} */\nvar TimeConfig;\n\n/**\n * @class {Time}\n * @unrestricted\n * @property {TimeConfig} config\n * @property {number} nCyclesMinimum\n * @property {number} nCyclesMaximum\n * @property {number} nCyclesPerSecond\n * @property {number} nYieldsPerSecond\n * @property {number} nYieldsPerUpdate\n */\nclass Time extends Device {\n    /**\n     * Time(idMachine, idDevice, config)\n     *\n     * Sample config:\n     *\n     *      \"clock\": {\n     *        \"class\": \"Time\",\n     *        \"cyclesPerSecond\": 650000,\n     *        \"bindings\": {\n     *          \"run\": \"runTI57\",\n     *          \"speed\": \"speedTI57\",\n     *          \"step\": \"stepTI57\"\n     *        },\n     *        \"overrides\": [\"cyclesPerSecond\",\"yieldsPerSecond\",\"yieldsPerUpdate\"]\n     *      }\n     *\n     * @this {Time}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {TimeConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, Time.VERSION, config);\n\n        /*\n         * NOTE: The default speed of 650,000Hz (0.65Mhz) was a crude approximation based on real world TI-57\n         * device timings.  I had originally assumed the speed as 1,600,000Hz (1.6Mhz), based on timing information\n         * in TI's patents, but in hindsight, that speed seems rather high for a mid-1970's device, and reality\n         * suggests it was much lower.  The TMS-1500 does burn through a lot of cycles (minimum of 128) per instruction,\n         * but either that cycle burn was much higher, or the underlying clock speed was much lower.  I assume the latter.\n         */\n        this.nCyclesMinimum = this.getDefaultNumber('cyclesMinimum', 100000);\n        this.nCyclesMaximum = this.getDefaultNumber('cyclesMaximum', 3000000);\n        this.nCyclesPerSecond = this.getBounded(this.getDefaultNumber('cyclesPerSecond', 650000), this.nCyclesMinimum, this.nCyclesMaximum);\n        this.nYieldsPerSecond = this.getBounded(this.getDefaultNumber('yieldsPerSecond', Time.YIELDS_PER_SECOND), 30, 120);\n        this.nYieldsPerUpdate = this.getBounded(this.getDefaultNumber('yieldsPerUpdate', Time.YIELDS_PER_UPDATE), 1, this.nYieldsPerSecond);\n        this.fRequestAnimationFrame = this.getDefaultBoolean('requestAnimationFrame', true);\n\n        this.nBaseMultiplier = this.nCurrentMultiplier = this.nTargetMultiplier = 1;\n        this.mhzBase = (this.nCyclesPerSecond / 10000) / 100;\n        this.mhzCurrent = this.mhzTarget = this.mhzBase * this.nTargetMultiplier;\n        this.nYields = 0;\n        this.msYield = Math.round(1000 / this.nYieldsPerSecond);\n        this.aAnimators = [];\n        this.aClockers = [];\n        this.aTimers = [];\n        this.aUpdaters = [];\n        this.fRunning = this.fYield = this.fThrottling = false;\n        this.nStepping = 0;\n        this.idRunTimeout = this.idStepTimeout = 0;\n        this.onRunTimeout = this.run.bind(this);\n        this.onAnimationFrame = this.animate.bind(this);\n        this.requestAnimationFrame = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.setTimeout).bind(window);\n\n        let time = this;\n        this.timerYield = this.addTimer(\"timerYield\", function onYield() {\n            time.onYield();\n        }, this.msYield);\n\n        this.resetSpeed();\n    }\n\n    /**\n     * addAnimator(callBack)\n     *\n     * Animators are functions that used to be called with YIELDS_PER_SECOND frequency, when animate()\n     * was called on every onYield() call, but now we rely on requestAnimationFrame(), so the frequency\n     * is browser-dependent (but presumably at least 60Hz).\n     *\n     * @this {Time}\n     * @param {function()} callBack\n     */\n    addAnimator(callBack)\n    {\n        this.aAnimators.push(callBack);\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Time}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let time = this;\n\n        switch(binding) {\n\n        case Time.BINDING.RUN:\n            element.onclick = function onClickRun() {\n                time.onRun();\n            };\n            break;\n\n        case Time.BINDING.STEP:\n            element.onclick = function onClickStep() {\n                time.onStep();\n            };\n            break;\n\n        case Time.BINDING.THROTTLE:\n            let elementInput = /** @type {HTMLInputElement} */ (element);\n            elementInput.addEventListener(\"mousedown\", function onThrottleStart() {\n                time.fThrottling = true;\n            });\n            elementInput.addEventListener(\"mouseup\", function onThrottleStop() {\n                time.setSpeedThrottle();\n                time.fThrottling = false;\n            });\n            elementInput.addEventListener(\"mousemove\", function onThrottleChange() {\n                if (time.fThrottling) {\n                    time.setSpeedThrottle();\n                }\n            });\n            elementInput.addEventListener(\"change\", function onThrottleChange() {\n                time.fThrottling = true;\n                time.setSpeedThrottle();\n                time.fThrottling = false;\n            });\n            break;\n        }\n        super.addBinding(binding, element);\n    }\n\n    /**\n     * addClocker(callBack)\n     *\n     * Adds a clocker function that's called from doBurst() to process a specified number of cycles.\n     *\n     * @this {Time}\n     * @param {function(number)} callBack\n     */\n    addClocker(callBack)\n    {\n        this.aClockers.push(callBack);\n    }\n\n    /**\n     * addTimer(id, callBack, msAuto)\n     *\n     * Devices that want to have timers that fire after some number of milliseconds call addTimer() to create\n     * the timer, and then setTimer() when they want to arm it.  Alternatively, they can specify an automatic\n     * timeout value (in milliseconds) to have the timer fire automatically at regular intervals.  There is\n     * currently no removeTimer() because these are generally used for the entire lifetime of a device.\n     *\n     * A timer is initially dormant; dormant timers have a cycle count of -1 (although any negative number will\n     * suffice) and active timers have a non-negative cycle count.\n     *\n     * @this {Time}\n     * @param {string} id\n     * @param {function()} callBack\n     * @param {number} [msAuto] (if set, enables automatic setTimer calls)\n     * @returns {number} timer index (1-based)\n     */\n    addTimer(id, callBack, msAuto = -1)\n    {\n        let nCyclesLeft = -1;\n        let iTimer = this.aTimers.length + 1;\n        this.aTimers.push({id, callBack, msAuto, nCyclesLeft});\n        if (msAuto >= 0) this.setTimer(iTimer, msAuto);\n        return iTimer;\n    }\n\n    /**\n     * addUpdater(callBack)\n     *\n     * Adds a status update function that's called from updateStatus(), either as the result\n     * of periodic status updates from onYield(), single-step updates from step(), or transitional\n     * updates from start() and stop().\n     *\n     * @this {Time}\n     * @param {function(boolean)} callBack\n     */\n    addUpdater(callBack)\n    {\n        this.aUpdaters.push(callBack);\n    }\n\n    /**\n     * animate()\n     *\n     * This is the callback function we supply to requestAnimationFrame().  The callback has a single\n     * (DOMHighResTimeStamp) argument, which indicates the current time (returned from performance.now())\n     * for when requestAnimationFrame() starts to fire callbacks.\n     *\n     * See: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame\n     *\n     * @this {Time}\n     * @param {number} [t]\n     */\n    animate(t)\n    {\n        for (let i = 0; i < this.aAnimators.length; i++) {\n            this.aAnimators[i]();\n        }\n        if (this.fRunning && this.fRequestAnimationFrame) this.requestAnimationFrame(this.onAnimationFrame);\n    }\n\n    /**\n     * calcCycles()\n     *\n     * Calculate the maximum number of cycles we should attempt to process before the next yield.\n     *\n     * @this {Time}\n     */\n    calcCycles()\n    {\n        let nMultiplier = this.mhzCurrent / this.mhzBase;\n        if (!nMultiplier || nMultiplier > this.nTargetMultiplier) {\n            nMultiplier = this.nTargetMultiplier;\n        }\n        /*\n         * nCyclesPerYield is now allowed to be a fractional number, so that for machines configured\n         * to run at an extremely slow speed (eg, less than 60Hz), a fractional value here will signal\n         * to snapStop() that it should increase msYield to a proportionally higher value.\n         */\n        this.nCyclesPerYield = (this.nCyclesPerSecond / this.nYieldsPerSecond * nMultiplier);\n        this.nCurrentMultiplier = nMultiplier;\n    }\n\n    /**\n     * calcSpeed(nCycles, msElapsed)\n     *\n     * @this {Time}\n     * @param {number} nCycles\n     * @param {number} msElapsed\n     */\n    calcSpeed(nCycles, msElapsed)\n    {\n        if (msElapsed) {\n            this.mhzCurrent = (nCycles / (msElapsed * 10)) / 100;\n        }\n    }\n\n    /**\n     * doBurst(nCycles, fStep)\n     *\n     * @this {Time}\n     * @param {number} nCycles\n     * @param {boolean} [fStep]\n     * @returns {number} (number of cycles actually executed)\n     */\n    doBurst(nCycles, fStep)\n    {\n        this.nCyclesBurst = this.nCyclesRemain = nCycles;\n        if (!this.aClockers.length) {\n            this.nCyclesRemain = 0;\n            return this.nCyclesBurst;\n        }\n        let iClocker = 0;\n        while (this.nCyclesRemain > 0) {\n            if (iClocker < this.aClockers.length) {\n                nCycles = this.aClockers[iClocker++](fStep? 0 : nCycles) || 1;\n            } else {\n                iClocker = nCycles = 0;\n            }\n            this.nCyclesRemain -= nCycles;\n        }\n        return this.nCyclesBurst - this.nCyclesRemain;\n    }\n\n    /**\n     * doOutside(fn)\n     *\n     * Use this function to perform any work outside of normal time (eg, DOM updates),\n     * to prevent that work from disrupting our speed calculations.\n     *\n     * @this {Time}\n     * @param {function()} fn (should return true only if the function actually performed any work)\n     * @returns {boolean}\n     */\n    doOutside(fn)\n    {\n        let msStart = Date.now();\n        if (fn()) {\n            let msStop = Date.now();\n            this.msOutsideThisRun += msStop - msStart;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * endBurst(nCycles)\n     *\n     * @this {Time}\n     * @param {number} [nCycles]\n     * @returns {number} (number of cycles executed in burst)\n     */\n    endBurst(nCycles = this.nCyclesBurst - this.nCyclesRemain)\n    {\n        this.nCyclesBurst = this.nCyclesRemain = 0;\n        this.nCyclesThisRun += nCycles;\n        this.nCyclesRun += nCycles;\n        if (!this.fRunning) this.nCyclesRun = 0;\n        return nCycles;\n    }\n\n    /**\n     * getCycles(ms)\n     *\n     * If no time period is specified, this returns the current number of cycles per second.\n     *\n     * @this {Time}\n     * @param {number} ms (default is 1000)\n     * @returns {number} number of corresponding cycles\n     */\n    getCycles(ms = 1000)\n    {\n        return Math.ceil((this.nCyclesPerSecond * this.nCurrentMultiplier) / 1000 * ms);\n    }\n\n    /**\n     * getCyclesPerBurst()\n     *\n     * This tells us how many cycles to execute as a burst.\n     *\n     * @this {Time}\n     * @returns {number} (the maximum number of cycles we should execute in the next burst)\n     */\n    getCyclesPerBurst()\n    {\n        let nCycles = this.getCycles(this.msYield);\n        for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n            let timer = this.aTimers[iTimer-1];\n\n            if (timer.nCyclesLeft < 0) continue;\n            if (nCycles > timer.nCyclesLeft) {\n                nCycles = timer.nCyclesLeft;\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * getSpeed(mhz)\n     *\n     * @this {Time}\n     * @param {number} mhz\n     * @returns {string} the given speed, as a formatted string\n     */\n    getSpeed(mhz)\n    {\n        let s;\n        if (mhz >= 1) {\n            s = mhz.toFixed(2) + \"Mhz\";\n        } else {\n            let hz = Math.round(mhz * 1000000);\n            if (hz <= 999) {\n                s = hz + \"Hz\";\n            } else {\n                s = Math.ceil(hz / 1000) + \"Khz\";\n            }\n        }\n        return s;\n    }\n\n    /**\n     * getSpeedCurrent()\n     *\n     * @this {Time}\n     * @returns {string} the current speed, as a formatted string\n     */\n    getSpeedCurrent()\n    {\n        return (this.fRunning && this.mhzCurrent)? this.getSpeed(this.mhzCurrent) : \"Stopped\";\n    }\n\n    /**\n     * getSpeedTarget()\n     *\n     * @this {Time}\n     * @returns {string} the target speed, as a formatted string\n     */\n    getSpeedTarget()\n    {\n        return this.getSpeed(this.mhzTarget);\n    }\n\n    /**\n     * isRunning()\n     *\n     * @this {Time}\n     * @returns {boolean}\n     */\n    isRunning()\n    {\n        return this.fRunning;\n    }\n\n    /**\n     * isTimerSet(iTimer)\n     *\n     * NOTE: Even if the timer is armed, we return false if the clock is currently stopped;\n     * in that sense, perhaps this function should be named isTimerArmedAndWillItFireOnTime().\n     *\n     * @this {Time}\n     * @param {number} iTimer\n     * @returns {boolean}\n     */\n    isTimerSet(iTimer)\n    {\n        if (this.fRunning) {\n            if (iTimer > 0 && iTimer <= this.aTimers.length) {\n                let timer = this.aTimers[iTimer - 1];\n                return (timer.nCyclesLeft >= 0);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * onRun()\n     *\n     * This handles the \"run\" button, if any, attached to the Time device.\n     *\n     * Note that this serves a different purpose than the \"power\" button that's managed by the Input device,\n     * because toggling power also requires resetting the program counter prior to start() OR clearing the display\n     * after stop().  See the Chip's onPower() function for details.\n     *\n     * @this {Time}\n     */\n    onRun()\n    {\n        if (this.fRunning) {\n            this.stop();\n        } else {\n            this.start();\n        }\n    }\n\n    /**\n     * onStep(nRepeat)\n     *\n     * This handles the \"step\" button, if any, attached to the Time device.\n     *\n     * @this {Time}\n     * @param {number} [nRepeat]\n     */\n    onStep(nRepeat)\n    {\n        if (!this.fRunning) {\n            if (this.nStepping) {\n                this.stop();\n            } else {\n                this.step(nRepeat);\n            }\n        } else {\n            this.println(\"already running\");\n        }\n    }\n\n    /**\n     * onYield()\n     *\n     * @this {Time}\n     */\n    onYield()\n    {\n        this.fYield = true;\n        let nYields = this.nYields;\n        let nCyclesPerSecond = this.getCycles();\n        if (nCyclesPerSecond >= this.nYieldsPerSecond) {\n            this.nYields++;\n        } else {\n            /*\n             * Let's imagine that nCyclesPerSecond has dropped to 4, whereas the usual nYieldsPerSecond is 60;\n             * that's means we're yielding at 1/15th the usual rate, so to compensate, we want to bump nYields\n             * by 15 instead of 1.\n             */\n            this.nYields += Math.ceil(this.nYieldsPerSecond / nCyclesPerSecond);\n        }\n        if (this.nYields >= this.nYieldsPerUpdate && nYields < this.nYieldsPerUpdate) {\n            this.updateStatus();\n        }\n        if (this.nYields >= this.nYieldsPerSecond) {\n            this.nYields = 0;\n        }\n    }\n\n    /**\n     * resetSpeed()\n     *\n     * Resets speed and cycle information as part of any reset() or restore(); this typically occurs during powerUp().\n     * It's important that this be called BEFORE the actual restore() call, because restore() may want to call setSpeed(),\n     * which in turn assumes that all the cycle counts have been initialized to sensible values.\n     *\n     * @this {Time}\n     */\n    resetSpeed()\n    {\n        this.nCyclesRun = this.nCyclesBurst = this.nCyclesRemain = 0;\n        if (!this.setSpeedThrottle()) this.setSpeed(this.nBaseMultiplier);\n    }\n\n    /**\n     * resetTimers()\n     *\n     * When the target speed multiplier is altered, it's a good idea to run through all the timers that\n     * have a fixed millisecond period and re-arm them, because the timers are using cycle counts that were based\n     * on a previous multiplier.\n     *\n     * @this {Time}\n     */\n    resetTimers()\n    {\n        for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n            let timer = this.aTimers[iTimer-1];\n            if (timer.msAuto >= 0) this.setTimer(iTimer, timer.msAuto, true);\n        }\n    }\n\n    /**\n     * run()\n     *\n     * @this {Time}\n     */\n    run()\n    {\n        this.idRunTimeout = 0;\n        if (!this.fRunning) return;\n        this.snapStart();\n        try {\n            this.fYield = false;\n            do {\n                /*\n                 * Execute the burst and then update all timers.\n                 */\n                this.updateTimers(this.endBurst(this.doBurst(this.getCyclesPerBurst())));\n\n            } while (this.fRunning && !this.fYield);\n        }\n        catch(err) {\n            this.println(err.message);\n            this.stop();\n            return;\n        }\n        if (this.fRunning) {\n\n            this.idRunTimeout = setTimeout(this.onRunTimeout, this.snapStop());\n            if (!this.fRequestAnimationFrame) this.animate();\n        }\n    }\n\n    /**\n     * setSpeedThrottle()\n     *\n     * This handles speed adjustments requested by the throttling slider.\n     *\n     * @this {Time}\n     * @returns {boolean}\n     */\n    setSpeedThrottle()\n    {\n        /*\n         * We're not going to assume any direct relationship between the slider's min/max/value\n         * and our own nCyclesMinimum/nCyclesMaximum/nCyclesPerSecond.  We're just going to calculate\n         * a new target nCyclesPerSecond that is proportional, and then convert that to a speed multiplier.\n         */\n        let elementInput = this.bindings[Time.BINDING.THROTTLE];\n        if (elementInput) {\n            let ratio = (elementInput.value - elementInput.min) / (elementInput.max - elementInput.min);\n            let nCycles = Math.floor((this.nCyclesMaximum - this.nCyclesMinimum) * ratio + this.nCyclesMinimum);\n            let nMultiplier = nCycles / this.nCyclesPerSecond;\n\n            this.setSpeed(nMultiplier);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * setSpeed(nMultiplier)\n     *\n     * @this {Time}\n     * @param {number} [nMultiplier] is the new proposed multiplier (reverts to default if target was too high)\n     * @returns {boolean} true if successful, false if not\n     *\n     * @desc Whenever the speed is changed, the running cycle count and corresponding start time must be reset,\n     * so that the next effective speed calculation obtains sensible results.  In fact, when run() initially calls\n     * setSpeed() with no parameters, that's all this function does (it doesn't change the current speed setting).\n     */\n    setSpeed(nMultiplier)\n    {\n        let fSuccess = true;\n        if (nMultiplier !== undefined) {\n            /*\n             * If we haven't reached 90% (0.9) of the current target speed, revert to the default multiplier.\n             */\n            if (!this.fThrottling && this.mhzCurrent > 0 && this.mhzCurrent < this.mhzTarget * 0.9) {\n                nMultiplier = this.nBaseMultiplier;\n                fSuccess = false;\n            }\n            this.nTargetMultiplier = nMultiplier;\n            let mhzTarget = this.mhzBase * this.nTargetMultiplier;\n            if (this.mhzTarget != mhzTarget) {\n                this.mhzTarget = mhzTarget;\n                this.setBindingText(Time.BINDING.SPEED, this.getSpeedTarget());\n            }\n            /*\n             * After every yield, calcSpeed() will update mhzCurrent, but we also need to be optimistic\n             * and set it to the mhzTarget now, so that the next calcCycles() call will make a reasonable\n             * initial estimate.\n             */\n            this.mhzCurrent = this.mhzTarget;\n        }\n        this.nCyclesRun = 0;\n        this.msStartRun = this.msEndRun = 0;\n        this.calcCycles();      // calculate a new value for the current cycle multiplier\n        this.resetTimers();     // and then update all the fixed-period timers using the new cycle multiplier\n        return fSuccess;\n    }\n\n    /**\n     * setTimer(iTimer, ms, fReset)\n     *\n     * Using the timer index from a previous addTimer() call, this sets that timer to fire after the\n     * specified number of milliseconds.\n     *\n     * @this {Time}\n     * @param {number} iTimer\n     * @param {number} ms (converted into a cycle countdown internally)\n     * @param {boolean} [fReset] (true if the timer should be reset even if already armed)\n     * @returns {number} (number of cycles used to arm timer, or -1 if error)\n     */\n    setTimer(iTimer, ms, fReset)\n    {\n        let nCycles = -1;\n        if (iTimer > 0 && iTimer <= this.aTimers.length) {\n            let timer = this.aTimers[iTimer-1];\n            if (fReset || timer.nCyclesLeft < 0) {\n                nCycles = this.getCycles(ms);\n                /*\n                 * If we're currently executing a burst of cycles, the number of cycles it has executed in\n                 * that burst so far must NOT be charged against the cycle timeout we're about to set.  The simplest\n                 * way to resolve that is to immediately call endBurst() and bias the cycle timeout by the number\n                 * of cycles that the burst executed.\n                 */\n                if (this.fRunning) {\n                    nCycles += this.endBurst();\n                }\n                timer.nCyclesLeft = nCycles;\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * snapStart()\n     *\n     * @this {Time}\n     */\n    snapStart()\n    {\n        this.calcCycles();\n\n        this.nCyclesThisRun = 0;\n        this.msOutsideThisRun = 0;\n        this.msStartThisRun = Date.now();\n        if (!this.msStartRun) this.msStartRun = this.msStartThisRun;\n\n        /*\n         * Try to detect situations where the browser may have throttled us, such as when the user switches\n         * to a different tab; in those situations, Chrome and Safari may restrict setTimeout() callbacks\n         * to roughly one per second.\n         *\n         * Another scenario: the user resizes the browser window.  setTimeout() callbacks are not throttled,\n         * but there can still be enough of a lag between the callbacks that speed will be noticeably\n         * erratic if we don't compensate for it here.\n         *\n         * We can detect throttling/lagging by verifying that msEndRun (which was set at the end of the\n         * previous run and includes any requested sleep time) is comparable to the current msStartThisRun;\n         * if the delta is significant, we compensate by bumping msStartRun forward by that delta.\n         *\n         * This shouldn't be triggered when the Debugger stops time, because setSpeed() -- which is called\n         * whenever the time starts again -- zeroes msEndRun.\n         */\n        let msDelta = 0;\n        if (this.msEndRun) {\n            msDelta = this.msStartThisRun - this.msEndRun;\n            if (msDelta > this.msYield) {\n                this.msStartRun += msDelta;\n                /*\n                 * Bumping msStartRun forward should NEVER cause it to exceed msStartThisRun; however, just\n                 * in case, I make absolutely sure it cannot happen, since doing so could result in negative\n                 * speed calculations.\n                 */\n\n                if (this.msStartRun > this.msStartThisRun) {\n                    this.msStartRun = this.msStartThisRun;\n                }\n            }\n        }\n    }\n\n    /**\n     * snapStop()\n     *\n     * @this {Time}\n     * @returns {number}\n     */\n    snapStop()\n    {\n        this.msEndRun = Date.now();\n\n        if (this.msOutsideThisRun) {\n            this.msStartRun += this.msOutsideThisRun;\n            this.msStartThisRun += this.msOutsideThisRun;\n        }\n\n        let msYield = this.msYield;\n        if (this.nCyclesThisRun) {\n            /*\n             * Normally, we assume we executed a full quota of work over msYield.  If nCyclesThisRun is correct,\n             * then the ratio of nCyclesThisRun/nCyclesPerYield should represent the percentage of work we performed,\n             * and so applying that percentage to msYield should give us a better estimate of work vs. time.\n             */\n            msYield = Math.round(msYield * this.nCyclesThisRun / this.nCyclesPerYield);\n        }\n\n        let msElapsedThisRun = this.msEndRun - this.msStartThisRun;\n        let msRemainsThisRun = msYield - msElapsedThisRun;\n\n        let nCycles = this.nCyclesRun;\n        let msElapsed = this.msEndRun - this.msStartRun;\n\n        if (DEBUG && msRemainsThisRun < 0 && this.nTargetMultiplier > 1) {\n            this.println(\"warning: updates @\" + msElapsedThisRun + \"ms (prefer \" + Math.round(msYield) + \"ms)\");\n        }\n\n        this.calcSpeed(nCycles, msElapsed);\n\n        if (msRemainsThisRun < 0) {\n            /*\n             * Try \"throwing out\" the effects of large anomalies, by moving the overall run start time up;\n             * ordinarily, this should only happen when the someone is using an external Debugger or some other\n             * tool or feature that is interfering with our overall execution.\n             */\n            if (msRemainsThisRun < -1000) {\n                this.msStartRun -= msRemainsThisRun;\n            }\n            /*\n             * If the last burst took MORE time than we allotted (ie, it's taking more than 1 second to simulate\n             * nCyclesPerSecond), all we can do is yield for as little time as possible (ie, 0ms) and hope that the\n             * simulation is at least usable.\n             */\n            msRemainsThisRun = 0;\n        }\n        else if (this.mhzCurrent < this.mhzTarget) {\n            msRemainsThisRun = 0;\n        }\n\n        this.msEndRun += msRemainsThisRun;\n\n        if (this.isCategoryOn(Device.CATEGORY.TIME)) {\n            this.printf(\"after running %d cycles, resting for %dms\\n\", this.nCyclesThisRun, msRemainsThisRun);\n        }\n\n        return msRemainsThisRun;\n    }\n\n    /**\n     * start()\n     *\n     * @this {Time}\n     * @returns {boolean}\n     */\n    start()\n    {\n        if (this.fRunning || this.nStepping) {\n            return false;\n        }\n\n        if (this.idRunTimeout) {\n            clearTimeout(this.idRunTimeout);\n            this.idRunTimeout = 0;\n        }\n\n        this.fRunning = true;\n        this.msStartRun = this.msEndRun = 0;\n        this.updateStatus(true);\n\n        /*\n         * Kickstart both the clockers and requestAnimationFrame; it's a little premature to start\n         * animation here, because the first run() should take place before the first animate(), but\n         * since clock speed is now decoupled from animation speed, this isn't something we should\n         * worry about.\n         */\n\n        this.idRunTimeout = setTimeout(this.onRunTimeout, 0);\n        if (this.fRequestAnimationFrame) this.requestAnimationFrame(this.onAnimationFrame);\n        return true;\n    }\n\n    /**\n     * step(nRepeat)\n     *\n     * @this {Time}\n     * @param {number} [nRepeat]\n     * @returns {boolean} true if successful, false if already running\n     */\n    step(nRepeat = 1)\n    {\n        if (!this.fRunning) {\n            if (nRepeat && !this.nStepping) {\n                this.nStepping = nRepeat;\n            }\n            if (this.nStepping) {\n                /*\n                 * Execute a minimum-cycle burst and then update all timers.\n                 */\n                this.nStepping--;\n                this.updateTimers(this.endBurst(this.doBurst(1, true)));\n                this.updateStatus();\n                if (this.nStepping) {\n                    let time = this;\n                    this.idStepTimeout = setTimeout(function onStepTimeout() {\n                        time.step(0);\n                    }, 0);\n                    return true;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * stop()\n     *\n     * @this {Time}\n     * @returns {boolean} true if successful, false if already stopped\n     */\n    stop()\n    {\n        if (this.nStepping) {\n            this.nStepping = 0;\n            this.updateStatus(true);\n            return true;\n        }\n        if (this.fRunning) {\n            this.fRunning = false;\n            this.endBurst();\n            this.updateStatus(true);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * updateStatus(fTransition)\n     *\n     * Used for periodic status updates from onYield(), single-step updates from step(), and transitional\n     * updates from start() and stop().\n     *\n     * @this {Time}\n     * @param {boolean} [fTransition]\n     */\n    updateStatus(fTransition)\n    {\n        if (fTransition) {\n            if (this.fRunning) {\n                this.println(\"starting (target speed: \" + this.getSpeedTarget() + \")\");\n            } else {\n                this.println(\"stopping\");\n            }\n        }\n\n        this.setBindingText(Time.BINDING.RUN, this.fRunning? \"Halt\" : \"Run\");\n        this.setBindingText(Time.BINDING.STEP, this.nStepping? \"Stop\" : \"Step\");\n        if (!this.fThrottling) {\n            this.setBindingText(Time.BINDING.SPEED, this.getSpeedCurrent());\n        }\n\n        for (let i = 0; i < this.aUpdaters.length; i++) {\n            this.aUpdaters[i](fTransition);\n        }\n    }\n\n    /**\n     * updateTimers(nCycles)\n     *\n     * Used by run() to reduce all active timer countdown values by the number of cycles just executed;\n     * this is the function that actually \"fires\" any timer(s) whose countdown has reached (or dropped below)\n     * zero, invoking their callback function.\n     *\n     * @this {Time}\n     * @param {number} nCycles (number of cycles actually executed)\n     */\n    updateTimers(nCycles)\n    {\n        for (let iTimer = this.aTimers.length; iTimer > 0; iTimer--) {\n            let timer = this.aTimers[iTimer-1];\n\n            if (timer.nCyclesLeft < 0) continue;\n            timer.nCyclesLeft -= nCycles;\n            if (timer.nCyclesLeft <= 0) {\n                timer.nCyclesLeft = -1; // zero is technically an \"active\" value, so ensure the timer is dormant now\n                timer.callBack();       // safe to invoke the callback function now\n                if (timer.msAuto >= 0) {\n                    this.setTimer(iTimer, timer.msAuto);\n                }\n            }\n        }\n    }\n}\n\nTime.BINDING = {\n    RUN:        \"run\",\n    SPEED:      \"speed\",\n    STEP:       \"step\",\n    THROTTLE:   \"throttle\"\n};\n\n/*\n * We yield more often now (120 times per second instead of 60), to help ensure that requestAnimationFrame()\n * callbacks can be called as timely as possible.  And we still only want to perform DOM-related status updates\n * no more than twice per second, so the required number of yields before each update has been increased as well.\n */\nTime.YIELDS_PER_SECOND = 120;\nTime.YIELDS_PER_UPDATE = 60;\n\nTime.VERSION    = 1.11;\n\n/**\n * @copyright http://pcjs.org/modules/devices/ledctrl.js (C) Jeff Parsons 2012-2017\n */\n\n/** @typedef {{ class: string, bindings: (Object|undefined), version: (number|undefined), overrides: (Array.<string>|undefined), wrap: (boolean|undefined), rule: (string|undefined), pattern: (string|undefined), patterns: (Object|undefined), symbols: (string|undefined), toggleColor: (boolean|undefined), colors: (Object|undefined) }} */\nvar LCConfig;\n\n/**\n * LED Controller Chip\n *\n * @class {Chip}\n * @unrestricted\n * @property {boolean} fWrap\n * @property {string} sRule\n * @property {string} sPattern\n * @property {string} sSymbols\n * @property {boolean} fToggleColor\n * @property {LED} leds\n * @property {Object} colorPalette\n * @property {string} colorDefault (obtained from the leds)\n * @property {string} colorSelected (set by updateColorSelection())\n * @property {Array.<string>} colors\n */\nclass Chip extends Device {\n    /**\n     * Chip(idMachine, idDevice, config)\n     *\n     * @this {Chip}\n     * @param {string} idMachine\n     * @param {string} idDevice\n     * @param {LCConfig} [config]\n     */\n    constructor(idMachine, idDevice, config)\n    {\n        super(idMachine, idDevice, Chip.VERSION, config);\n\n        /*\n         * These are grid \"behavior\" properties.  If 'wrap' is true, then any off-grid neighbor cell\n         * locations are mapped to the opposite edge; otherwise, they are mapped to the LEDs \"scratch\" row.\n         */\n        this.fWrap = this.getDefaultBoolean('wrap', false);\n        this.sRule = this.getDefaultString('rule', \"\");\n        this.sPattern = this.getDefaultString('pattern', \"\");\n        this.sSymbols = this.getDefaultString('symbols', \"\");\n        \n        /*\n         * The 'toggleColor' property currently affects only grids that have a color palette: if true,\n         * then only an LED's color is toggled; otherwise, only its state (ie, ON or OFF) is toggled.\n         */\n        this.fToggleColor = this.getDefaultBoolean('toggleColor', false);\n        \n        /*\n         * Since all bindings should have been completed by super(), we can make a preliminary call\n         * to getCounts() to determine how many counts are stored per LED, to preallocate a count buffer.\n         */\n        this.countBuffer = new Array(this.getCounts().length);\n\n        /*\n         * Get access to the LED device, so we can update its display.\n         */\n        let leds = /** @type {LED} */ (this.findDeviceByClass(Machine.CLASS.LED));\n        if (leds) {\n            this.leds = leds;\n\n            /*\n             * If loadPattern() didn't load anything into the LED array, then call\n             * clearBuffer(true), which performs a combination of clearBuffer() and drawBuffer().\n             */\n            if (!this.loadPattern()) leds.clearBuffer(true);\n\n            /*\n             * Get access to the Input device, so we can add our click functions.\n             */\n            this.input = /** @type {Input} */ (this.findDeviceByClass(Machine.CLASS.INPUT));\n            if (this.input) {\n                this.input.addClick(this.onPower.bind(this), this.onReset.bind(this));\n            }\n\n            let configInput = {\n                \"class\":        \"Input\",\n                \"location\":     [0, 0, leds.widthView, leds.heightView, leds.colsView, leds.rowsView],\n                \"drag\":         !!(this.input && this.input.fDrag),\n                \"scroll\":       !!(this.input && this.input.fScroll),\n                \"hexagonal\":    leds.fHexagonal,\n                \"bindings\":     {\"surface\": leds.getBindingID(LED.BINDING.CONTAINER)}\n            };\n\n            let chip = this;\n            this.ledInput = new Input(idMachine, idDevice + \"Input\", configInput);\n            this.ledInput.addInput(function onLEDInput(col, row) {\n                chip.onInput(col, row);\n            });\n\n            this.colors = [];\n            this.colorDefault = leds.getDefaultColor();\n            this.updateColorSelection(this.colorDefault);\n            this.updateColorSwatches();\n            this.updateBackgroundImage(this.config[Chip.BINDING.IMAGE_SELECTION]);\n\n            /*\n             * Get access to the Time device, so we can give it our clocker() function.\n             */\n            this.time = /** @type {Time} */ (this.findDeviceByClass(Machine.CLASS.TIME));\n            if (this.time) {\n                this.time.addClocker(this.clocker.bind(this));\n                this.time.addUpdater(this.updateStatus.bind(this));\n            }\n\n            /*\n             * The following set of properties are all debugger-related; see onCommand().\n             */\n            this.sCommandPrev = \"\";\n            this.addHandler(Device.HANDLER.COMMAND, this.onCommand.bind(this));\n\n            this.iSymbolNext = this.nColsRemaining = 0;\n        }\n    }\n\n    /**\n     * addBinding(binding, element)\n     *\n     * @this {Chip}\n     * @param {string} binding\n     * @param {Element} element\n     */\n    addBinding(binding, element)\n    {\n        let chip = this;\n\n        switch(binding) {\n        case Chip.BINDING.COLOR_PALETTE:\n        case Chip.BINDING.COLOR_SELECTION:\n            element.onchange = function onSelectChange() {\n                chip.updateColorPalette(binding);\n            };\n            this.updateColorPalette();\n            break;\n\n        case Chip.BINDING.IMAGE_SELECTION:\n            element.onchange = function onImageChange() {\n                chip.updateBackgroundImage();\n            };\n            break;\n\n        case Chip.BINDING.PATTERN_SELECTION:\n            this.addBindingOptions(element, this.buildPatternOptions(this.config[Chip.BINDING.PATTERN_SELECTION]), false, this.config['pattern']);\n            element.onchange = function onPatternChange() {\n                chip.updatePattern();\n            };\n            break;\n\n        case Chip.BINDING.SAVE:\n            element.onclick = function onClickSave() {\n                let sPattern = chip.savePattern(true);\n                let elementSymbol = chip.bindings[Chip.BINDING.SYMBOL_INPUT];\n                if (elementSymbol) {\n                    sPattern = '\"' + elementSymbol.value + '\":\"' + sPattern + '\",';\n                }\n                chip.println(sPattern);\n            };\n            break;\n\n        case Chip.BINDING.SAVE_TO_URL:\n            element.onclick = function onClickSaveToURL() {\n                let sPattern = chip.savePattern();\n                chip.println(sPattern);\n                let href = window.location.href;\n                if (href.indexOf('pattern=') >= 0) {\n                    href = href.replace(/(pattern=)[^&]*/, \"$1\" + sPattern.replace(/\\$/g, \"$$$$\"));\n                } else {\n                    href += ((href.indexOf('?') < 0)? '?' : '&') + \"pattern=\" + sPattern;\n                }\n                window.location = href;\n            };\n            break;\n\n        case Chip.BINDING.SYMBOL_INPUT:\n            element.onkeypress = function onChangeSymbol(event) {\n                element.value = String.fromCharCode(event.charCode);\n                let elementPreview = chip.bindings[Chip.BINDING.SYMBOL_PREVIEW];\n                if (elementPreview) elementPreview.textContent = element.value;\n                event.preventDefault();\n            };\n            break;\n\n        default:\n            if (binding.startsWith(Chip.BINDING.COLOR_SWATCH)) {\n                element.onclick = function onClickColorSwatch() {\n                    chip.updateColorSwatches(binding);\n                };\n                break;\n            }\n            /*\n             * This code allows you to bind a specific control (ie, a button) to a specific pattern;\n             * however, it's preferable to use the PATTERN_SELECTION binding above, and use a single list.\n             */\n            let patterns = this.config[Chip.BINDING.PATTERN_SELECTION];\n            if (patterns && patterns[binding]) {\n                element.onclick = function onClickPattern() {\n                    chip.loadPattern(binding);\n                };\n            }\n        }\n        super.addBinding(binding, element);\n    }\n\n    /**\n     * buildPatternOptions(patterns)\n     *\n     * @this {Chip}\n     * @param {Object} patterns\n     * @returns {Object}\n     */\n    buildPatternOptions(patterns)\n    {\n        let options = {};\n        for (let id in patterns) {\n            let name = id;\n            let lines = patterns[id];\n            for (let i = 0; i < lines.length; i++) {\n                if (lines[i].indexOf(\"#N\") == 0) {\n                    name = lines[i].substr(2).trim();\n                    break;\n                }\n            }\n            options[name] = id;\n        }\n        return options;\n    }\n\n    /**\n     * clocker(nCyclesTarget)\n     *\n     * @this {Chip}\n     * @param {number} nCyclesTarget (0 to single-step)\n     * @returns {number} (number of cycles actually \"clocked\")\n     */\n    clocker(nCyclesTarget = 0)\n    {\n        let nCyclesClocked = 0;\n        if (nCyclesTarget >= 0) {\n            let nAlive;\n            do {\n                switch(this.sRule) {\n                case Chip.RULES.ANIM4:\n                    nAlive = this.doCycling();\n                    break;\n                case Chip.RULES.LEFT1:\n                    nAlive = this.doShifting(1);\n                    break;\n                case Chip.RULES.LIFE1:\n                    nAlive = this.doCounting();\n                    break;\n                }\n                if (!nCyclesTarget) this.println(\"living cells: \" + nAlive);\n                nCyclesClocked += 1;\n            } while (nCyclesClocked < nCyclesTarget);\n        }\n        return nCyclesClocked;\n    }\n\n    /**\n     * doCounting()\n     *\n     * Implements rule LIFE1 (straight-forward implementation of Conway's Game of Life rule \"B3/S23\").\n     * \n     * This iterates row-by-row and column-by-column.  It takes advantage of the one-dimensional LED\n     * buffer layout to move through the entire grid with a \"master\" cell index (iCell) and corresponding\n     * indexes for all 8 \"neighboring\" cells (iNO, iNE, iEA, iSE, iSO, iSW, iWE, and iNW), incrementing\n     * them all in unison.\n     *\n     * The row and col variables are used only to detect when we are at the \"edges\" of the grid, and whether\n     * (depending on the wrap setting) any north, east, south, or west indexes that are now \"off the grid\"\n     * should be adjusted to the other side of the grid (or set to the dead \"scratch\" row at the end of the\n     * grid if wrap is disabled).  Similarly, when we leave an \"edge\", those same indexes must be restored\n     * to their normal positions, relative to the \"master\" index (iCell).\n     *\n     * The inline tests for whether iCell is at an edge are unavoidable, unless we break the logic up into\n     * 5 discrete steps: one for the rectangle just inside the edges, and then four for each of the north,\n     * east, south, and west edge strips.  But unless we really need that (presumably tiny) speed boost,\n     * I'm inclined to keep the logic simple.\n     *\n     * The logic is still a bit cluttered by the all the edge detection checks (and the wrap checks within\n     * each edge case), and perhaps I should have written two versions of this function (with and without wrap),\n     * but again, that would produce more repetition of the rest of the game logic, so I'm still inclined to\n     * leave it as-is.\n     *\n     * @this {Chip}\n     * @returns {number}\n     */\n    doCounting()\n    {\n        let cAlive = 0;\n        let buffer = this.leds.getBuffer();\n        let bufferClone = this.leds.getBufferClone();\n        let nCols = this.leds.cols;\n        let nRows = this.leds.rows;\n        /*\n         * The number of LED buffer elements per cell is an LED implementation detail that should not be\n         * assumed, so we obtain it from the LED object, and use it to calculate the per-cell increment,\n         * per-row increment, and per-grid increment; the latter gives us the offset of the LED buffer's\n         * scratch row, which we rely upon when wrap is turned off.\n         */\n        let nInc = this.leds.nBufferInc;\n        let nIncPerRow = nCols * nInc;\n        let nIncPerGrid = nRows * nIncPerRow;\n\n        let iCell = 0;\n        let iCellDummy = nIncPerGrid;\n        let iNO = iCell - nIncPerRow;\n        let iNW = iNO - nInc;\n        let iNE = iNO + nInc;\n        let iWE = iCell - nInc;\n        let iEA = iCell + nInc;\n        let iSO = iCell + nIncPerRow;\n        let iSW = iSO - nInc;\n        let iSE = iSO + nInc;\n\n        for (let row = 0; row < nRows; row++) {\n            if (!row) {                         // at top (north) edge; restore will be done after the col loop ends\n                if (!this.fWrap) {\n                    iNO = iNW = iNE = iCellDummy;\n                } else {\n                    iNO += nIncPerGrid; iNW += nIncPerGrid; iNE += nIncPerGrid;\n                }\n            } else if (row == nRows - 1) {      // at bottom (south) edge\n                if (!this.fWrap) {\n                    iSO = iSW = iSE = iCellDummy;\n                } else {\n                    iSO -= nIncPerGrid; iSW -= nIncPerGrid; iSE -= nIncPerGrid;\n                }\n            }\n            for (let col = 0; col < nCols; col++) {\n                if (!col) {                     // at left (west) edge\n                    if (!this.fWrap) {\n                        iWE = iNW = iSW = iCellDummy;\n                    } else {\n                        iWE += nIncPerRow; iNW += nIncPerRow; iSW += nIncPerRow;\n                    }\n                } else if (col == 1) {          // just finished left edge, restore west indexes\n                    if (!this.fWrap) {\n                        iWE = iCell - nInc; iNW = iNO - nInc; iSW = iSO - nInc;\n                    } else {\n                        iWE -= nIncPerRow; iNW -= nIncPerRow; iSW -= nIncPerRow;\n                    }\n                } else if (col == nCols - 1) {  // at right (east) edge; restore will be done after the col loop ends\n                    if (!this.fWrap) {\n                        iEA = iNE = iSE = iCellDummy;\n                    } else {\n                        iEA -= nIncPerRow; iNE -= nIncPerRow; iSE -= nIncPerRow;\n                    }\n                }\n                let state = buffer[iCell];\n                let nNeighbors = buffer[iNW]+buffer[iNO]+buffer[iNE]+buffer[iEA]+buffer[iSE]+buffer[iSO]+buffer[iSW]+buffer[iWE];\n\n                if (nNeighbors == 3) {\n                    state = LED.STATE.ON;\n                } else if (nNeighbors != 2) {\n                    state = LED.STATE.OFF;\n                }\n                bufferClone[iCell] = state;\n                bufferClone[iCell+1] = buffer[iCell+1];\n                bufferClone[iCell+2] = buffer[iCell+2];\n                bufferClone[iCell+3] = buffer[iCell+3] | ((buffer[iCell] !== state)? LED.FLAGS.MODIFIED : 0);\n                iCell += nInc; iNW += nInc; iNO += nInc; iNE += nInc; iEA += nInc; iSE += nInc; iSO += nInc; iSW += nInc; iWE += nInc;\n                if (state == LED.STATE.ON) cAlive++;\n            }\n            if (!this.fWrap) {\n                if (!row) {\n                    iNO = iCell - nIncPerRow; iNW = iNO - nInc; iNE = iNO + nInc;\n                }\n                iEA = iCell + nInc; iNE = iNO + nInc; iSE = iSO + nInc;\n            } else {\n                if (!row) {\n                    iNO -= nIncPerGrid; iNW -= nIncPerGrid; iNE -= nIncPerGrid;\n                }\n                iEA += nIncPerRow; iNE += nIncPerRow; iSE += nIncPerRow;\n            }\n        }\n\n        this.leds.swapBuffers();\n        return cAlive;\n    }\n\n    /**\n     * doCycling()\n     *\n     * Implements rule ANIM4 (animation using 4-bit counters for state/color cycling).\n     *\n     * @this {Chip}\n     * @returns {number}\n     */\n    doCycling()\n    {\n        let cAlive = 0;\n        let leds = this.leds;\n        let nCols = leds.cols, nRows = leds.rows;\n        let counts = this.countBuffer;\n        for (let row = 0; row < nRows; row++) {\n            for (let col = 0; col < nCols; col++) {\n                if (!leds.getLEDCounts(col, row, counts)) continue;\n                cAlive++;\n                /*\n                 * Here's the layout of each cell's counts (which mirrors the Chip.COUNTS layout):\n                 *\n                 *      [0] is the \"working\" count\n                 *      [1] is the ON count\n                 *      [2] is the OFF count\n                 *      [3] is the color-cycle count\n                 *\n                 * Whenever the working count is zero, we examine the cell's state and advance it to\n                 * the next state: if it was ON, it goes to OFF (and the OFF count is loaded into\n                 * the working count); if it was OFF, then color-cycle count (if any) is applied, and\n                 * the state goes to ON (and the ON count is loaded).\n                 */\n                if (counts[0]) {\n                    counts[0]--;\n                }\n                else {\n                    let state = leds.getLEDState(col, row), stateNew = state || 0;\n                    switch(state) {\n                    case LED.STATE.ON:\n                        stateNew = LED.STATE.OFF;\n                        counts[0] = counts[2];\n                        if (counts[0]) {\n                            counts[0]--;\n                            break;\n                        }\n                        /* falls through */\n                    case LED.STATE.OFF:\n                        if (counts[3]) {\n                            let color = leds.getLEDColor(col, row);\n                            let iColor = this.colors.indexOf(color);\n                            if (iColor >= 0) {\n                                iColor = (iColor + counts[3]);\n                                while (iColor >= this.colors.length) iColor -= this.colors.length;\n                                leds.setLEDColor(col, row, this.colors[iColor]);\n                            }\n                        }\n                        stateNew = LED.STATE.ON;\n                        counts[0] = counts[1];\n                        if (counts[0]) {\n                            counts[0]--;\n                        }\n                        break;\n                    }\n                    if (stateNew !== state) leds.setLEDState(col, row, stateNew);\n                }\n                leds.setLEDCounts(col, row, counts);\n            }\n        }\n        return cAlive;\n    }\n\n    /**\n     * doShifting()\n     *\n     * Implements rule LEFT1 (shift left one cell).\n     * \n     * Some of the state we maintain outside of the LED array includes the number of columns of data remaining in\n     * the \"offscreen\" portion of the array (nColsRemaining).  Whenever we see that it's zero, we load it with the\n     * next chuck of data (ie, the LED pattern for the next symbol in sSymbols).\n     * \n     * @this {Chip}\n     * @param {number} [shift] (default is 1, for a leftward shift of one cell)\n     * @returns {number}\n     */\n    doShifting(shift = 1)\n    {\n        let cAlive = 0;\n        let leds = this.leds;\n        let nCols = leds.cols, nRows = leds.rows;\n\n        if (!this.nColsRemaining) {\n            if (this.sSymbols && this.iSymbolNext < this.sSymbols.length) {\n                this.nColsRemaining = this.loadPatternString(leds.colsView, 0, Chip.SYMBOLS[this.sSymbols[this.iSymbolNext++]], true);\n            }\n        }\n        for (let row = 0; row < nRows; row++) {\n            for (let col = 0; col < nCols - shift; col++) {\n                let stateLeft = leds.getLEDState(col, row) || LED.STATE.OFF;\n                if (stateLeft) cAlive++;\n                let stateRight = leds.getLEDState(col + 1, row) || LED.STATE.OFF;\n                leds.setLEDState(col, row, stateRight);\n                leds.setLEDState(col + 1, row, stateLeft);\n            }\n        }\n        if (this.nColsRemaining) this.nColsRemaining--;\n        return cAlive;\n    }\n\n    /**\n     * getCount(binding)\n     * \n     * @this {Chip}\n     * @param {string} binding \n     * @returns {number}\n     */\n    getCount(binding)\n    {\n        let count = 0;\n        let element = this.bindings[binding];\n        if (element && element.options) {\n            let option = element.options[element.selectedIndex];\n            count = option && +option.value || 0;\n        }\n        return count;\n    }\n    \n    /**\n     * getCounts()\n     *\n     * @this {Chip}\n     * @param {boolean} [fAdvance]\n     * @returns {Array.<number>}\n     */\n    getCounts(fAdvance)\n    {\n        let init = 0;\n        if (fAdvance) {\n            let element = this.bindings[Chip.BINDING.COUNT_INIT];\n            if (element && element.options) {\n                let option = element.options[element.selectedIndex];\n                if (option) {\n                    init = +option.value || 0;\n                    /*\n                     * A more regular pattern results if we stick to a range of counts equal to the\n                     * sum of the ON and OFF counts.  Let's get that sum now.  However, this assumes\n                     * that the user is starting with an initial count of ZERO.  Also, we're only going\n                     * to do this if the sum of ON and OFF counts is EVEN; if it's odd, then we'll let\n                     * the user do their thing.\n                     */\n                    element.selectedIndex++;\n                    let range = this.getCount(Chip.BINDING.COUNT_ON) + this.getCount(Chip.BINDING.COUNT_OFF);\n                    let fReset = (!(range & 1) && init == range - 1);\n                    if (fReset || element.selectedIndex < 0 || element.selectedIndex >= element.options.length) {\n                        element.selectedIndex = 0;\n                    }\n                }\n            }\n        }\n        let counts = [init];\n        for (let i = 1; i < Chip.COUNTS.length; i++) {\n            counts.push(this.getCount(Chip.COUNTS[i]));\n        }\n        return counts;\n    }\n\n    /**\n     * loadPattern(id)\n     *\n     * If no id is specified, load the initialization pattern, if any, set via the LCConfig\n     * \"pattern\" property (which, in turn, can be set as URL override, if desired).\n     *\n     * NOTE: Our initialization pattern is a extended single-string version of the RLE pattern\n     * file format: \"col/row/width/height/tokens\".  The default rule is assumed.\n     *\n     * @this {Chip}\n     * @param {string} [id]\n     * @returns {boolean}\n     */\n    loadPattern(id)\n    {\n        let leds = this.leds;\n        let iCol = -1, iRow = -1, width, height, rule, sPattern = \"\";\n\n        if (!id) {\n            /*\n             * If no id is provided, then we fallback to sPattern, which can be either an\n             * id (if it doesn't start with a digit) or one of our own extended pattern strings.\n             */\n            if (!this.sPattern.match(/^[0-9]/)) id = /** @type {string} */ (this.sPattern);\n        }\n\n        if (!id) {\n            if (!this.sPattern) {\n                return false;\n            }\n            let i = 0;\n            let aParts = this.sPattern.split('/');\n            if (aParts.length == 5) {           // extended pattern string\n                iCol = +aParts[i++];\n                iRow = +aParts[i++];\n            }\n            if (aParts.length == 3 || aParts.length == 5) {\n                width = +aParts[i++];           // conventional pattern string\n                height = +aParts[i++];\n                sPattern = aParts[i];\n            }\n            else {\n                this.println(\"unrecognized pattern: \" + this.sPattern);\n                return false;\n            }\n            rule = this.sRule;  // TODO: If we ever support multiple rules, then allow rule overrides, too\n        }\n        else {\n            let patterns = this.config[Chip.BINDING.PATTERN_SELECTION];\n            let lines = patterns && patterns[id];\n            if (!lines) {\n                this.println(\"unknown pattern: \" + id);\n                return false;\n            }\n            this.println(\"loading pattern '\" + id + \"'\");\n            for (let i = 0, n = 0; i < lines.length; i++) {\n                let sLine = lines[i];\n                if (sLine[0] == '#') {\n                    this.println(sLine);\n                    continue;\n                }\n                if (!n++) {\n                    let match = sLine.match(/x\\s*=\\s*([0-9]+)\\s*,\\s*y\\s*=\\s*([0-9]+)\\s*(?:,\\s*rule\\s*=\\s*(\\S+)|)/i);\n                    if (!match) {\n                        this.println(\"unrecognized header line\");\n                        return false;\n                    }\n                    width = +match[1];\n                    height = +match[2];\n                    rule = match[3];\n                    continue;\n                }\n                let end = sLine.indexOf('!');\n                if (end >= 0) {\n                    sPattern += sLine.substr(0, end);\n                    break;\n                }\n                sPattern += sLine;\n            }\n        }\n\n        if (rule != this.sRule) {\n            this.println(\"unsupported rule: \" + rule);\n            return false;\n        }\n\n        if (iCol < 0) iCol = (leds.cols - width) >> 1;\n        if (iRow < 0) iRow = (leds.rows - height) >> 1;\n\n        if (iCol < 0 || iCol + width > leds.cols || iRow < 0 || iRow + height > leds.rows) {\n            this.printf(\"pattern too large (%d,%d)\\n\", width, height);\n            return false;\n        }\n\n        return this.loadPatternString(iCol, iRow, sPattern) > 0;\n    }\n\n    /**\n     * loadPatternString(col, row, sPattern, fOverwrite)\n     *\n     * @this {Chip}\n     * @param {number} col\n     * @param {number} row\n     * @param {string} sPattern\n     * @param {boolean} [fOverwrite]\n     * @returns {number} (number of columns changed, 0 if none)\n     */\n    loadPatternString(col, row, sPattern, fOverwrite = false)\n    {\n        let leds = this.leds;\n        let rgb = [0, 0, 0, 1], counts = 0;\n        let fColors = false, fCounts = false;\n\n        /*\n         * TODO: Cache these pattern splits.\n         */\n        let aTokens = sPattern.split(/([a-z$])/i);\n        \n        if (!fOverwrite) leds.clearBuffer();\n        \n        /*\n         * We could add checks that verify that col and row stay within the bounds of the specified\n         * width and height of the pattern, but it's possible that there are some legit patterns out\n         * there that didn't get their bounds quite right.  And in any case, no harm can come of it,\n         * because setLEDState() will ignore any parameters outside the LED's array bounds.\n         */\n        let i = 0, iCol = col, colMax = 0;\n        while (i < aTokens.length - 1) {\n            let n = aTokens[i++];\n            let token = aTokens[i++];\n            let v = +n, nRepeat = (n === \"\"? 1 : v);\n            while (nRepeat--) {\n                let nAdvance = 0, fModified = false;\n                switch(token) {\n                case '$':\n                    fColors = fCounts = false;\n                    col = iCol;\n                    row++;\n                    break;\n                case 'C':\n                    counts = v;\n                    fCounts = true;\n                    break;\n                case 'R':\n                    rgb[0] = v;\n                    fColors = true;\n                    break;\n                case 'G':\n                    rgb[1] = v;\n                    fColors = true;\n                    break;\n                case 'B':\n                    rgb[2] = v;\n                    fColors = true;\n                    break;\n                case 'A':\n                    rgb[3] = v;\n                    fColors = true;\n                    break;\n                case 'b':\n                    fModified = leds.setLEDState(col, row, LED.STATE.OFF);\n                    nAdvance++;\n                    break;\n                case 'o':\n                    fModified = leds.setLEDState(col, row, LED.STATE.ON);\n                    nAdvance++;\n                    break;\n                default:\n                    this.printf(\"unrecognized pattern token: %s\\n\", token);\n                    break;\n                }\n                if (fModified == null) {\n                    this.printf(\"invalid pattern position (%d,%d)\\n\", col, row);\n                } else {\n                    if (fColors) {\n                        let color = leds.getRGBColorString(rgb);\n                        leds.setLEDColor(col, row, color);\n                    }\n                    if (fCounts) {\n                        leds.setLEDCountsPacked(col, row, counts);\n                    }\n                    if (colMax < col) colMax = col;\n                    col += nAdvance;\n                }\n            }\n        }\n\n        if (!fOverwrite) leds.drawBuffer(true);\n\n        return ((colMax -= (iCol - 1)) < 0? 0 : colMax);\n    }\n    \n    /**\n     * loadState(state)\n     *\n     * If any saved values don't match (possibly overridden), abandon the given state and return false.\n     * \n     * @this {Chip}\n     * @param {Object|Array|null} state\n     * @returns {boolean}\n     */\n    loadState(state)\n    {\n        if (state) {\n            let stateChip = state['stateChip'] || state[0];\n            if (!stateChip || !stateChip.length) {\n                this.println(\"Invalid saved state\");\n                return false;\n            }\n            let version = stateChip.shift();\n            if ((version|0) !== (Chip.VERSION|0)) {\n                this.printf(\"Saved state version mismatch: %3.2f\\n\", version);\n                return false;\n            }\n            // try {\n            // } catch(err) {\n            //     this.println(\"Chip state error: \" + err.message);\n            //     return false;\n            // }\n            if (!Device.getURLParms()['pattern'] && !Device.getURLParms()[Chip.BINDING.IMAGE_SELECTION]) {\n                let stateLEDs = state['stateLEDs'] || state[1];\n                if (stateLEDs && this.leds && !this.sSymbols) {\n                    if (!this.leds.loadState(stateLEDs)) return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * onCommand(sCommand)\n     *\n     * Processes commands for our \"mini-debugger\".\n     *\n     * If sCommand is blank (ie, if Enter alone was pressed), then sCommandPrev will be used,\n     * but sCommandPrev is set only for certain commands deemed \"repeatable\" (eg, step and dump\n     * commands).\n     *\n     * @this {Chip}\n     * @param {string} sCommand\n     * @returns {boolean} (true if processed, false if not)\n     */\n    onCommand(sCommand)\n    {\n        let sResult = \"\";\n\n        if (sCommand == \"\") {\n            sCommand = this.sCommandPrev;\n        }\n        this.sCommandPrev = \"\";\n        sCommand = sCommand.trim();\n\n        let aCommands = sCommand.split(' ');\n        let s = aCommands[0], c = aCommands[1];\n\n        switch(s[0]) {\n        case 'c':\n            if (c) {\n                this.println(\"set category '\" + c + \"'\");\n                this.setCategory(c);\n            } else {\n                c = this.setCategory();\n                if (c) {\n                    this.println(\"cleared category '\" + c + \"'\");\n                } else {\n                    this.println(\"no category set\");\n                }\n            }\n            break;\n\n        case '?':\n            sResult = \"available commands:\";\n            Chip.COMMANDS.forEach(cmd => {sResult += '\\n' + cmd;});\n            break;\n\n        default:\n            if (sCommand) {\n                sResult = \"unrecognized command '\" + sCommand + \"' (try '?')\";\n            }\n            break;\n        }\n        if (sResult) this.println(sResult.trim());\n        return true;\n    }\n\n    /**\n     * onInput(col, row)\n     *\n     * @this {Chip}\n     * @param {number} col\n     * @param {number} row\n     */\n    onInput(col, row)\n    {\n        let leds = this.leds;\n        if (col >= 0 && row >= 0) {\n            if (this.colorSelected) {\n                if (!leds.setLEDColor(col, row, this.colorSelected)) {\n                    if (this.fToggleColor) {\n                        leds.setLEDColor(col, row);\n                    } else {\n                        leds.setLEDState(col, row, LED.STATE.ON - leds.getLEDState(col, row));\n                    }\n                } else {\n                    leds.setLEDState(col, row, LED.STATE.ON);\n                }\n            }\n            else {\n                leds.setLEDState(col, row, LED.STATE.ON - leds.getLEDState(col, row));\n            }\n            let fAdvance = !!leds.getLEDState(col, row);\n            leds.setLEDCounts(col, row, this.getCounts(fAdvance));\n            leds.drawBuffer();\n        }\n    }\n    \n    /**\n     * onPower(fOn)\n     *\n     * Automatically called by the Machine device after all other devices have been powered up (eg, after\n     * a page load event), as well as when all devices are being powered down (eg, before a page unload event).\n     *\n     * May subsequently be called by the Input device to provide notification of a user-initiated power event\n     * (eg, toggling a power button); in this case, fOn should NOT be set, so that no state is loaded or saved.\n     *\n     * @this {Chip}\n     * @param {boolean} [fOn] (true to power on, false to power off; otherwise, toggle it)\n     */\n    onPower(fOn)\n    {\n        if (this.time) {\n            if (fOn) {\n                this.time.start();\n            } else {\n                this.time.stop();\n            }\n        }\n    }\n\n    /**\n     * onReset()\n     *\n     * Called by the Input device to provide notification of a reset event.\n     *\n     * @this {Chip}\n     */\n    onReset()\n    {\n        this.println(\"reset\");\n        this.leds.clearBuffer(true);\n    }\n\n    /**\n     * onRestore()\n     *\n     * @this {Chip}\n     */\n    onRestore()\n    {\n        this.loadState(this.loadLocalStorage());\n    }\n\n    /**\n     * onSave()\n     *\n     * @this {Chip}\n     */\n    onSave()\n    {\n        this.saveLocalStorage(this.saveState());\n    }\n\n    /**\n     * savePattern(fMinWidth, fMinHeight)\n     *\n     * We save our patterns as a string that is largely compatible with the \"Game of Life RLE Format\"\n     * (refer to http://www.conwaylife.com/w/index.php?title=Run_Length_Encoded), which uses <repetition><tag>\n     * pairs to describes runs of identical cells; the <tag> is either 'o' for \"alive\" cells, 'b' for \"dead\"\n     * cells, or '$' for end of line.\n     *\n     * We say \"largely\" compatible because it's not really a goal for our pattern strings to be compatible\n     * with any other RLE reader.  For example, we don't break our string into lines of 70 characters or less,\n     * so that's already one incompatibility.  Also, we don't attempt to determine the minimum bounding\n     * rectangle for the current pattern, because we use these strings to save/restore the entire grid as it\n     * originally appeared, not just the pattern within the grid.  Both of those differences can be dealt with\n     * in the future with a special RLE-compatibility flag, if we ever care.\n     *\n     * Moreover, we must deal with grids containing multi-color cells and additional state (eg, internal counters)\n     * not found in typical \"Game of Life\" grids, so we may precede each <repetition><tag> pair with zero or more\n     * <value><modifier> pairs, where <modifier> can be:\n     *\n     *      'R':    red color value (assumed zero if not present)\n     *      'G':    green color value (assumed zero if not present)\n     *      'B':    blue color value (assumed zero if not present)\n     *      'C':    packed count value (ie, internal counts packed into a single unsigned 32-bit number)\n     *\n     * If we use any of the above modifiers, they are always preceded with a value unless the value is zero\n     * (unlike the <repetition><tag> pairs, where a repetition of 1 is assumed if omitted).\n     *\n     * Also, a modifier remains in effect until modified by another modifier, reducing the amount of\n     * \"modifier noise\" in the pattern string.\n     *\n     * @this {Chip}\n     * @param {boolean} [fMinWidth] (set to true to determine the minimum width)\n     * @param {boolean} [fMinHeight] (set to true to determine the minimum height)\n     * @returns {string}\n     */\n    savePattern(fMinWidth, fMinHeight)\n    {\n        let leds = this.leds;\n\n        let sPattern = \"\";\n        let iCol = 0, iRow = 0;\n        let nCols = this.leds.cols, nRows = this.leds.rows;\n\n        let fColors = !!this.colors.length;\n        let state, rgb = [0, 0, 0], counts;\n        let stateLast = 0, rgbLast = [0, 0, 0, 1], countsLast = 0;\n        let statePrev = 0, rgbPrev = [0, 0, 0, 1], countsPrev = 0, nPrev = 0;\n\n        /**\n         * flushRun(fEndRow)\n         * \n         * @param {boolean} [fEndRow]\n         */\n        let flushRun = function(fEndRow) {\n            let fDelta = false;\n            if (rgb[3] == null) rgb[3] = 1;\n            if (nPrev) {\n                if (fColors) {\n                    if (rgb[0] !== rgbPrev[0] || rgb[1] !== rgbPrev[1] || rgb[2] !== rgbPrev[2] || rgb[3] !== rgbPrev[3]) {\n                        fDelta = true;\n                    }\n                    if (counts !== countsPrev) {\n                        fDelta = true;\n                    }\n                }\n                if (state !== statePrev) {\n                    fDelta = true;\n                }\n                if (fDelta || fEndRow && statePrev) {\n                    if (fColors) {\n                        if (rgbLast[0] !== rgbPrev[0]) {\n                            rgbLast[0] = rgbPrev[0];\n                            sPattern += (rgbPrev[0] || \"\") + 'R';\n                        }\n                        if (rgbLast[1] !== rgbPrev[1]) {\n                            rgbLast[1] = rgbPrev[1];\n                            sPattern += (rgbPrev[1] || \"\") + 'G';\n                        }\n                        if (rgbLast[2] !== rgbPrev[2]) {\n                            rgbLast[2] = rgbPrev[2];\n                            sPattern += (rgbPrev[2] || \"\") + 'B';\n                        }\n                        if (rgbLast[3] !== rgbPrev[3]) {\n                            rgbLast[3] = rgbPrev[3];\n                            sPattern += (rgbPrev[3] || \"\") + 'A';\n                        }\n                        if (countsLast !== countsPrev) {\n                            countsLast = countsPrev;\n                            sPattern += (countsPrev || \"\") + 'C';\n                        }\n                    }\n                    if (nPrev > 1) sPattern += nPrev;\n                    sPattern += (statePrev === LED.STATE.ON? 'o' : 'b');\n                    stateLast = statePrev;\n                    fDelta = true;\n                }\n            }\n            if (fEndRow) {\n                sPattern += '$';\n                nPrev = 0;\n            } else {\n                if (!fDelta) {\n                    nPrev++;\n                } else {\n                    nPrev = 1;\n                }\n                statePrev = state;\n                rgbPrev[0] = rgb[0];\n                rgbPrev[1] = rgb[1];\n                rgbPrev[2] = rgb[2];\n                rgbPrev[3] = rgb[3];\n                countsPrev = counts;\n            }\n        };\n\n        /*\n         * Before we begin, see if either fMinWidth or fMinHeight are set, requiring a bounds prescan.\n         */\n        let colMin = 0, colMax = leds.cols - 1;\n        let rowMin = 0, rowMax = leds.rows - 1;\n        if (fMinWidth || fMinHeight) {\n            if (fMinWidth) {\n                colMin = colMax; colMax = 0;\n            }\n            if (fMinHeight) {\n                rowMin = rowMax; rowMax = 0;\n            }\n            for (let row = 0; row < leds.rows; row++) {\n                for (let col = 0; col < leds.cols; col++) {\n                    state = leds.getLEDState(col, row);\n                    if (state) {\n                        if (fMinWidth) {\n                            if (colMin > col) colMin = col;\n                            if (colMax < col) colMax = col;\n                        }\n                        if (fMinHeight) {\n                            if (rowMin > row) rowMin = row;\n                            if (rowMax < row) rowMax = row;\n                        }\n                    }\n                }\n            }\n            nCols = colMax - colMin + 1;\n            nRows = rowMax - rowMin + 1;\n            if (nCols < 0) nCols = 0;\n            if (nRows < 0) nRows = 0;\n        }\n\n        /*\n         * Begin pattern generation.\n         */\n        for (let row = rowMin; row <= rowMax; row++) {\n            for (let col = colMin; col <= colMax; col++) {\n                state = leds.getLEDState(col, row);\n                leds.getLEDColorValues(col, row, rgb);\n                counts = leds.getLEDCountsPacked(col, row);\n                flushRun();\n            }\n            flushRun(true);\n        }\n\n        /*\n         * Remove all '$' at the beginning of the pattern, if we're asked for the minimum height (or no minimums at all)\n         */\n        if (fMinHeight || !fMinWidth) {\n            while (sPattern[0] == '$') {\n                iRow++; nRows--;\n                sPattern = sPattern.slice(1);\n            }\n        }\n\n        /*\n         * Similarly, remove all '$$' at the end of the pattern.\n         */\n        while (sPattern.slice(-2) == '$$') {\n            nRows--;\n            sPattern = sPattern.slice(0, -1);\n        }\n        if (sPattern == '$') nRows = 0;\n\n        /*\n         * If we were asked for either the minimum width or height, then don't bother including starting col and row (which\n         * we only want for patterns used to save/restore entire grids).\n         */\n        sPattern = ((fMinWidth || fMinHeight)? \"\" : (iCol + '/' + iRow + '/')) + nCols + '/' + nRows + '/' + sPattern.slice(0, -1);\n        sPattern = sPattern.replace(/\\$+$/, '');\n        return sPattern;\n    }\n\n    /**\n     * saveState()\n     *\n     * @this {Chip}\n     * @returns {Array}\n     */\n    saveState()\n    {\n        let state = [[],[]];\n        let stateChip = state[0];\n        let stateLEDs = state[1];\n        stateChip.push(Chip.VERSION);\n        if (this.leds) this.leds.saveState(stateLEDs);\n        return state;\n    }\n\n    /**\n     * updateBackgroundImage(sImage)\n     *\n     * @this {Chip}\n     * @param {string} [sImage]\n     */\n    updateBackgroundImage(sImage)\n    {\n        let element = this.bindings[Chip.BINDING.IMAGE_SELECTION];\n        if (element && element.options.length) {\n            if (sImage) {\n                for (let i = 0; i < element.options.length; i++) {\n                    if (element.options[i].value == sImage) {\n                        element.selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n            sImage = element.options[element.selectedIndex].value;\n            this.leds.setContainerStyle('backgroundImage', sImage? (\"url('\" + sImage + \"')\") : \"none\");\n        }\n    }\n\n    /**\n     * updateColorPalette(binding)\n     *\n     * In addition to being called whenever the COLOR_PALETTE or COLOR_SELECTION onChange handler is\n     * called, this is also called when any of the color controls are initialized, because we don't know\n     * in what order the elements will be bound.\n     *\n     * @this {Chip}\n     * @param {string} [binding] (if set, the selection for the specified binding has changed)\n     */\n    updateColorPalette(binding)\n    {\n        let elementPalette = this.bindings[Chip.BINDING.COLOR_PALETTE];\n        let elementSelection = this.bindings[Chip.BINDING.COLOR_SELECTION];\n\n        let fPaletteChange = (binding === Chip.BINDING.COLOR_PALETTE);\n        if (elementPalette && !elementPalette.options.length) {\n            this.addBindingOptions(elementPalette, this.config['colors'], true);\n            fPaletteChange = true;\n        }\n\n        if (elementPalette && elementSelection && (!elementSelection.options.length || fPaletteChange)) {\n            let sPalette = elementPalette.options[elementPalette.selectedIndex].value;\n            this.colorPalette = this.config['colors'][sPalette];\n            for (let color in this.colorPalette) {\n                let sColorOverride = this.config[color.toLowerCase()];\n                if (sColorOverride) {\n                    if (sColorOverride[0] != '#') sColorOverride = '#' + sColorOverride;\n                    this.println(\"overriding color '\" + color + \"' with \" + sColorOverride + \" (formerly \" + this.colorPalette[color] + \")\");\n                    this.colorPalette[color] = sColorOverride;\n                }\n            }\n            this.addBindingOptions(elementSelection, this.colorPalette, true);\n        }\n\n        if (elementPalette && elementSelection && elementSelection.options.length) {\n            this.colorSelected = elementSelection.options[elementSelection.selectedIndex].value;\n            this.updateColorSwatches();\n        }\n    }\n\n    /**\n     * updateColorSelection(color)\n     *\n     * @this {Chip}\n     * @param {string} color\n     */\n    updateColorSelection(color)\n    {\n        let element = this.bindings[Chip.BINDING.COLOR_SELECTION];\n        if (element) {\n            let i;\n            for (i = 0; i < element.options.length; i++) {\n                if (element.options[i].value == color) {\n                    this.colorSelected = color;\n                    if (element.selectedIndex != i) {\n                        element.selectedIndex = i;\n                    }\n                    break;\n                }\n            }\n            if (i == element.options.length) element.selectedIndex = 0;\n        }\n    }\n\n    /**\n     * updateColorSwatches(binding)\n     *\n     * @this {Chip}\n     * @param {string} [binding] (set if a specific color swatch was just clicked)\n     */\n    updateColorSwatches(binding)\n    {\n        let i = 1, elementSwatch;\n        /*\n         * Some machines use a single swatch called COLOR_SWATCH_SELECTED; update as appropriate.\n         */\n        if (!binding) {\n            if (this.colorSelected) {\n                elementSwatch = this.bindings[Chip.BINDING.COLOR_SWATCH_SELECTED];\n                if (elementSwatch) {\n                    elementSwatch.style.backgroundColor = this.colorSelected;\n                }\n            }\n        }\n        /*\n         * Other machines use a series of swatches named COLOR_SWATCH + \"1\", COLOR_SWATCH + \"2\", etc;\n         * for each color in colorPalette, update the next available swatch.\n         */\n        if (this.colorPalette) {\n            // this.println(\"updateColorSwatches(\" + this.colorSelected + \")\");\n            for (let idColor in this.colorPalette) {\n                let color = this.colorPalette[idColor];\n                if (this.colors) this.colors[i-1] = color;\n                let idSwatch = Chip.BINDING.COLOR_SWATCH + i++;\n                elementSwatch = this.bindings[idSwatch];\n                if (!elementSwatch) break;\n                elementSwatch.style.display = \"inline-block\";\n                if (idSwatch == binding) {\n                    this.updateColorSelection(color);\n                }\n                if (binding && binding != idSwatch || color != this.colorSelected) {\n                    color = this.leds.getRGBAColor(color, 1.0, 0.50);\n                }\n                elementSwatch.style.backgroundColor = color;\n                // this.println(\"swatch '\" + idSwatch + \"' updated to color '\" + color + \"'\");\n            }\n        }\n        /*\n         * Finally, for any remaining swatches in the series (ie, because the current palette doesn't need\n         * them all), hide them.\n         */\n        while (true) {\n            let idSwatch = Chip.BINDING.COLOR_SWATCH + i++;\n            let elementSwatch = this.bindings[idSwatch];\n            if (!elementSwatch) break;\n            elementSwatch.style.display = \"none\";\n        }\n    }\n\n    /**\n     * updatePattern()\n     *\n     * @this {Chip}\n     */\n    updatePattern()\n    {\n        let element = this.bindings[Chip.BINDING.PATTERN_SELECTION];\n        if (element && element.options.length) {\n            let sPattern = element.options[element.selectedIndex].value;\n            if (!sPattern) {\n                this.onReset();\n            } else {\n                this.loadPattern(sPattern);\n            }\n        }\n    }\n\n    /**\n     * updateStatus(fTransition)\n     *\n     * Update the LEDs as needed.\n     *\n     * Called by Time's updateStatus() function whenever 1) its YIELDS_PER_UPDATE threshold is reached\n     * (default is twice per second), 2) a step() operation has just finished (ie, the device is being\n     * single-stepped), and 3) a start() or stop() transition has occurred.\n     *\n     * Of those, all we currently care about are step() and stop() notifications, because we want to make sure\n     * the LED display is in sync with the last LED buffer update.  In both of those cases, time has stopped.\n     * If time has NOT stopped, then the LED's normal animator function (ledAnimate()) takes care of updating\n     * the LED display.\n     *\n     * @this {Chip}\n     * @param {boolean} [fTransition]\n     */\n    updateStatus(fTransition)\n    {\n        if (!this.time.isRunning()) {\n            this.leds.drawBuffer();\n        }\n    }\n}\n\nChip.BINDING = {\n    COLOR_PALETTE:          \"colorPalette\",\n    COLOR_SELECTION:        \"colorSelection\",\n    COLOR_SWATCH:           \"colorSwatch\",\n    COLOR_SWATCH_SELECTED:  \"colorSwatchSelected\",\n    COUNT_INIT:             \"countInit\",\n    COUNT_ON:               \"countOn\",\n    COUNT_OFF:              \"countOff\",\n    COUNT_CYCLE:            \"countCycle\",\n    IMAGE_SELECTION:        \"backgroundImage\",\n    PATTERN_SELECTION:      \"patterns\",\n    SYMBOL_INPUT:           \"symbolInput\",\n    SYMBOL_PREVIEW:         \"symbolPreview\",\n    SAVE:                   \"save\",\n    SAVE_TO_URL:            \"saveToURL\"\n};\n\nChip.COUNTS = [null, Chip.BINDING.COUNT_ON, Chip.BINDING.COUNT_OFF, Chip.BINDING.COUNT_CYCLE];\n\nChip.COMMANDS = [\n    \"c\\tset category\"\n];\n\nChip.RULES = {\n    ANIM4:      \"A4\",       // animation using 4-bit counters for state/color cycling\n    LEFT1:      \"L1\",       // shift left one cell\n    LIFE1:      \"B3/S23\"    // Game of Life v1.0 (births require 3 neighbors, survivors require 2 or 3)\n};\n\n/*\n * Symbols can be formed with the following 16x16 grid patterns.\n */\nChip.SYMBOLS = {\n    \"A\": \"10/14/$3b4o$2bo4bo$2bo4bo$bo6bo$bo6bo$o8bo$o8bo$o8bo$10o$o8bo$o8bo$o8bo$o8bo\",\n    \"B\": \"10/14/$7o$o6bo$o7bo$o7bo$o7bo$o6bo$8o$o7bo$o8bo$o8bo$o8bo$o8bo$9o\",\n    \"C\": \"8/14/$2b6o$bo$o$o$o$o$o$o$o$o$o$bo$2b6o\",\n    \"D\": \"10/14/$8o$o7bo$o8bo$o8bo$o8bo$o8bo$o8bo$o8bo$o8bo$o8bo$o8bo$o7bo$8o\",\n    \"E\": \"8/14/$8o$o$o$o$o$o$7o$o$o$o$o$o$8o\",\n    \"F\": \"8/14/$8o$o$o$o$o$o$o$7o$o$o$o$o$o\",\n    \"G\": \"9/14/$2b6o$bo$o$o$o$o$o$o$o6b2o$o7bo$o7bo$bo6bo$2b7o\",\n    \"H\": \"10/14/$o8bo$o8bo$o8bo$o8bo$o8bo$o8bo$10o$o8bo$o8bo$o8bo$o8bo$o8bo$o8bo\",\n    \"I\": \"7/14/$7o$3bo$3bo$3bo$3bo$3bo$3bo$3bo$3bo$3bo$3bo$3bo$7o\",\n    \"J\": \"9/14/$8bo$8bo$8bo$8bo$8bo$8bo$8bo$8bo$o7bo$o7bo$o7bo$bo5bo$2b5o\"\n};\n\nChip.VERSION    = 1.11;\n\nMACHINE = \"LEDs\";\n\n/**\n * @copyright http://pcjs.org/modules/devices/machine.js (C) Jeff Parsons 2012-2017\n */\n\n/**\n * @class {Machine}\n * @unrestricted\n */\nclass Machine extends Device {\n    /**\n     * Machine(idMachine, sConfig)\n     *\n     * Sample config:\n     *\n     *    {\n     *      \"ti57\": {\n     *        \"class\": \"Machine\",\n     *        \"type\": \"TI57\",\n     *        \"name\": \"TI-57 Programmable Calculator Simulation\",\n     *        \"version\": 1.10,\n     *        \"autoPower\": true,\n     *        \"bindings\": {\n     *          \"clear\": \"clearTI57\",\n     *          \"print\": \"printTI57\"\n     *        }\n     *      },\n     *      \"chip\": {\n     *        \"class\": \"Chip\",\n     *        \"type\": \"TMS-1500\",\n     *        \"input\": \"buttons\",\n     *        \"output\": \"display\"\n     *      },\n     *      \"clock\": {\n     *        \"class\": \"Time\",\n     *        \"cyclesPerSecond\": 650000\n     *        \"bindings\": {\n     *          \"run\": \"runTI57\",\n     *          \"speed\": \"speedTI57\",\n     *          \"step\": \"stepTI57\"\n     *        },\n     *        \"overrides\": [\"cyclesPerSecond\"]\n     *      },\n     *      \"display\": {\n     *        \"class\": \"LED\",\n     *        \"type\": 3,\n     *        \"cols\": 12,\n     *        \"rows\": 1,\n     *        \"color\": \"red\",\n     *        \"bindings\": {\n     *          \"container\": \"displayTI57\"\n     *        },\n     *        \"overrides\": [\"color\",\"backgroundColor\"]\n     *      },\n     *      \"buttons\": {\n     *        \"class\": \"Input\",\n     *        \"map\": [\n     *          [\"2nd\",  \"inv\",  \"lnx\",  \"\\\\b\",  \"clr\"],\n     *          [\"lrn\",  \"xchg\", \"sq\",   \"sqrt\", \"rcp\"],\n     *          [\"sst\",  \"sto\",  \"rcl\",  \"sum\",  \"exp\"],\n     *          [\"bst\",  \"ee\",   \"(\",    \")\",    \"/\"],\n     *          [\"gto\",  \"7\",    \"8\",    \"9\",    \"*\"],\n     *          [\"sbr\",  \"4\",    \"5\",    \"6\",    \"-\"],\n     *          [\"rst\",  \"1\",    \"2\",    \"3\",    \"+\"],\n     *          [\"r/s\",  \"0\",    \".\",    \"+/-\",  \"=|\\\\r\"]\n     *        ],\n     *        \"location\": [139, 325, 368, 478, 0.34, 0.5, 640, 853, 418, 180, 75, 36],\n     *        \"bindings\": {\n     *          \"surface\": \"imageTI57\",\n     *          \"power\": \"powerTI57\",\n     *          \"reset\": \"resetTI57\"\n     *        }\n     *      },\n     *      \"rom\": {\n     *        \"class\": \"ROM\",\n     *        \"wordSize\": 13,\n     *        \"valueSize\": 16,\n     *        \"valueTotal\": 2048,\n     *        \"littleEndian\": true,\n     *        \"file\": \"ti57le.bin\",\n     *        \"reference\": \"\",\n     *        \"values\": [\n     *        ]\n     *      }\n     *    }\n     *\n     * @this {Machine}\n     * @param {string} idMachine (of both the machine AND the <div> to contain it)\n     * @param {string} sConfig (JSON configuration for entire machine, including any static resources)\n     */\n    constructor(idMachine, sConfig)\n    {\n        super(idMachine, idMachine, Machine.VERSION);\n        try {\n            this.config = JSON.parse(sConfig);\n            let config = this.config[idMachine];\n            this.checkVersion(config);\n            this.checkOverrides(config);\n            this.addBindings(config['bindings']);\n            this.fAutoPower = (config['autoPower'] !== false);\n        } catch(err) {\n            let sError = err.message;\n            let match = sError.match(/position ([0-9]+)/);\n            if (match) {\n                sError += \" ('\" + sConfig.substr(+match[1], 40).replace(/\\s+/g, ' ') + \"...')\";\n            }\n            this.println(\"machine '\" + idMachine + \"' initialization error: \" + sError);\n        }\n        /*\n         * Device initialization is now deferred until after the page is fully loaded, for the benefit\n         * of devices (eg, Input) that may be dependent on page resources.\n         *\n         * Strangely, for these page events, I must use the window object rather than the document object.\n         */\n        let machine = this, chip = null;\n        window.addEventListener('load', function onLoad(event) {\n            chip = machine.initDevices();\n            if (chip) {\n                if (chip.onRestore) chip.onRestore();\n                if (chip.onPower && machine.fAutoPower) chip.onPower(true);\n            }\n        });\n        let sEvent = this.isUserAgent(\"iOS\")? 'pagehide' : (this.isUserAgent(\"Opera\")? 'unload' : undefined);\n        window.addEventListener(sEvent || 'beforeunload', function onUnload(event) {\n            if (chip) {\n                if (chip.onSave) chip.onSave();\n                if (chip.onPower) chip.onPower(false);\n            }\n        });\n    }\n\n    /**\n     * initDevices()\n     *\n     * Initializes devices in the proper order.  For example, any Time devices should be initialized first,\n     * to ensure that their timer services are available to other devices.\n     *\n     * @this {Machine}\n     * @returns {Chip|undefined}\n     */\n    initDevices()\n    {\n        let idDevice, sClass, device, chip;\n        for (let iClass = 0; iClass < Machine.CLASSORDER.length; iClass++) {\n            for (idDevice in this.config) {\n                try {\n                    let config = this.config[idDevice], sStatus = \"\";\n                    sClass = config['class'];\n                    if (sClass != Machine.CLASSORDER[iClass]) continue;\n                    switch (sClass) {\n                    case Machine.CLASS.CHIP:\n                        device = new Chip(this.idMachine, idDevice, config);\n                        chip = device;\n                        break;\n                    case Machine.CLASS.INPUT:\n                        device = new Input(this.idMachine, idDevice, config);\n                        break;\n                    case Machine.CLASS.LED:\n                        device = new LED(this.idMachine, idDevice, config);\n                        break;\n                    case Machine.CLASS.ROM:\n                        device = new ROM(this.idMachine, idDevice, config);\n                        if (device.config['revision']) sStatus = \"revision \" + device.config['revision'];\n                        break;\n                    case Machine.CLASS.TIME:\n                        device = new Time(this.idMachine, idDevice, config);\n                        break;\n                    case Machine.CLASS.MACHINE:\n                        this.printf(\"PCjs %s v%3.2f\\n\", config['name'], Machine.VERSION);\n                        this.println(Machine.COPYRIGHT);\n                        this.println(Machine.LICENSE);\n                        continue;\n                    default:\n                        this.println(\"unrecognized device class: \" + sClass);\n                        continue;\n                    }\n                    this.println(sClass + \" device initialized\" + (sStatus? \" (\" + sStatus + \")\" : \"\"));\n                }\n                catch(err) {\n                    this.println(\"error initializing \" + sClass + \" device '\" + idDevice + \"':\\n\" + err.message);\n                    this.removeDevice(idDevice);\n                }\n            }\n        }\n        return chip;\n    }\n}\n\nMachine.CLASS = {\n    CHIP:       \"Chip\",\n    INPUT:      \"Input\",\n    LED:        \"LED\",\n    MACHINE:    \"Machine\",\n    ROM:        \"ROM\",\n    TIME:       \"Time\"\n};\n\nMachine.CLASSORDER = [\n    Machine.CLASS.MACHINE,\n    Machine.CLASS.TIME,\n    Machine.CLASS.LED,\n    Machine.CLASS.INPUT,\n    Machine.CLASS.ROM,\n    Machine.CLASS.CHIP\n];\n\nMachine.COPYRIGHT = \"Copyright © 2012-2017 Jeff Parsons <Jeff@pcjs.org>\";\nMachine.LICENSE = \"License: GPL version 3 or later <http://gnu.org/licenses/gpl.html>\";\n\nMachine.VERSION = 1.11;\n\nwindow[MACHINE] = Machine;\n"]}