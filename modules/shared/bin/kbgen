#!/usr/bin/env node
/**
 * @fileoverview Tool for extracting KB articles from MSPL text files
 * @author <a href="mailto:Jeff@pcjs.org">Jeff Parsons</a>
 * @copyright Â© Jeff Parsons 2012-2017
 * @suppress {missingProperties}
 *
 * This file is part of PCjs, a computer emulation software project at <http://pcjs.org/>.
 *
 * PCjs is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * PCjs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with PCjs.  If not,
 * see <http://www.gnu.org/licenses/gpl.html>.
 *
 * You are required to include the above copyright notice in every modified copy of this work
 * and to display that copyright notice when the software starts running; see COPYRIGHT in
 * <http://pcjs.org/modules/shared/lib/defines.js>.
 *
 * Some PCjs files also attempt to load external resource files, such as character-image files,
 * ROM files, and disk image files. Those external resource files are not considered part of PCjs
 * for purposes of the GNU General Public License, and the author does not claim any copyright
 * as to their contents.
 */

"use strict";

var fs = require("fs");
var Defines = require("../lib/defines");
var Str = require("../lib/strlib");

/**
 * printf(format, ...args)
 *
 * @param {string} format
 * @param {...} args
 * @return {number}
 */
function printf(format, ...args)
{
    console.log(Str.sprintf(format, ...args).replace(/\s*$/, ""));
}

/**
 * processFile(sFile)
 *
 * @param {string} sFile
 */
function processFile(sFile) {
    try {
        let sText = fs.readFileSync(sFile, "binary");
        let re = /([0-9]+)\. *([^\n]*)\s*Product Version\(s\): *([^\n]*)\s*Operating System: *([^\n]*)\s*Flags: *([^\n]*)\s*Last Modified: *([0-9A-Z-]*)\s*ArticleIdent: *(Q[0-9]+)\n/g;
        let match, aMatches = [];
        while (match = re.exec(sText)) {
            /*
             * match[1]: article number
             * match[2]: title
             * match[3]: product version(s)
             * match[4]: operating system
             * match[5]: flags
             * match[6]: last modified
             * match[7]: article identifier
             */
            aMatches.push(match);
        }
        for (let i = 0; i < aMatches.length; i++) {
            match = aMatches[i];
            let iBody = match.index + match[0].length;
            let cchBody;
            if (i < aMatches.length - 1) cchBody = aMatches[i+1].index - iBody;
            let sBody = sText.substr(iBody, cchBody).trim();
            processText(match[7], match[2], "Microsoft C", match[3], match[4], match[5], match[6], sBody);
        }
    }
    catch (err) {
        console.log(err.message);
    }
}

/**
 * processText(sID, sTitle, sProductName, sProductVersions, sOS, sFlags, sDateModified, sText)
 *
 * @param {string} sID
 * @param {string} sTitle
 * @param {string} sProductName
 * @param {string} sProductVersions
 * @param {string} sOS
 * @param {string} sFlags
 * @param {string} sDateModified
 * @param {string} sText
 */
function processText(sID, sTitle, sProductName, sProductVersions, sOS, sFlags, sDateModified, sText)
{
    try {
        let sNew = "";
        sNew += "\tArticle: " + sID + "\n";
        sNew += "\tProduct: " + sProductName + "\n";
        sNew += "\tVersion(s): " + sProductVersions + "\n";
        sNew += "\tOperating System: " + sOS + "\n";
        sNew += "\tFlags: " + sFlags + "\n";
        sNew += "\tLast Modified: " + sDateModified + "\n\t\n";
        let aLines = sText.split(/(?:^|\r?\n) ?/);
        for (let l = 0; l < aLines.length;) {
            let sNewLine = "";
            let sLine = aLines[l++];
            for (let i = 0; i < sLine.length;) {
                let chCode = sLine.charCodeAt(i++);
                //
                // 0x7F was used as a hyperlinking character; we simply remove it for now.  Ditto for 0x1E.
                //
                if (chCode == 0x7F || chCode == 0x1E) continue;
                let chNew = Str.CP437ToUnicode[chCode];
                if (chCode == 0x09 || chNew === undefined) {
                    throw new Error("line " + l + ", pos " + i + ": unrecognized character (" + chCode + ")");
                }
                sNewLine += chNew;
            }
            sNew += '\t' + sNewLine + '\n';
        }
        var sDir = "kb/" + sID;
        sTitle = sTitle.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/\\/g, "&#92;");
        sNew = "---\nlayout: page\ntitle: \"" + sID + ": " + sTitle + "\"\npermalink: /pubs/pc/reference/microsoft/" + sDir + "/\n---\n\n" + sNew;
        if (!fs.existsSync(sDir)) {
            fs.mkdirSync(sDir);
        }
        fs.writeFileSync(sDir + "/README.md", sNew);
        printf("- [%s: %s](%s/)\n", sID, sTitle, sID);
    }
    catch(err) {
        console.log(err.message);
    }
}

if (process.argv.length <= 2) {
    console.log("usage: node txt2md [input filename] [output filename]");
    process.exit();
}

processFile(process.argv[2]);
